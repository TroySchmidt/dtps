{"version":3,"sources":["dtech.js"],"names":["baseURL","document","currentScript","src","split","jQuery","getScript","dtpsLMS","name","legalName","description","logo","source","useRubricGrades","institutionSpecific","genericGradebook","updateAssignments","rawAssignments","map","assignment","rubric","forEach","rubricItem","scoreName","shortenDtechRubricScoreName","score","color","dtechRubricColor","value","calculateGrade","course","assignments","formula","dtechResults","dtechGradeCalc","run","letter","results","grade","dtech","rating","String","toUpperCase","includes","length","percentage","letters","params","sem2","A","A-","B+","B","B-","C","I","lowest","average","array","sum","item","gradeVariations","outcomes","outcome","scores","push","title","Object","keys","values","outcomeScores","RubricItem","this","lowestScore","Math","min","droppedArray","slice","splice","indexOf","droppedAverage","scoreType","droppedScore","outcomeAvgs","getLetter","bestVariation","variation","parameters","sort","a","b","numOutcomesRequired","floor","number75","number75thresh","bestLetter","i","letterIndexes","lowestLetterIndex","max","gradebook","Promise","resolve","reject","gradeCalculation","gradeCalcSummary","toFixed","dtps","gradebookExpanded","previousLetter","join","outcomeHTML","dividerAdded","keyA","keyB","undefined","outcomeID","divider","assessment","aIndex","id","assignmentID","num","assignmentTitle"],"mappings":";;;;;;;;;AAWA,IAAIA,QAAUC,SAASC,cAAcC,IAAIC,MAAM,KAAK,GAAK,KAAOH,SAASC,cAAcC,IAAIC,MAAM,KAAK,GAGtGC,OAAOC,UAAUN,QAAU,0BAA0B,WAGjDO,QAAQC,KAAO,SACfD,QAAQE,UAAY,2DACpBF,QAAQG,YAAc,2DACtBH,QAAQI,KAAO,kCACfJ,QAAQK,OAAS,sEACjBL,QAAQM,gBAAkB,KAC1BN,QAAQO,oBAAsB,KAC9BP,QAAQQ,iBAAmB,MAI3BR,QAAQS,kBAAoB,SAAUC,gBAClC,OAAOA,eAAeC,IAAIC,aAEtB,GAAIA,WAAWC,OAAQ,CAEnBD,WAAWC,OAAOC,QAAQC,aACtBA,WAAWC,UAAYC,4BAA4BF,WAAWC,WAE9D,GAAID,WAAWG,MAAO,CAClBH,WAAWI,MAAQC,iBAAiBL,WAAWG,MAAQH,WAAWM,UAM9E,OAAOT,cAKfZ,QAAQsB,eAAiB,SAAUC,OAAQC,aAEvC,OAGA,IAAIC,QAAU,OAGd,IAAIC,aAAeC,eAAeC,IAAIJ,YAAaC,SAEnD,GAAIC,aAAc,CAEd,MAAO,CACHG,OAAQH,aAAaI,QAAQD,OAC7BE,MAAO,GACPC,MAAON,kBAER,CAEH,SAOR,IAAIT,4BAA8B,SAAUgB,QACxC,GAAIC,OAAOD,QAAQE,cAAcC,SAAS,cAAe,MAAO,aAChE,GAAIF,OAAOD,QAAQE,cAAcC,SAAS,cAAe,MAAO,aAChE,GAAIF,OAAOD,QAAQE,cAAcC,SAAS,cAAe,MAAO,aAChE,GAAIF,OAAOD,QAAQE,cAAcC,SAAS,YAAa,MAAO,WAC9D,IAAKF,OAAOD,QAAQG,SAAS,MAASF,OAAOD,QAAQI,QAAU,GAAK,OAAOJ,OAC3E,MAAO,IAIX,IAAIb,iBAAmB,SAAUkB,YAC7B,GAAIA,YAAc,EAAG,MAAO,UAC5B,GAAIA,YAAc,IAAK,MAAO,UAC9B,GAAIA,YAAc,GAAI,MAAO,UAC7B,GAAIA,YAAc,IAAK,MAAO,UAC9B,GAAIA,YAAc,EAAG,MAAO,WAShC,IAAIX,eAAiB,CACjBY,QAAS,CAAC,IAAK,KAAM,KAAM,IAAK,KAAM,IAAK,KAC3CC,OAAQ,CAMJC,KAAM,CACFH,WAAY,CACRI,EAAK,IACLC,KAAM,IACNC,KAAM,IACNC,EAAK,IACLC,KAAM,IACNC,EAAK,IACLC,EAAK,GAETC,OAAQ,CACJP,EAAK,EACLC,KAAM,IACNC,KAAM,IACNC,EAAK,IACLC,KAAM,IACNC,EAAK,IACLC,EAAK,KAUjBE,QAAS,SAAUC,OACf,IAAIC,IAAM,EACVD,MAAMrC,QAAQuC,MAAQD,KAAOC,MAC7B,OAAOD,IAAMD,MAAMd,QAUvBT,IAAK,SAAUJ,YAAaC,QAAU,QAGlC,IAAI6B,gBAAkB,GAItB,IAAIC,SAAW,GAEf,GAAI9B,SAAW,OAAQ,CAKnBD,YAAYV,QAAQF,aAChB,GAAIA,WAAWC,OAAQ,CAGnBD,WAAWC,OAAOC,QAAQC,aACtB,GAAIA,WAAWG,OAASH,WAAWyC,QAAS,CAGxC,IAAKD,SAASxC,WAAWyC,SAAU,CAE/BD,SAASxC,WAAWyC,SAAW,CAC3BC,OAAQ,IAKhBF,SAASxC,WAAWyC,SAASC,OAAOC,KAAK3C,YAGzC,GAAIA,WAAW4C,MAAOJ,SAASxC,WAAWyC,SAASG,MAAQ5C,WAAW4C,YAStF,GAAIC,OAAOC,KAAKN,UAAUlB,QAAU,EAAG,OAGvCuB,OAAOE,OAAOP,UAAUzC,QAAQ0C,UAE5B,IAAIO,cAAgBP,QAAQC,OAAO9C,IAAIqD,YAAcA,WAAW9C,OAGhE,IAAIgC,QAAUe,KAAKf,QAAQa,eAG3B,IAAIG,YAAcC,KAAKC,OAAOL,eAG9B,IAAIM,aAAeN,cAAcO,QACjCD,aAAaE,OAAOF,aAAaG,QAAQN,aAAc,GAEvD,IAAIO,eAAiBR,KAAKf,QAAQmB,cAGlC,GAAII,eAAiBvB,QAAS,CAE1BM,QAAQkB,UAAY,UACpBlB,QAAQmB,aAAeZ,cAAcS,QAAQN,aAC7CV,QAAQN,QAAUuB,mBACf,CAEHjB,QAAQkB,UAAY,MACpBlB,QAAQN,QAAUA,WAQ1B,IAAI0B,YAAchB,OAAOE,OAAOP,UAAU5C,IAAI6C,SAAWA,QAAQN,SACjEI,gBAAgBI,KAAKO,KAAKY,UAAUD,YAAanD,QAAS,QAK9D,IAAIqD,cAAgB,KACpBxB,gBAAgBxC,QAAQiE,YACpB,IAAKD,eAAkBb,KAAK1B,QAAQiC,QAAQO,UAAUlD,QAAUoC,KAAK1B,QAAQiC,QAAQM,cAAcjD,QAAU,CAEzGiD,cAAgBC,aAKxB,MAAO,CACHjD,QAASgD,cACTrD,QAASA,QACT8B,SAAUA,WAYlBsB,UAAW,SAAUD,YAAanD,QAASsD,WAGvC,IAAIC,WAAa,GAGjBJ,YAAYK,KAAK,CAACC,EAAGC,IAAMA,EAAID,GAE/B,GAAIzD,SAAW,OAAQ,CAInB,IAAIc,QAAU,GAGd,IAAID,WAAa,IACjB,IAAI8C,oBAAsBjB,KAAKkB,MAAMT,YAAYvC,OAASC,YAG1D,GAAIsC,YAAYvC,QAAU,EAAG,CACzB2C,WAAWM,SAAWV,YAAY,OAC/B,CACHI,WAAWM,SAAWV,YAAYQ,oBAAsB,GAE5DJ,WAAWO,eAAiBH,oBAG5B,IAAII,WAAa,KAGjB,IAAK,IAAIC,EAAI,EAAGA,EAAIxB,KAAK1B,QAAQF,OAAQoD,IAAK,CAC1C,IAAI5D,OAASoC,KAAK1B,QAAQkD,GAE1B,GAAIT,WAAWM,UAAYrB,KAAKzB,OAAOf,SAASa,WAAWT,QAAS,CAEhE2D,WAAa3D,OAGb,OAKRU,QAAQmB,KAAK8B,YAKbR,WAAWd,YAAcU,YAAYA,YAAYvC,OAAS,GAG1D,IAAK,IAAIoD,EAAI,EAAGA,EAAIxB,KAAK1B,QAAQF,OAAQoD,IAAK,CAC1C,IAAI5D,OAASoC,KAAK1B,QAAQkD,GAE1B,GAAIT,WAAWd,aAAeD,KAAKzB,OAAOf,SAASwB,OAAOpB,QAAS,CAE/D2D,WAAa3D,OAGb,OAIRU,QAAQmB,KAAK8B,YAIjB,IAAIE,cAAgBnD,QAAQ5B,IAAIkB,QAAUoC,KAAK1B,QAAQiC,QAAQ3C,SAC/D,IAAI8D,kBAAoBxB,KAAKyB,OAAOF,eACpC,IAAI7D,OAASoC,KAAK1B,QAAQoD,mBAE1B,MAAO,CACH9D,OAAQA,OACRmD,WAAYA,WACZD,UAAWA,aAKvB/E,QAAQ6F,UAAY,SAAUtE,QAC1B,OAAO,IAAIuE,QAAQ,CAACC,QAASC,UACzB,GAAIzE,OAAO0E,kBAAoB1E,OAAO0E,iBAAiBjE,MAAO,CAE1D,GAAIT,OAAO0E,iBAAiBjE,MAAMP,SAAW,OAAQ,CACjD,IAAIyE,iBAA2B,mDACH3E,OAAOJ,kOAMDI,OAAOM,iQAOVN,OAAO0E,iBAAiBjE,MAAMF,QAAQkD,WAAWM,SAASa,QAAQ,6MAKlE5E,OAAO0E,iBAAiBjE,MAAMF,QAAQkD,WAAWd,YAAYiC,QAAQ,kFAGlFC,KAAKC,kBAAoB,GAAK,6GAGtC9E,OAAO+E,eAAyB,8JAGP/E,OAAO+E,wFAE9B,qCAEF/E,OAAO0E,iBAAiBjE,MAAMF,QAAQkD,WAAWO,eAAyB,iLAGjDhE,OAAO0E,iBAAiBjE,MAAMF,QAAQkD,WAAWO,wFAExE,umBAcM5D,eAAeY,QAAQ5B,IAAIkB,QAC1B,qDACWN,OAAOM,QAAUA,OAAS,kFAAoF,wEAC9FA,oEACZF,eAAea,OAAOjB,OAAO0E,iBAAiBjE,MAAMP,SAASa,WAAWT,qEACxEF,eAAea,OAAOjB,OAAO0E,iBAAiBjE,MAAMP,SAASwB,OAAOpB,6GAGnG0E,KAAK,8gBAS4EH,KAAKC,kBAAoB,YAAc,8KAIxH,CACH,IAAIH,iBAAmB,GAI3B,IAAIM,YAAc,GAClB,IAAIC,aAAe,MACnB7C,OAAOC,KAAKtC,OAAO0E,iBAAiBjE,MAAMuB,UAAU0B,MAAK,SAAUC,EAAGC,GAClE,IAAIuB,KAAOnF,OAAO0E,iBAAiBjE,MAAMuB,SAAS2B,GAAGhC,QACjDyD,KAAOpF,OAAO0E,iBAAiBjE,MAAMuB,SAAS4B,GAAGjC,QACrD,GAAIwD,MAAQE,UAAW,CAAEF,KAAO,OAASnF,OAAO0E,iBAAiBjE,MAAMuB,SAAS2B,GAAGzB,OAAOpB,OAC1F,GAAIsE,MAAQC,UAAW,CAAED,KAAO,OAASpF,OAAO0E,iBAAiBjE,MAAMuB,SAAS4B,GAAG1B,OAAOpB,OAE1F,GAAIqE,KAAOC,KAAM,OAAO,EACxB,GAAID,KAAOC,KAAM,OAAQ,EACzB,OAAO,KACR7F,QAAS+F,YACR,IAAIrD,QAAUjC,OAAO0E,iBAAiBjE,MAAMuB,SAASsD,WAErD,IAAIC,SAAWL,eAAiBjD,QAAQC,OAAOpB,OAC/C,GAAIyE,QAASL,aAAe,KAE5BD,YAAY9C,KAAa,yBACvBoD,QAAU,qFAAuF,sIAEQD,sNACyErD,QAAQG,yCAEtLH,QAAQN,UAAY0D,UAAY,sDACPC,mIAAmIzF,iBAAiBoC,QAAQN,QAAU,OAAOM,QAAQN,QAAQiD,QAAQ,qCAC5N,gHAGE3C,QAAQC,OAAOpB,QAAU,EAAI,oOAE3BmB,QAAQC,OAAO9C,IAAI,CAACoG,WAAYC,SACjC,iBAAiBD,WAAWvD,oBAAoBuD,WAAWE,cAAcD,QAAUxD,QAAQmB,aAAe,UAAY,4JACzFqC,mGAAmGD,WAAW5F,UAAU4F,WAAW7F,8IAChE6F,WAAWG,kBAAkB3F,OAAO4F,UAAUJ,WAAWK,wEAEjKb,KAAK,uFAOZR,QAAQG,iBAAmB,SAAWM,YAAYD,KAAK,SACpD,CACHR","sourcesContent":["/**\r\n * @file d.tech-specific features, CBL & grade calculation\r\n * @author jottocraft\r\n * \r\n * @copyright Copyright (c) 2018-2020 jottocraft. All rights reserved.\r\n * @license GPL-2.0-only\r\n * \r\n * JSDoc documentation for these LMS functions can be found near the end of core.js\r\n */\r\n\r\n//Get baseURL from the URL of this script\r\nvar baseURL = document.currentScript.src.split('/')[0] + '//' + document.currentScript.src.split('/')[2];\r\n\r\n//Load Canvas integration\r\njQuery.getScript(baseURL + \"/scripts/lms/canvas.js\", function () {\r\n\r\n    //Add d.tech-specific items to dtpsLMS\r\n    dtpsLMS.name = \"d.tech\";\r\n    dtpsLMS.legalName = \"Canvas LMS, Design Tech High School, and Instructure Inc\";\r\n    dtpsLMS.description = \"Power+ integration for Canvas LMS, customized for d.tech\";\r\n    dtpsLMS.logo = \"https://i.imgur.com/efGrLq3.png\";\r\n    dtpsLMS.source = \"https://github.com/jottocraft/dtps/blob/master/scripts/lms/dtech.js\";\r\n    dtpsLMS.useRubricGrades = true;\r\n    dtpsLMS.institutionSpecific = true;\r\n    dtpsLMS.genericGradebook = false;\r\n\r\n    //Update assignments\r\n    //This is for customizing rubric names and colors to match d.tech CBL\r\n    dtpsLMS.updateAssignments = function (rawAssignments) {\r\n        return rawAssignments.map(assignment => {\r\n            //Check if assignment has rubric\r\n            if (assignment.rubric) {\r\n                //Update assignment rubric\r\n                assignment.rubric.forEach(rubricItem => {\r\n                    rubricItem.scoreName = shortenDtechRubricScoreName(rubricItem.scoreName);\r\n\r\n                    if (rubricItem.score) {\r\n                        rubricItem.color = dtechRubricColor(rubricItem.score / rubricItem.value);\r\n                    }\r\n                });\r\n            }\r\n\r\n            //Return updated assignment to the Array.map function\r\n            return assignment;\r\n        })\r\n    }\r\n\r\n    //Run d.tech grade calculation algorithm (defined below)\r\n    dtpsLMS.calculateGrade = function (course, assignments) {\r\n        //Temporarily disable grade calculation for the 2020-2021 school year\r\n        return;\r\n\r\n        //Get d.tech grade calculation formula\r\n        var formula = \"sem2\";\r\n\r\n        //Run d.tech grade calculation\r\n        var dtechResults = dtechGradeCalc.run(assignments, formula);\r\n\r\n        if (dtechResults) {\r\n            //Class has a grade\r\n            return {\r\n                letter: dtechResults.results.letter,\r\n                grade: 98,\r\n                dtech: dtechResults //Return dtech results for gradebook\r\n            };\r\n        } else {\r\n            //No grade for this class\r\n            return;\r\n        }\r\n    }\r\n\r\n    //Local functions & variables, not part of the dtpsLMS specification ----------------------------------------------\r\n\r\n    //Shortens rubric name for d.tech CBL rubrics\r\n    var shortenDtechRubricScoreName = function (rating) {\r\n        if (String(rating).toUpperCase().includes(\"PIONEERING\")) return \"Pioneering\";\r\n        if (String(rating).toUpperCase().includes(\"PROFICIENT\")) return \"Proficient\";\r\n        if (String(rating).toUpperCase().includes(\"DEVELOPING\")) return \"Developing\";\r\n        if (String(rating).toUpperCase().includes(\"EMERGING\")) return \"Emerging\";\r\n        if (!String(rating).includes(\" \") && (String(rating).length <= 20)) return rating;\r\n        return \"\";\r\n    }\r\n\r\n    //Get score color from rubric percentage\r\n    var dtechRubricColor = function (percentage) {\r\n        if (percentage >= 1) return \"#4f9e59\";\r\n        if (percentage >= .75) return \"#a1b553\";\r\n        if (percentage >= .5) return \"#c26d44\";\r\n        if (percentage >= .25) return \"#c4474e\";\r\n        if (percentage >= 0) return \"#bd3139\";\r\n    }\r\n\r\n    /**\r\n     * d.tech CBL grade calculation algorithm\r\n     * \r\n     * @property {string[]} letters An array of letters that can be returned from highest -> lowest\r\n     * @property {object} params Parameters for each type of grade calculation, such as requirements for each criteria\r\n     */\r\n    var dtechGradeCalc = {\r\n        letters: [\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C\", \"I\"],\r\n        params: {\r\n            /**\r\n             * @description Semester 2 grade calculation parameters\r\n             * @property {{string, number}} percentage Percentage criteria parameters. The key of each item in the object is the letter and the value is the percentage needed to meet the criteria\r\n             * @property {{string, number}} lowest Lowest average criteria perameters. The key of each item in the object is the letter and the value is the lowest average needed to meet the criteria\r\n             */\r\n            sem2: {\r\n                percentage: {\r\n                    \"A\": 3.3,\r\n                    \"A-\": 3.3,\r\n                    \"B+\": 2.6,\r\n                    \"B\": 2.6,\r\n                    \"B-\": 2.6,\r\n                    \"C\": 2.2,\r\n                    \"I\": 0\r\n                },\r\n                lowest: {\r\n                    \"A\": 3,\r\n                    \"A-\": 2.5,\r\n                    \"B+\": 2.2,\r\n                    \"B\": 1.8,\r\n                    \"B-\": 1.5,\r\n                    \"C\": 1.5,\r\n                    \"I\": 0\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A simple average function\r\n         * \r\n         * @param {number[]} array Array of numbers to average\r\n         * @return {number} Average of the numbers in the array\r\n         */\r\n        average: function (array) {\r\n            var sum = 0;\r\n            array.forEach(item => sum += item);\r\n            return sum / array.length;\r\n        },\r\n        /**\r\n         * Runs grade calculation. Takes assignments, gets outcome averages, then calls getLetter to get the final letter.\r\n         * This function returns undefined if there is no grade.\r\n         * \r\n         * @param {Assignment[]} assignments Array of assignments to use for grade calculation\r\n         * @param {string} [formula] Formula to use for grade calculation. Can be one of the following: sem2. Default: sem2.\r\n         * @return {object} Grade calculation results\r\n         */\r\n        run: function (assignments, formula = \"sem2\") {\r\n\r\n            //Array of grade variations\r\n            var gradeVariations = [];\r\n\r\n            //Outcomes object\r\n            //This doesn't have to be used by the grade calculation formula, but it's defined here so it can be returned\r\n            var outcomes = {};\r\n\r\n            if (formula == \"sem2\") {\r\n                //SEMESTER 2 OUTCOME AVERAGE FORMULA (sem2)\r\n\r\n                // ------- [sem2] Step 1: Get rubric assessments by outcome -------\r\n\r\n                assignments.forEach(assignment => {\r\n                    if (assignment.rubric) {\r\n                        //Assignment has a rubric\r\n\r\n                        assignment.rubric.forEach(rubricItem => {\r\n                            if (rubricItem.score && rubricItem.outcome) {\r\n                                //Rubric item is assessed and is linked with an outcome\r\n\r\n                                if (!outcomes[rubricItem.outcome]) {\r\n                                    //Outcome object doesn't exist yet\r\n                                    outcomes[rubricItem.outcome] = {\r\n                                        scores: []\r\n                                    };\r\n                                }\r\n\r\n                                //Add RubricItem to outcome array\r\n                                outcomes[rubricItem.outcome].scores.push(rubricItem);\r\n\r\n                                //Save outcome name as rubric title\r\n                                if (rubricItem.title) outcomes[rubricItem.outcome].title = rubricItem.title;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // ------- [sem2] Step 2: Calculate outcome averages -------\r\n\r\n                //If there are no outcomes, this class doesn't have a grade\r\n                if (Object.keys(outcomes).length == 0) return;\r\n\r\n                //Loop over the values of each item in the outcomes object\r\n                Object.values(outcomes).forEach(outcome => {\r\n                    //Get array of scores for the outcome\r\n                    var outcomeScores = outcome.scores.map(RubricItem => RubricItem.score);\r\n\r\n                    //Calculate outcome average with all outcome scores\r\n                    var average = this.average(outcomeScores);\r\n\r\n                    //Get the lowest score\r\n                    var lowestScore = Math.min(...outcomeScores);\r\n\r\n                    //Drop the lowest score to see what happens\r\n                    var droppedArray = outcomeScores.slice(); //copy of outcomeScores array\r\n                    droppedArray.splice(droppedArray.indexOf(lowestScore), 1); //remove lowest score from array\r\n\r\n                    var droppedAverage = this.average(droppedArray); //calculate average from droppedArray\r\n\r\n                    //Choose the higher score\r\n                    if (droppedAverage > average) {\r\n                        //The dropped score was higher\r\n                        outcome.scoreType = \"dropped\";\r\n                        outcome.droppedScore = outcomeScores.indexOf(lowestScore);\r\n                        outcome.average = droppedAverage;\r\n                    } else {\r\n                        //Calculating with all outcome scores was the same or higher\r\n                        outcome.scoreType = \"all\";\r\n                        outcome.average = average;\r\n                    }\r\n                });\r\n\r\n\r\n                // ------- [sem2] Step 3: Calculate letter grade variations -------\r\n\r\n                //All outcomes variation\r\n                var outcomeAvgs = Object.values(outcomes).map(outcome => outcome.average);\r\n                gradeVariations.push(this.getLetter(outcomeAvgs, formula, \"all\"));\r\n\r\n            }\r\n\r\n            //Get the highest grade variation from the results\r\n            var bestVariation = null;\r\n            gradeVariations.forEach(variation => {\r\n                if (!bestVariation || (this.letters.indexOf(variation.letter) < this.letters.indexOf(bestVariation.letter))) {\r\n                    //variation.letter is a higher letter than bestVariation.letter, or there is no best variation yet\r\n                    bestVariation = variation;\r\n                }\r\n            });\r\n\r\n            //Return grade calculation results\r\n            return {\r\n                results: bestVariation, //Results for the best variation\r\n                formula: formula, //Formula used to calculate this grade\r\n                outcomes: outcomes //Calculated outcome scores\r\n            };\r\n        },\r\n        /**\r\n         * Calculates a letter grade from an array of outcome averages. Called by gradeCalc.run.\r\n         * Gets the best possible letter from each criteria, then the lowest letter from that array.\r\n         * \r\n         * @param {number[]} outcomeAvgs Array of outcome averages to use for letter grade calculation\r\n         * @param {string} formula Formula to use for grade calculation. See gradeCalc.run.\r\n         * @param {string} [variation] Name of the letter grade variation (e.g. withSS, withoutSS, etc.). Only used for formulas with multiple variations.\r\n         * @return {object} Letter grade calculation results\r\n         */\r\n        getLetter: function (outcomeAvgs, formula, variation) {\r\n            //Grade calculation results object\r\n            //This includes any properties that need to be passed to the gradebook. The properties set depend on the formula.\r\n            var parameters = {};\r\n\r\n            //Sort outcome averages highest -> lowest\r\n            outcomeAvgs.sort((a, b) => b - a);\r\n\r\n            if (formula == \"sem2\") {\r\n                //SEMESTER 2 LETTER GRADE FORMULA (sem2)\r\n\r\n                //Array of letters from each criteria\r\n                var letters = [];\r\n\r\n                // ------- [sem2] Step 1: Get highest letter for Criteria 1 (percentage of outcomes criteria) -------\r\n                var percentage = .75;\r\n                var numOutcomesRequired = Math.floor(outcomeAvgs.length * percentage); //Minimum number of outcomes required\r\n\r\n                //Calculate the value 75% of outcomes >= to (number75) and the number of outcomes needed to meet criteria 1\r\n                if (outcomeAvgs.length == 1) {\r\n                    parameters.number75 = outcomeAvgs[0]; //if there is only 1 outcome, that outcome is number75\r\n                } else {\r\n                    parameters.number75 = outcomeAvgs[numOutcomesRequired - 1]; //number75 = the outcome 75% through the array (since its sorted)\r\n                }\r\n                parameters.number75thresh = numOutcomesRequired; //number75thresh = number of outcomes needed to meet the criteria\r\n\r\n                //Get the best letter\r\n                var bestLetter = null;\r\n\r\n                //Test each letter and add the highest to the letters array\r\n                for (var i = 0; i < this.letters.length; i++) {\r\n                    let letter = this.letters[i];\r\n\r\n                    if (parameters.number75 >= this.params[formula].percentage[letter]) {\r\n                        //Able to get this letter\r\n                        bestLetter = letter;\r\n\r\n                        //Stop checking for matches since all letters after this are lower\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                //Add highest criteria 1 letter to the letters array\r\n                letters.push(bestLetter);\r\n\r\n                // ------- [sem2] Step 2: Get highest letter for Criteria 2 (lowest outcome criteria) -------\r\n\r\n                //Since the array is highest -> lowest, the lowest score is the last item in the array\r\n                parameters.lowestScore = outcomeAvgs[outcomeAvgs.length - 1];\r\n\r\n                //Test each letter and add the highest to the letters array\r\n                for (var i = 0; i < this.letters.length; i++) {\r\n                    let letter = this.letters[i];\r\n\r\n                    if (parameters.lowestScore >= this.params[formula].lowest[letter]) {\r\n                        //Able to get this letter\r\n                        bestLetter = letter;\r\n\r\n                        //Stop checking for matches since all letters after this are lower\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                letters.push(bestLetter);\r\n            }\r\n\r\n            //Get the final letter, the lowest letter from the array\r\n            var letterIndexes = letters.map(letter => this.letters.indexOf(letter)); //Array of letter indexes in this.letters\r\n            var lowestLetterIndex = Math.max(...letterIndexes); //Lowest letter = highest index in this.letters\r\n            var letter = this.letters[lowestLetterIndex]; //Get final letter\r\n\r\n            return {\r\n                letter: letter,\r\n                parameters: parameters,\r\n                variation: variation\r\n            };\r\n        }\r\n    };\r\n\r\n    dtpsLMS.gradebook = function (course) {\r\n        return new Promise((resolve, reject) => {\r\n            if (course.gradeCalculation && course.gradeCalculation.dtech) {\r\n                //RENDERER: RENDER GRADE CALCULATION SUMMARY ------------------------------------\r\n                if (course.gradeCalculation.dtech.formula == \"sem2\") {\r\n                    var gradeCalcSummary = /*html*/`\r\n                    <div style=\"--classColor: ${course.color}\" class=\"card\">\r\n\r\n                        <h3 class=\"gradeTitle\">\r\n                            Grades\r\n\r\n                            <div class=\"classGradeCircle\">\r\n                                <div class=\"letter\">${course.letter}</div>\r\n                            </div>\r\n\r\n                        </h3>\r\n\r\n                        <h5 class=\"gradeStat\">\r\n                            75% (rounded down) of outcome scores are ≥\r\n                            <div class=\"numFont\">${course.gradeCalculation.dtech.results.parameters.number75.toFixed(1)}</div>\r\n                        </h5>\r\n\r\n                        <h5 class=\"gradeStat\">\r\n                            No outcome scores are lower than\r\n                            <div class=\"numFont\">${course.gradeCalculation.dtech.results.parameters.lowestScore.toFixed(1)}</div>\r\n                        </h5>\r\n\r\n                        <div style=\"${dtps.gradebookExpanded ? \"\" : \"display: none;\"}\" id=\"classGradeMore\">\r\n                            <br />\r\n\r\n                            ${course.previousLetter ? /*html*/`\r\n                            <h5 class=\"smallStat\">\r\n                                Previous Grade\r\n                                <div class=\"numFont\">${course.previousLetter}</div>\r\n                            </h5>\r\n                            ` : ``}\r\n\r\n                            ${course.gradeCalculation.dtech.results.parameters.number75thresh ? /*html*/`\r\n                            <h5 class=\"smallStat\">\r\n                                75% of outcomes (rounded down) is\r\n                                <div class=\"numFont\">${course.gradeCalculation.dtech.results.parameters.number75thresh}</div>\r\n                            </h5>\r\n                            ` : ``}\r\n                        \r\n                            <br />\r\n\r\n                            <table class=\"u-full-width dtpsTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                    <th>&nbsp;&nbsp;Final Letter</th>\r\n                                    <th>75% (rounded down) of outcome scores is ≥</th>\r\n                                    <th>No outcome scores below</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    ${dtechGradeCalc.letters.map(letter => {\r\n                        return /*html*/`\r\n                                            <tr ${course.letter == letter ? `style=\"background-color: var(--classColor); font-size:20px; font-weight: bold;\"` : ``}>\r\n                                                <td>&nbsp;&nbsp;${letter}</td>\r\n                                                <td>${dtechGradeCalc.params[course.gradeCalculation.dtech.formula].percentage[letter]}</td>\r\n                                                <td>${dtechGradeCalc.params[course.gradeCalculation.dtech.formula].lowest[letter]}</td>\r\n                                            </tr>\r\n                                        `\r\n                    }).join(\"\")}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <br />\r\n\r\n                        <br />\r\n                        <a onclick=\"$('#classGradeMore').toggle(); if ($('#classGradeMore').is(':visible')) {$(this).html('Show less'); dtps.gradebookExpanded = true;} else {$(this).html('Show more'); dtps.gradebookExpanded = false;}\"\r\n                            style=\"color: var(--secText, gray); cursor: pointer; margin-right: 10px;\">${dtps.gradebookExpanded ? \"Show less\" : \"Show more\"}</a>\r\n                        <a style=\"color: var(--secText, gray);\">Using Jan-Mar 2020 Grade Calculation</a>\r\n                    </div>\r\n                `;\r\n                } else {\r\n                    var gradeCalcSummary = \"\"; //no grade calculation for this class\r\n                }\r\n\r\n                //RENDERER: RENDER EACH OUTCOME ------------------------------------\r\n                var outcomeHTML = []; //array of outcome html to be rendered\r\n                var dividerAdded = false; //used for determining if the unassessed outcome divided has been added\r\n                Object.keys(course.gradeCalculation.dtech.outcomes).sort(function (a, b) {\r\n                    var keyA = course.gradeCalculation.dtech.outcomes[a].average,//sort by score lowest -> highest\r\n                        keyB = course.gradeCalculation.dtech.outcomes[b].average;\r\n                    if (keyA == undefined) { keyA = 999999 - course.gradeCalculation.dtech.outcomes[a].scores.length; } //put outcomes with no assessments at the bottom\r\n                    if (keyB == undefined) { keyB = 999999 - course.gradeCalculation.dtech.outcomes[b].scores.length; }\r\n                    // Compare the 2 scores\r\n                    if (keyA > keyB) return 1;\r\n                    if (keyA < keyB) return -1;\r\n                    return 0;\r\n                }).forEach((outcomeID) => {\r\n                    var outcome = course.gradeCalculation.dtech.outcomes[outcomeID];\r\n\r\n                    var divider = !dividerAdded && !outcome.scores.length; //render divider\r\n                    if (divider) dividerAdded = true; //remember that divider is already rendered\r\n\r\n                    outcomeHTML.push(/*html*/`\r\n                    ${divider ? `<h5 style=\"font-weight: bold;margin: 75px 75px 10px 75px;\">Unassesed outcomes</h5>` : \"\"}\r\n\r\n                    <div style=\"border-radius: 20px;padding: 22px; padding-bottom: 20px;\" class=\"card outcomeResults outcome-${outcomeID}\">\r\n                        <h5 style=\"max-width: calc(100% - 50px); font-size: 24px; margin: 0px; margin-bottom: 20px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; cursor: pointer;\">${outcome.title}</h5>\r\n\r\n                        ${outcome.average !== undefined ? `\r\n                            <div id=\"outcomeScore${outcomeID}\" style=\"position: absolute; top: 20px; right: 20px; font-size: 26px; font-weight: bold; display: inline-block; color: ${dtechRubricColor(outcome.average / 4)}\">${outcome.average.toFixed(2)}</div>\r\n                        ` : ``}\r\n                        \r\n                        <div class=\"assessments\">\r\n                            ${outcome.scores.length == 0 ? `\r\n                                    <p style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin: 6px 0px; color: var(--secText);\">This outcome has not been assessed yet</p>\r\n                            ` : outcome.scores.map((assessment, aIndex) => {\r\n                        return `<p id=\"outcome${assessment.outcome}assessment${assessment.id}\" class=\"${aIndex == outcome.droppedScore ? \"dropped\" : \"\"}\" style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin: 6px 0px;\">\r\n                                            <span aIndex=\"${aIndex}\" style=\"outline: none;margin-right: 5px; font-size: 20px; vertical-align: middle; color: ${assessment.color}\">${assessment.score}</span>\r\n                                            <span class=\"assessmentTitle\" style=\"cursor: pointer;\" onclick=\"dtps.assignment('${assessment.assignmentID}', ${course.num});\">${assessment.assignmentTitle}</span>\r\n                                        </p>`;\r\n                    }).join(\"\")}\r\n                        </div>\r\n                    </div>\r\n                `);\r\n                })\r\n\r\n                //RESOLVE WITH HTML\r\n                resolve(gradeCalcSummary + `<br />` + outcomeHTML.join(\"\"));\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n});"]}