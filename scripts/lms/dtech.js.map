{"version":3,"sources":["scripts/lms/dtech.js"],"names":["baseURL","document","currentScript","src","split","jQuery","getScript","dtpsLMS","name","legalName","description","logo","source","useRubricGrades","institutionSpecific","genericGradebook","dtech","updateAssignments","rawAssignments","Promise","resolve","reject","map","assignment","rubric","forEach","rubricItem","scoreName","shortenDtechRubricScoreName","score","color","dtechRubricColor","updateClasses","classes","tmpNewArray","course","i","term","dtps","remoteConfig","dtechCurrentTerm","id","debugClassID","endDate","Date","push","showVideoMeetingButton","promises","homepage","fetchHomepage","then","$","find","length","link","children","attr","toUpperCase","includes","videoMeetingURL","all","calculateGrade","assignments","gradeCalculationEnabled","formula","dtechResults","dtechGradeCalc","run","letter","results","rating","String","letters","params","2020s1","percentage","A","A-","B+","B","B-","C","I","lowest","average","array","sum","item","outcomesOverride","gradeVariations","outcomes","outcome","scores","title","Object","keys","values","outcomeScores","RubricItem","this","lowestScore","Math","min","droppedArray","slice","splice","indexOf","droppedAverage","scoreType","droppedScore","outcomeAvgs","getLetter","bestVariation","variation","parameters","sort","a","b","numOutcomesRequired","floor","number75","number75thresh","bestLetter","letterIndexes","lowestLetterIndex","max","gradebook","gradeCalculation","gradeCalcSummary","toFixed","gradebookExpanded","previousLetter","join","outcomeHTML","dividerAdded","keyA","keyB","undefined","outcomeID","divider","assessment","aIndex","allowWhatIfGrades","assignmentID","num","assignmentTitle","gradebookDidRender","toArray","ele","listenForWhatIf","click","addWhatIf","addEventListener","initWhatIf","typedScore","Number","text","isNaN","css","whatIfOutcomes","calcWhatIf","html","is","JSON","parse","stringify","show","removeClass","addClass","value","whatIfGrade","append"],"mappings":"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","sourceRoot":"/","sourcesContent":["/**\n * @file d.tech-specific features, CBL & grade calculation\n * @author jottocraft\n * \n * @copyright Copyright (c) 2018-2020 jottocraft. All rights reserved.\n * @license GPL-2.0-only\n * \n * JSDoc documentation for these LMS functions can be found near the end of core.js\n */\n\n//Get baseURL from the URL of this script\nvar baseURL = document.currentScript.src.split(\"/scripts/lms/dtech.js\")[0];\n\n//Load Canvas integration\njQuery.getScript(baseURL + \"/scripts/lms/canvas.js\", function () {\n\n    //Add d.tech-specific items to dtpsLMS\n    dtpsLMS.name = \"d.tech\";\n    dtpsLMS.legalName = \"Canvas LMS, Design Tech High School, and Instructure Inc\";\n    dtpsLMS.description = \"Power+ integration for Canvas LMS, customized for d.tech\";\n    dtpsLMS.logo = \"https://i.imgur.com/efGrLq3.png\";\n    dtpsLMS.source = \"https://github.com/jottocraft/dtps/blob/master/scripts/lms/dtech.js\";\n    dtpsLMS.useRubricGrades = true;\n    dtpsLMS.institutionSpecific = true;\n    dtpsLMS.genericGradebook = false;\n    dtpsLMS.dtech = true;\n\n    //Update assignments\n    //This is for customizing rubric names and colors to match d.tech CBL\n    dtpsLMS.updateAssignments = function (rawAssignments) {\n        return new Promise((resolve, reject) => {\n            var updatedAssignments = rawAssignments.map(assignment => {\n                //Check if assignment has rubric\n                if (assignment.rubric) {\n                    //Update assignment rubric\n                    assignment.rubric.forEach(rubricItem => {\n                        rubricItem.scoreName = shortenDtechRubricScoreName(rubricItem.scoreName);\n\n                        if (rubricItem.score) {\n                            rubricItem.color = dtechRubricColor(rubricItem.score);\n                        }\n                    });\n                }\n\n                //Return updated assignment to the Array.map function\n                return assignment;\n            });\n\n            resolve(updatedAssignments);\n        })\n    }\n\n    //Update classes\n    dtpsLMS.updateClasses = function (classes) {\n        return new Promise((resolve, reject) => {\n            var tmpNewArray = [];\n            classes.forEach((course, i) => {\n                if (course.term == dtps.remoteConfig.dtechCurrentTerm) {\n                    tmpNewArray.push(course);\n                } else if (course.id == dtps.remoteConfig.debugClassID) {\n                    tmpNewArray.push(course);\n                } else if (!course.endDate || (new Date() < new Date(course.endDate))) {\n                    tmpNewArray.push(course);\n                }\n            });\n            classes = tmpNewArray;\n\n            //Don't fetch videoMeetingURL if disable by remoteConfig\n            if (!dtps.remoteConfig.showVideoMeetingButton) {\n                resolve(classes);\n                return;\n            }\n\n            var promises = [];\n\n            //Create a new promise for each class\n            classes.forEach(course => {\n                if (course.homepage) {\n                    promises.push(new Promise((resolve, reject) => {\n                        dtpsLMS.fetchHomepage(course.id).then(homepage => {\n                            //get zoom link\n                            var matches = 0;\n                            for (var i = 0; i < $(homepage).find(\"a\").length; i++) {\n                                var link = $($(homepage).find(\"a\")[i]);\n                                if (link.children(\"img\").attr(\"alt\") && link.children(\"img\").attr(\"alt\").toUpperCase().includes(\"ZOOM BUTTON\") && link.attr(\"href\")) {\n                                    //Button labelled as zoom button\n                                    course.videoMeetingURL = link.attr(\"href\");\n                                } else if (link.attr(\"href\") && link.attr(\"href\").includes(\"zoom.us\")) {\n                                    //Button link goes to a zoom meeting, only use this if there is no other zoom link\n                                    //if (!course.videoMeetingURL) course.videoMeetingURL = link.attr(\"href\");\n                                }\n                            }\n\n                            if (matches > 1) {\n                                //Multiple zoom links found\n                                course.videoMeetingURL = null;\n                            }\n\n                            resolve();\n                        })\n                    }))\n                }\n            })\n\n            //Run all promises\n            Promise.all(promises).then(() => {\n                resolve(classes);\n            })\n        });\n    }\n\n    //Run d.tech grade calculation algorithm (defined below)\n    dtpsLMS.calculateGrade = function (course, assignments) {\n        //If grade calculation is disabled, don't run grade calc\n        if (!dtps.remoteConfig.gradeCalculationEnabled) return;\n\n        var formula = null;\n\n        //Get d.tech grade calculation formula\n        if (course.term == \"20-21\") {\n            formula = \"2020s1\";\n        } else if (course.id == dtps.remoteConfig.debugClassID) {\n            formula = \"2020s1\";\n        }\n\n        //If there is no grade calculation formula, don't run grade calc\n        if (!formula) return;\n\n        //Run d.tech grade calculation\n        var dtechResults = dtechGradeCalc.run(assignments, formula);\n\n        if (dtechResults) {\n            //Class has a grade\n            return {\n                letter: dtechResults.results.letter,\n                dtech: dtechResults //Return dtech results for gradebook\n            };\n        } else {\n            //No grade for this class\n            return;\n        }\n    }\n\n    //Local functions & variables, not part of the dtpsLMS specification ----------------------------------------------\n\n    //Shortens rubric name for d.tech CBL rubrics\n    var shortenDtechRubricScoreName = function (rating) {\n        if (String(rating).toUpperCase().includes(\"PIONEERING\")) return \"Pioneering\";\n        if (String(rating).toUpperCase().includes(\"PROFICIENT\")) return \"Proficient\";\n        if (String(rating).toUpperCase().includes(\"DEVELOPING\")) return \"Developing\";\n        if (String(rating).toUpperCase().includes(\"EMERGING\")) return \"Emerging\";\n        if (!String(rating).includes(\" \") && (String(rating).length <= 20)) return rating;\n        return \"\";\n    }\n\n    //Get score color from rubric percentage\n    var dtechRubricColor = function (score) {\n        if (score >= 4) return \"#4f9e59\";\n        if (score >= 3) return \"#a1b553\";\n        if (score >= 2) return \"#c26d44\";\n        if (score >= 1) return \"#c4474e\";\n        if (score >= 0) return \"#bd3139\";\n    }\n\n    /**\n     * d.tech CBL grade calculation algorithm\n     * \n     * @property {string[]} letters An array of letters that can be returned from highest -> lowest\n     * @property {object} params Parameters for each type of grade calculation, such as requirements for each criteria\n     */\n    var dtechGradeCalc = {\n        letters: [\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C\", \"I\"],\n        params: {\n            /**\n             * @description 2020s1 grade calculation parameters\n             * @property {{string, number}} percentage Percentage criteria parameters. The key of each item in the object is the letter and the value is the percentage needed to meet the criteria\n             * @property {{string, number}} lowest Lowest average criteria perameters. The key of each item in the object is the letter and the value is the lowest average needed to meet the criteria\n             */\n            \"2020s1\": {\n                percentage: {\n                    \"A\": 3.3,\n                    \"A-\": 3.3,\n                    \"B+\": 2.6,\n                    \"B\": 2.6,\n                    \"B-\": 2.6,\n                    \"C\": 2.2,\n                    \"I\": 0\n                },\n                lowest: {\n                    \"A\": 3,\n                    \"A-\": 2.5,\n                    \"B+\": 2.2,\n                    \"B\": 1.8,\n                    \"B-\": 1.5,\n                    \"C\": 1.5,\n                    \"I\": 0\n                }\n            }\n        },\n        /**\n         * A simple average function\n         * \n         * @param {number[]} array Array of numbers to average\n         * @return {number} Average of the numbers in the array\n         */\n        average: function (array) {\n            var sum = 0;\n            array.forEach(item => sum += item);\n            return sum / array.length;\n        },\n        /**\n         * Runs grade calculation. Takes assignments, gets outcome averages, then calls getLetter to get the final letter.\n         * This function returns undefined if there is no grade.\n         * \n         * @param {Assignment[]} assignments Array of assignments to use for grade calculation\n         * @param {string} formula Formula to use for grade calculation. Can be one of the following: 2020s1\n         * @param {object} outcomesOverride An outcome object to use instead of using assignments. Used for what-if grades.\n         * @return {object} Grade calculation results\n         */\n        run: function (assignments, formula, outcomesOverride) {\n\n            //Array of grade variations\n            var gradeVariations = [];\n\n            //Outcomes object\n            //This doesn't have to be used by the grade calculation formula. Can be overridden for What-If grades.\n            var outcomes = outcomesOverride || {};\n\n            if (formula == \"2020s1\") {\n                //2020-21 SEMESTER 1 OUTCOME AVERAGE FORMULA (2020s1)\n\n                // ------- [2020s1] Step 1: Get rubric assessments by outcome -------\n\n                if (!outcomesOverride) {\n                    assignments.forEach(assignment => {\n                        if (assignment.rubric) {\n                            //Assignment has a rubric\n\n                            assignment.rubric.forEach(rubricItem => {\n                                if (rubricItem.score && rubricItem.outcome) {\n                                    //Rubric item is assessed and is linked with an outcome\n\n                                    if (!outcomes[rubricItem.outcome]) {\n                                        //Outcome object doesn't exist yet\n                                        outcomes[rubricItem.outcome] = {\n                                            scores: []\n                                        };\n                                    }\n\n                                    //Add RubricItem to outcome array\n                                    outcomes[rubricItem.outcome].scores.push(rubricItem);\n\n                                    //Save outcome name as rubric title\n                                    if (rubricItem.title) outcomes[rubricItem.outcome].title = rubricItem.title;\n                                }\n                            });\n                        }\n                    });\n                }\n\n                // ------- [2020s1] Step 2: Calculate outcome averages -------\n\n                //If there are no outcomes, this class doesn't have a grade\n                if (Object.keys(outcomes).length == 0) return;\n\n                //Loop over the values of each item in the outcomes object\n                Object.values(outcomes).forEach(outcome => {\n                    //Get array of scores for the outcome\n                    var outcomeScores = outcome.scores.map(RubricItem => RubricItem.score);\n\n                    //Calculate outcome average with all outcome scores\n                    var average = this.average(outcomeScores);\n\n                    //Get the lowest score\n                    var lowestScore = Math.min(...outcomeScores);\n\n                    //Drop the lowest score to see what happens\n                    var droppedArray = outcomeScores.slice(); //copy of outcomeScores array\n                    droppedArray.splice(droppedArray.indexOf(lowestScore), 1); //remove lowest score from array\n\n                    var droppedAverage = this.average(droppedArray); //calculate average from droppedArray\n\n                    //Choose the higher score\n                    if (droppedAverage > average) {\n                        //The dropped score was higher\n                        outcome.scoreType = \"dropped\";\n                        outcome.droppedScore = outcomeScores.indexOf(lowestScore);\n                        outcome.average = droppedAverage;\n                    } else {\n                        //Calculating with all outcome scores was the same or higher\n                        outcome.scoreType = \"all\";\n                        outcome.average = average;\n                        delete outcome.droppedScore;\n                    }\n                });\n\n\n                // ------- [2020s1] Step 3: Calculate letter grade variations -------\n\n                //All outcomes variation\n                var outcomeAvgs = Object.values(outcomes).map(outcome => outcome.average);\n                gradeVariations.push(this.getLetter(outcomeAvgs, formula, \"all\"));\n\n            }\n\n            //Get the highest grade variation from the results\n            var bestVariation = null;\n            gradeVariations.forEach(variation => {\n                if (!bestVariation || (this.letters.indexOf(variation.letter) < this.letters.indexOf(bestVariation.letter))) {\n                    //variation.letter is a higher letter than bestVariation.letter, or there is no best variation yet\n                    bestVariation = variation;\n                }\n            });\n\n            //Return grade calculation results\n            return {\n                results: bestVariation, //Results for the best variation\n                formula: formula, //Formula used to calculate this grade\n                outcomes: outcomes //Calculated outcome scores\n            };\n        },\n        /**\n         * Calculates a letter grade from an array of outcome averages. Called by gradeCalc.run.\n         * Gets the best possible letter from each criteria, then the lowest letter from that array.\n         * \n         * @param {number[]} outcomeAvgs Array of outcome averages to use for letter grade calculation\n         * @param {string} formula Formula to use for grade calculation. See gradeCalc.run.\n         * @param {string} [variation] Name of the letter grade variation (e.g. withSS, withoutSS, etc.). Only used for formulas with multiple variations.\n         * @return {object} Letter grade calculation results\n         */\n        getLetter: function (outcomeAvgs, formula, variation) {\n            //Grade calculation results object\n            //This includes any properties that need to be passed to the gradebook. The properties set depend on the formula.\n            var parameters = {};\n\n            //Sort outcome averages highest -> lowest\n            outcomeAvgs.sort((a, b) => b - a);\n\n            if (formula == \"2020s1\") {\n                //2020-21 SEMESTER 1 LETTER GRADE FORMULA (2020s1)\n\n                //Array of letters from each criteria\n                var letters = [];\n\n                // ------- [2020s1] Step 1: Get highest letter for Criteria 1 (percentage of outcomes criteria) -------\n                var percentage = .75;\n                var numOutcomesRequired = Math.floor(outcomeAvgs.length * percentage); //Minimum number of outcomes required\n\n                //Calculate the value 75% of outcomes >= to (number75) and the number of outcomes needed to meet criteria 1\n                if (outcomeAvgs.length == 1) {\n                    parameters.number75 = outcomeAvgs[0]; //if there is only 1 outcome, that outcome is number75\n                } else {\n                    parameters.number75 = outcomeAvgs[numOutcomesRequired - 1]; //number75 = the outcome 75% through the array (since its sorted)\n                }\n                parameters.number75thresh = numOutcomesRequired; //number75thresh = number of outcomes needed to meet the criteria\n\n                //Get the best letter\n                var bestLetter = null;\n\n                //Test each letter and add the highest to the letters array\n                for (var i = 0; i < this.letters.length; i++) {\n                    let letter = this.letters[i];\n\n                    if (parameters.number75 >= this.params[formula].percentage[letter]) {\n                        //Able to get this letter\n                        bestLetter = letter;\n\n                        //Stop checking for matches since all letters after this are lower\n                        break;\n                    }\n                }\n\n                //Add highest criteria 1 letter to the letters array\n                letters.push(bestLetter);\n\n                // ------- [2020s1] Step 2: Get highest letter for Criteria 2 (lowest outcome criteria) -------\n\n                //Reset best letter\n                var bestLetter = null;\n\n                //Since the array is highest -> lowest, the lowest score is the last item in the array\n                parameters.lowestScore = outcomeAvgs[outcomeAvgs.length - 1];\n\n                //Test each letter and add the highest to the letters array\n                for (var i = 0; i < this.letters.length; i++) {\n                    let letter = this.letters[i];\n\n                    if (parameters.lowestScore >= this.params[formula].lowest[letter]) {\n                        //Able to get this letter\n                        bestLetter = letter;\n\n                        //Stop checking for matches since all letters after this are lower\n                        break;\n                    }\n                }\n\n                //Add highest criteria 2 letter to the letters array\n                letters.push(bestLetter);\n            }\n\n            //Get the final letter, the lowest letter from the array\n            var letterIndexes = letters.map(letter => this.letters.indexOf(letter)); //Array of letter indexes in this.letters\n            var lowestLetterIndex = Math.max(...letterIndexes); //Lowest letter = highest index in this.letters\n            var letter = this.letters[lowestLetterIndex]; //Get final letter\n\n            return {\n                letter: letter,\n                parameters: parameters,\n                variation: variation\n            };\n        }\n    };\n\n    dtpsLMS.gradebook = function (course) {\n        return new Promise((resolve, reject) => {\n            if (course.gradeCalculation && course.gradeCalculation.dtech) {\n                //RENDERER: RENDER GRADE CALCULATION SUMMARY ------------------------------------\n                if (course.gradeCalculation.dtech.formula == \"2020s1\") {\n                    var gradeCalcSummary = /*html*/`\n                    <div style=\"--classColor: ${course.color}\" class=\"card\">\n\n                        <h3 class=\"gradeTitle\">\n                            Grades\n\n                            <div class=\"classGradeCircle\">\n                                <div class=\"letter\">${course.letter}</div>\n                            </div>\n\n                        </h3>\n\n                        <h5 class=\"gradeStat\">\n                            75% (rounded down) of outcome scores are ≥\n                            <div class=\"numFont\">${course.gradeCalculation.dtech.results.parameters.number75.toFixed(1)}</div>\n                        </h5>\n\n                        <h5 class=\"gradeStat\">\n                            No outcome scores are lower than\n                            <div class=\"numFont\">${course.gradeCalculation.dtech.results.parameters.lowestScore.toFixed(1)}</div>\n                        </h5>\n\n                        <div style=\"${dtps.gradebookExpanded ? \"\" : \"display: none;\"}\" id=\"classGradeMore\">\n                            <br />\n\n                            ${course.previousLetter ? /*html*/`\n                            <h5 class=\"smallStat\">\n                                Previous Grade\n                                <div class=\"numFont\">${course.previousLetter}</div>\n                            </h5>\n                            ` : ``}\n\n                            ${course.gradeCalculation.dtech.results.parameters.number75thresh ? /*html*/`\n                            <h5 class=\"smallStat\">\n                                75% of outcomes (rounded down) is\n                                <div class=\"numFont\">${course.gradeCalculation.dtech.results.parameters.number75thresh}</div>\n                            </h5>\n                            ` : ``}\n                        \n                            <br />\n\n                            <table class=\"u-full-width dtpsTable\">\n                                <thead>\n                                    <tr>\n                                    <th>&nbsp;&nbsp;Final Letter</th>\n                                    <th>75% (rounded down) of outcome scores is ≥</th>\n                                    <th>No outcome scores below</th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    ${dtechGradeCalc.letters.map(letter => {\n                        return /*html*/`\n                                            <tr ${course.letter == letter ? `style=\"background-color: var(--classColor); color: white; font-size:20px; font-weight: bold;\"` : ``}>\n                                                <td>&nbsp;&nbsp;${letter}</td>\n                                                <td>${dtechGradeCalc.params[course.gradeCalculation.dtech.formula].percentage[letter]}</td>\n                                                <td>${dtechGradeCalc.params[course.gradeCalculation.dtech.formula].lowest[letter]}</td>\n                                            </tr>\n                                        `\n                    }).join(\"\")}\n                                </tbody>\n                            </table>\n                        </div>\n\n                        <br />\n\n                        <br />\n                        <a onclick=\"$('#classGradeMore').toggle(); if ($('#classGradeMore').is(':visible')) {$(this).html('Show less'); dtps.gradebookExpanded = true;} else {$(this).html('Show more'); dtps.gradebookExpanded = false;}\"\n                            style=\"color: var(--secText, gray); cursor: pointer; margin-right: 10px;\">${dtps.gradebookExpanded ? \"Show less\" : \"Show more\"}</a>\n                        <a href=\"https://docs.google.com/document/d/1g4-aYZ_BS5_I4Ie64WGCwXeArl1K_pHbBbebDHra_sM/edit\" style=\"color: var(--secText, gray);\">Using 2020-21 grade calculation</a>\n                    </div>\n                `;\n                } else {\n                    var gradeCalcSummary = \"\"; //no grade calculation for this class\n                }\n\n                //RENDERER: RENDER EACH OUTCOME ------------------------------------\n                var outcomeHTML = []; //array of outcome html to be rendered\n                var dividerAdded = false; //used for determining if the unassessed outcome divided has been added\n                Object.keys(course.gradeCalculation.dtech.outcomes).sort(function (a, b) {\n                    var keyA = course.gradeCalculation.dtech.outcomes[a].average,//sort by score lowest -> highest\n                        keyB = course.gradeCalculation.dtech.outcomes[b].average;\n                    if (keyA == undefined) { keyA = 999999 - course.gradeCalculation.dtech.outcomes[a].scores.length; } //put outcomes with no assessments at the bottom\n                    if (keyB == undefined) { keyB = 999999 - course.gradeCalculation.dtech.outcomes[b].scores.length; }\n                    // Compare the 2 scores\n                    if (keyA > keyB) return 1;\n                    if (keyA < keyB) return -1;\n                    return 0;\n                }).forEach((outcomeID) => {\n                    var outcome = course.gradeCalculation.dtech.outcomes[outcomeID];\n\n                    var divider = !dividerAdded && !outcome.scores.length; //render divider\n                    if (divider) dividerAdded = true; //remember that divider is already rendered\n\n                    outcomeHTML.push(/*html*/`\n                    ${divider ? `<h5 style=\"font-weight: bold;margin: 75px 75px 10px 75px;\">Unassesed outcomes</h5>` : \"\"}\n\n                    <div style=\"border-radius: 20px;padding: 22px; padding-bottom: 20px;\" class=\"card outcomeResults outcome-${outcomeID}\">\n                        <h5 style=\"max-width: calc(100% - 50px); font-size: 24px; margin: 0px; margin-bottom: 20px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; cursor: pointer;\">${outcome.title}</h5>\n\n                        ${outcome.average !== undefined ? `\n                            <div id=\"outcomeScore${outcomeID}\" style=\"position: absolute; top: 20px; right: 20px; font-size: 26px; font-weight: bold; display: inline-block; color: ${dtechRubricColor(outcome.average)}\">${outcome.average.toFixed(2)}</div>\n                        ` : ``}\n                        \n                        <div class=\"assessments\">\n                            ${outcome.scores.length == 0 ? `\n                                    <p style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin: 6px 0px; color: var(--secText);\">This outcome has not been assessed yet</p>\n                            ` :\n                            outcome.scores.map((assessment, aIndex) => {\n                                return /*html*/`\n                                        <p id=\"outcome${assessment.outcome}assessment${aIndex}\" class=\"${aIndex == outcome.droppedScore ? \"dropped\" : \"\"}\" style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin: 6px 0px;\">\n                                            <span aIndex=\"${aIndex}\" outcomeID=\"${outcomeID}\"\n                                                style=\"outline: none;margin-right: 5px; font-size: 20px; vertical-align: middle; color: ${assessment.color}\" class=\"editableScore\" ${dtps.remoteConfig.allowWhatIfGrades ? `contenteditable` : \"\"}>${assessment.score}</span>\n                                            <span class=\"assessmentTitle\" style=\"cursor: pointer;\" onclick=\"dtps.assignment('${assessment.assignmentID}', ${course.num});\">${assessment.assignmentTitle}</span>\n                                        </p>\n                                    `;\n                            }).join(\"\")\n                        }\n                        </div>\n\n                        ${dtps.remoteConfig.allowWhatIfGrades ? /*html*/`\n                            <p class=\"addWhatIf\" outcomeID=\"${outcomeID}\" style=\"font-size: 14px; color: var(--secText); margin: 0px; margin-top: 16px; cursor: pointer;\">\n                                <i style=\"cursor: pointer; vertical-align: middle; font-size: 16px;\" class=\"material-icons down\">add_box</i>\n                                Add a What-If grade\n                            </p>\n                        ` : \"\"}\n                    </div>\n                `);\n                })\n\n                //RENDERER: RENDER WHAT-IF RESULTS\n                var whatIfResults = /*html*/`\n                    <div style=\"--classColor: ${course.color}\" class=\"card\" id=\"whatIfResults\">\n                        <div style=\"display: inline-block;\">\n                           <h5>\n                              What-If Grade\n                              <div class=\"resultLetter\">--</div>\n                           </h5>\n                           <p style=\"color: var(--lightText);\" class=\"resultPercentage\"></p>\n                           <p>This grade is hypothetical and does not represent your actual grade for this class.</p>\n                           <p onclick=\"fluid.screen();\" style=\"color: var(--secText); cursor: pointer;\">Show actual grades</p>\n                        </div>\n                    </div>\n                `;\n\n                //RESOLVE WITH HTML\n                resolve(whatIfResults + gradeCalcSummary + `<br />` + outcomeHTML.join(\"\"));\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    //Enable What-If grades\n    dtpsLMS.gradebookDidRender = function (course) {\n        //Add event listeners for every editable score in the gradebook\n        $(\".card.outcomeResults .assessments .editableScore\").toArray().forEach(ele => {\n            listenForWhatIf(ele, course);\n        });\n\n        //Add event listeners for the \"Add a What-If grade\" buttons\n        $(\"p.addWhatIf\").click(function () {\n            addWhatIf(course, $(this).attr(\"outcomeID\"));\n        })\n    }\n\n    //Adds a What-If grade listener to the provided element\n    var listenForWhatIf = function (ele, course) {\n        ele.addEventListener(\"input\", function () {\n            //Prepare what-if grades if it's not already prepared\n            initWhatIf(course);\n\n            //Get new outcome score\n            var typedScore = Number($(ele).text());\n\n            //Check if score is valid\n            if ($(ele).text() && ($(ele).text().length < 4) && !isNaN(typedScore) && (typedScore >= 1) && (typedScore <= 4)) {\n                //Valid outcome score, update color to match\n                $(ele).css(\"color\", dtechRubricColor(typedScore))\n\n                //Update score in the what-if outcomes\n                course.gradeCalculation.dtech.whatIfOutcomes[Number($(ele).attr(\"outcomeID\"))].scores[Number($(ele).attr(\"aIndex\"))].score = typedScore;\n\n                //Calculate what-if grade\n                calcWhatIf(course);\n            } else {\n                //Invalid outcome score, gray out and reset what-if letter\n                $(ele).css(\"color\", \"var(--secText)\");\n                $(\"#outcomeScore\" + Number($(ele).attr(\"outcomeID\"))).html(\"--\");\n                $(\"#outcomeScore\" + Number($(ele).attr(\"outcomeID\"))).css(\"color\", \"var(--secText)\");\n                $(\".card#whatIfResults .resultLetter\").html(\"--\");\n                $(\".card#whatIfResults .resultLetter\").css(\"color\", \"var(--secText)\");\n            }\n\n        }, false);\n    }\n\n    //Copies outcomes for modification, shows what-if UI\n    var initWhatIf = function (course) {\n        if (!$(\".card#whatIfResults\").is(\":visible\")) {\n            //Initialize what-if grades\n\n            //Copy outcomes for modification\n            course.gradeCalculation.dtech.whatIfOutcomes = JSON.parse(JSON.stringify(course.gradeCalculation.dtech.outcomes));\n\n            //Show what-if card, reset state\n            $(\".card#whatIfResults\").show();\n            $(\".card#whatIfResults .resultLetter\").html(\"--\");\n            $(\".card#whatIfResults .resultLetter\").css(\"color\", \"var(--secText)\");\n        }\n    }\n\n    //Calculates what-if grade and updates the UI based on the results\n    var calcWhatIf = function (course) {\n        if (course.gradeCalculation.dtech.whatIfOutcomes) {\n            //Class has what-if outcomes\n\n            //Run grade calculation with modified outcomes object\n            var results = dtechGradeCalc.run(course.assignments, course.gradeCalculation.dtech.formula, course.gradeCalculation.dtech.whatIfOutcomes);\n\n            //Update whatIfOutcomes object with new scores\n            course.gradeCalculation.dtech.whatIfOutcomes = results.outcomes;\n\n            //Update what-if results card with the grade calculation results\n            $(\".card#whatIfResults .resultLetter\").html(results.results.letter);\n            if (results.results.percentage) {\n                $(\".card#whatIfResults .resultPercentage\").html(\"Percentage: \" + Number(results.results.percentage).toFixed(2) + \"%\");\n            } else {\n                $(\".card#whatIfResults .resultPercentage\").html(\"\");\n            }\n            $(\".card#whatIfResults .resultLetter\").css(\"color\", \"var(--classColor)\");\n\n            //Remove dropped state\n            $(\".card.outcomeResults .dropped\").removeClass(\"dropped\");\n\n            Object.keys(course.gradeCalculation.dtech.whatIfOutcomes).forEach(outcomeID => {\n                var outcome = course.gradeCalculation.dtech.whatIfOutcomes[outcomeID];\n\n                //Update outcome average\n                if (outcome.average) {\n                    $(\"#outcomeScore\" + outcomeID).html(outcome.average.toFixed(2));\n                    $(\"#outcomeScore\" + outcomeID).css(\"color\", dtechRubricColor(outcome.average));\n                }\n\n                //Add dropped state if the score is dropped\n                if (outcome.droppedScore !== undefined) {\n                    $(\"#outcome\" + outcomeID + \"assessment\" + outcome.droppedScore).addClass(\"dropped\");\n                }\n            })\n        }\n    }\n\n    //Adds a new score to an outcome\n    var addWhatIf = function (course, outcomeID) {\n        //Prepare what-if grades if it's not already prepared\n        initWhatIf(course);\n\n        //Get new assessment index\n        var aIndex = course.gradeCalculation.dtech.whatIfOutcomes[outcomeID].scores.length;\n\n        //Add new assessment to the outcome\n        course.gradeCalculation.dtech.whatIfOutcomes[outcomeID].scores.push({ //most of the stuff in this object is optional but I'm adding it anyways\n            id: \"whatIf\" + aIndex, //if changing this, update the id for the rendered what-if grade assessment as well\n            score: \"--\",\n            value: 4,\n            whatIfGrade: true,\n            outcome: outcomeID,\n            color: \"var(--secText)\",\n            assignmentTitle: \"What-If Grade\",\n            description: \"A What-If grade\",\n            title: course.gradeCalculation.dtech.whatIfOutcomes[outcomeID].title,\n            assignmentID: null\n        });\n\n        //Add a new What-If assessment to the UI\n        $(\".card.outcomeResults.outcome-\" + outcomeID + \" .assessments\").append(/*html*/`\n            <p id=\"outcome${outcomeID}assessment${aIndex}\" style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin: 6px 0px;\">\n                <span aIndex=\"${aIndex}\" outcomeID=\"${outcomeID}\"\n                      style=\"outline: none;margin-right: 5px; font-size: 20px; vertical-align: middle; color: var(--secText);\" class=\"editableScore\" contenteditable>-</span>\n                <span class=\"assessmentTitle\">What-If Grade</span>\n            </p>\n        `);\n\n        //Reset what-if results card\n        $(\".card#whatIfResults .resultLetter\").html(\"--\");\n        $(\".card#whatIfResults .resultLetter\").css(\"color\", \"var(--secText)\");\n\n        //Add an event listener for the new score\n        listenForWhatIf($(`#outcome${outcomeID}assessment${aIndex} .editableScore`)[0], course);\n    }\n});\n"]}