{"version":3,"sources":["dtech.js"],"names":["baseURL","document","currentScript","src","split","jQuery","getScript","dtpsLMS","name","legalName","description","logo","source","useRubricGrades","institutionSpecific","genericGradebook","updateAssignments","rawAssignments","Promise","resolve","reject","updatedAssignments","map","assignment","rubric","forEach","rubricItem","scoreName","shortenDtechRubricScoreName","score","color","dtechRubricColor","updateClasses","classes","promises","course","homepage","push","fetchHomepage","id","then","matches","i","$","find","length","link","attr","toUpperCase","includes","videoMeetingURL","all","calculateGrade","assignments","formula","term","dtechResults","dtechGradeCalc","run","letter","results","dtech","rating","String","letters","params","2020s1","percentage","A","A-","B+","B","B-","C","I","lowest","average","array","sum","item","outcomesOverride","gradeVariations","outcomes","outcome","scores","title","Object","keys","values","outcomeScores","RubricItem","this","lowestScore","Math","min","droppedArray","slice","splice","indexOf","droppedAverage","scoreType","droppedScore","outcomeAvgs","getLetter","bestVariation","variation","parameters","sort","a","b","numOutcomesRequired","floor","number75","number75thresh","bestLetter","letterIndexes","lowestLetterIndex","max","gradebook","gradeCalculation","gradeCalcSummary","toFixed","dtps","gradebookExpanded","previousLetter","join","outcomeHTML","dividerAdded","keyA","keyB","undefined","outcomeID","divider","assessment","aIndex","assignmentID","num","assignmentTitle","whatIfResults","gradebookDidRender","toArray","ele","listenForWhatIf","click","addWhatIf","addEventListener","initWhatIf","typedScore","Number","text","isNaN","css","whatIfOutcomes","calcWhatIf","html","is","JSON","parse","stringify","show","removeClass","addClass","value","whatIfGrade","append"],"mappings":"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","sourcesContent":["/**\r\n * @file d.tech-specific features, CBL & grade calculation\r\n * @author jottocraft\r\n * \r\n * @copyright Copyright (c) 2018-2020 jottocraft. All rights reserved.\r\n * @license GPL-2.0-only\r\n * \r\n * JSDoc documentation for these LMS functions can be found near the end of core.js\r\n */\r\n\r\n//Get baseURL from the URL of this script\r\nvar baseURL = document.currentScript.src.split('/')[0] + '//' + document.currentScript.src.split('/')[2];\r\n\r\n//Load Canvas integration\r\njQuery.getScript(baseURL + \"/scripts/lms/canvas.js\", function () {\r\n\r\n    //Add d.tech-specific items to dtpsLMS\r\n    dtpsLMS.name = \"d.tech\";\r\n    dtpsLMS.legalName = \"Canvas LMS, Design Tech High School, and Instructure Inc\";\r\n    dtpsLMS.description = \"Power+ integration for Canvas LMS, customized for d.tech\";\r\n    dtpsLMS.logo = \"https://i.imgur.com/efGrLq3.png\";\r\n    dtpsLMS.source = \"https://github.com/jottocraft/dtps/blob/master/scripts/lms/dtech.js\";\r\n    dtpsLMS.useRubricGrades = true;\r\n    dtpsLMS.institutionSpecific = true;\r\n    dtpsLMS.genericGradebook = false;\r\n\r\n    //Update assignments\r\n    //This is for customizing rubric names and colors to match d.tech CBL\r\n    dtpsLMS.updateAssignments = function (rawAssignments) {\r\n        return new Promise((resolve, reject) => {\r\n            var updatedAssignments = rawAssignments.map(assignment => {\r\n                //Check if assignment has rubric\r\n                if (assignment.rubric) {\r\n                    //Update assignment rubric\r\n                    assignment.rubric.forEach(rubricItem => {\r\n                        rubricItem.scoreName = shortenDtechRubricScoreName(rubricItem.scoreName);\r\n\r\n                        if (rubricItem.score) {\r\n                            rubricItem.color = dtechRubricColor(rubricItem.score);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                //Return updated assignment to the Array.map function\r\n                return assignment;\r\n            });\r\n\r\n            resolve(updatedAssignments);\r\n        })\r\n    }\r\n\r\n    //Update classes\r\n    dtpsLMS.updateClasses = function (classes) {\r\n        return new Promise((resolve, reject) => {\r\n            var promises = [];\r\n\r\n            //Create a new promise for each class\r\n            classes.forEach(course => {\r\n                if (course.homepage) {\r\n                    promises.push(new Promise((resolve, reject) => {\r\n                        dtpsLMS.fetchHomepage(course.id).then(homepage => {\r\n                            //get zoom link\r\n                            var matches = 0;\r\n                            for (var i = 0; i < $(homepage).find(\"a\").length; i++) {\r\n                                var link = $($(homepage).find(\"a\")[i]);\r\n                                if (link.attr(\"alt\") && link.attr(\"alt\").toUpperCase().includes(\"ZOOM BUTTON\") && link.attr(\"href\")) {\r\n                                    //Button labelled as zoom button\r\n                                    course.videoMeetingURL = link.attr(\"href\");\r\n                                } else if (link.attr(\"href\") && link.attr(\"href\").includes(\"zoom.us\")) {\r\n                                    //Button link goes to a zoom meeting\r\n                                    course.videoMeetingURL = link.attr(\"href\");\r\n                                }\r\n                            }\r\n\r\n                            if (matches > 1) {\r\n                                //Multiple zoom links found\r\n                                course.videoMeetingURL = null;\r\n                            }\r\n\r\n                            resolve();\r\n                        })\r\n                    }))\r\n                }\r\n            })\r\n\r\n            //Run all promises\r\n            Promise.all(promises).then(() => {\r\n                resolve(classes);\r\n            })\r\n        });\r\n    }\r\n\r\n    //Run d.tech grade calculation algorithm (defined below)\r\n    dtpsLMS.calculateGrade = function (course, assignments) {\r\n        var formula = null;\r\n\r\n        //Get d.tech grade calculation formula\r\n        if (course.term == \"20-21\") {\r\n            formula = \"2020s1\";\r\n        } else if (course.id == \"630\") {\r\n            formula = \"2020s1\";\r\n        }\r\n\r\n        //If there is no grade calculation formula, don't run grade calc\r\n        if (!formula) return;\r\n\r\n        //Run d.tech grade calculation\r\n        var dtechResults = dtechGradeCalc.run(assignments, formula);\r\n\r\n        if (dtechResults) {\r\n            //Class has a grade\r\n            return {\r\n                letter: dtechResults.results.letter,\r\n                dtech: dtechResults //Return dtech results for gradebook\r\n            };\r\n        } else {\r\n            //No grade for this class\r\n            return;\r\n        }\r\n    }\r\n\r\n    //Local functions & variables, not part of the dtpsLMS specification ----------------------------------------------\r\n\r\n    //Shortens rubric name for d.tech CBL rubrics\r\n    var shortenDtechRubricScoreName = function (rating) {\r\n        if (String(rating).toUpperCase().includes(\"PIONEERING\")) return \"Pioneering\";\r\n        if (String(rating).toUpperCase().includes(\"PROFICIENT\")) return \"Proficient\";\r\n        if (String(rating).toUpperCase().includes(\"DEVELOPING\")) return \"Developing\";\r\n        if (String(rating).toUpperCase().includes(\"EMERGING\")) return \"Emerging\";\r\n        if (!String(rating).includes(\" \") && (String(rating).length <= 20)) return rating;\r\n        return \"\";\r\n    }\r\n\r\n    //Get score color from rubric percentage\r\n    var dtechRubricColor = function (score) {\r\n        if (score >= 4) return \"#4f9e59\";\r\n        if (score >= 3) return \"#a1b553\";\r\n        if (score >= 2) return \"#c26d44\";\r\n        if (score >= 1) return \"#c4474e\";\r\n        if (score >= 0) return \"#bd3139\";\r\n    }\r\n\r\n    /**\r\n     * d.tech CBL grade calculation algorithm\r\n     * \r\n     * @property {string[]} letters An array of letters that can be returned from highest -> lowest\r\n     * @property {object} params Parameters for each type of grade calculation, such as requirements for each criteria\r\n     */\r\n    var dtechGradeCalc = {\r\n        letters: [\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C\", \"I\"],\r\n        params: {\r\n            /**\r\n             * @description 2020s1 grade calculation parameters\r\n             * @property {{string, number}} percentage Percentage criteria parameters. The key of each item in the object is the letter and the value is the percentage needed to meet the criteria\r\n             * @property {{string, number}} lowest Lowest average criteria perameters. The key of each item in the object is the letter and the value is the lowest average needed to meet the criteria\r\n             */\r\n            \"2020s1\": {\r\n                percentage: {\r\n                    \"A\": 3.3,\r\n                    \"A-\": 3.3,\r\n                    \"B+\": 2.6,\r\n                    \"B\": 2.6,\r\n                    \"B-\": 2.6,\r\n                    \"C\": 2.2,\r\n                    \"I\": 0\r\n                },\r\n                lowest: {\r\n                    \"A\": 3,\r\n                    \"A-\": 2.5,\r\n                    \"B+\": 2.2,\r\n                    \"B\": 1.8,\r\n                    \"B-\": 1.5,\r\n                    \"C\": 1.5,\r\n                    \"I\": 0\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A simple average function\r\n         * \r\n         * @param {number[]} array Array of numbers to average\r\n         * @return {number} Average of the numbers in the array\r\n         */\r\n        average: function (array) {\r\n            var sum = 0;\r\n            array.forEach(item => sum += item);\r\n            return sum / array.length;\r\n        },\r\n        /**\r\n         * Runs grade calculation. Takes assignments, gets outcome averages, then calls getLetter to get the final letter.\r\n         * This function returns undefined if there is no grade.\r\n         * \r\n         * @param {Assignment[]} assignments Array of assignments to use for grade calculation\r\n         * @param {string} formula Formula to use for grade calculation. Can be one of the following: 2020s1\r\n         * @param {object} outcomesOverride An outcome object to use instead of using assignments. Used for what-if grades.\r\n         * @return {object} Grade calculation results\r\n         */\r\n        run: function (assignments, formula, outcomesOverride) {\r\n\r\n            //Array of grade variations\r\n            var gradeVariations = [];\r\n\r\n            //Outcomes object\r\n            //This doesn't have to be used by the grade calculation formula. Can be overridden for What-If grades.\r\n            var outcomes = outcomesOverride || {};\r\n\r\n            if (formula == \"2020s1\") {\r\n                //2020-21 SEMESTER 1 OUTCOME AVERAGE FORMULA (2020s1)\r\n\r\n                // ------- [2020s1] Step 1: Get rubric assessments by outcome -------\r\n\r\n                if (!outcomesOverride) {\r\n                    assignments.forEach(assignment => {\r\n                        if (assignment.rubric) {\r\n                            //Assignment has a rubric\r\n\r\n                            assignment.rubric.forEach(rubricItem => {\r\n                                if (rubricItem.score && rubricItem.outcome) {\r\n                                    //Rubric item is assessed and is linked with an outcome\r\n\r\n                                    if (!outcomes[rubricItem.outcome]) {\r\n                                        //Outcome object doesn't exist yet\r\n                                        outcomes[rubricItem.outcome] = {\r\n                                            scores: []\r\n                                        };\r\n                                    }\r\n\r\n                                    //Add RubricItem to outcome array\r\n                                    outcomes[rubricItem.outcome].scores.push(rubricItem);\r\n\r\n                                    //Save outcome name as rubric title\r\n                                    if (rubricItem.title) outcomes[rubricItem.outcome].title = rubricItem.title;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // ------- [2020s1] Step 2: Calculate outcome averages -------\r\n\r\n                //If there are no outcomes, this class doesn't have a grade\r\n                if (Object.keys(outcomes).length == 0) return;\r\n\r\n                //Loop over the values of each item in the outcomes object\r\n                Object.values(outcomes).forEach(outcome => {\r\n                    //Get array of scores for the outcome\r\n                    var outcomeScores = outcome.scores.map(RubricItem => RubricItem.score);\r\n\r\n                    //Calculate outcome average with all outcome scores\r\n                    var average = this.average(outcomeScores);\r\n\r\n                    //Get the lowest score\r\n                    var lowestScore = Math.min(...outcomeScores);\r\n\r\n                    //Drop the lowest score to see what happens\r\n                    var droppedArray = outcomeScores.slice(); //copy of outcomeScores array\r\n                    droppedArray.splice(droppedArray.indexOf(lowestScore), 1); //remove lowest score from array\r\n\r\n                    var droppedAverage = this.average(droppedArray); //calculate average from droppedArray\r\n\r\n                    //Choose the higher score\r\n                    if (droppedAverage > average) {\r\n                        //The dropped score was higher\r\n                        outcome.scoreType = \"dropped\";\r\n                        outcome.droppedScore = outcomeScores.indexOf(lowestScore);\r\n                        outcome.average = droppedAverage;\r\n                    } else {\r\n                        //Calculating with all outcome scores was the same or higher\r\n                        outcome.scoreType = \"all\";\r\n                        outcome.average = average;\r\n                        delete outcome.droppedScore;\r\n                    }\r\n                });\r\n\r\n\r\n                // ------- [2020s1] Step 3: Calculate letter grade variations -------\r\n\r\n                //All outcomes variation\r\n                var outcomeAvgs = Object.values(outcomes).map(outcome => outcome.average);\r\n                gradeVariations.push(this.getLetter(outcomeAvgs, formula, \"all\"));\r\n\r\n            }\r\n\r\n            //Get the highest grade variation from the results\r\n            var bestVariation = null;\r\n            gradeVariations.forEach(variation => {\r\n                if (!bestVariation || (this.letters.indexOf(variation.letter) < this.letters.indexOf(bestVariation.letter))) {\r\n                    //variation.letter is a higher letter than bestVariation.letter, or there is no best variation yet\r\n                    bestVariation = variation;\r\n                }\r\n            });\r\n\r\n            //Return grade calculation results\r\n            return {\r\n                results: bestVariation, //Results for the best variation\r\n                formula: formula, //Formula used to calculate this grade\r\n                outcomes: outcomes //Calculated outcome scores\r\n            };\r\n        },\r\n        /**\r\n         * Calculates a letter grade from an array of outcome averages. Called by gradeCalc.run.\r\n         * Gets the best possible letter from each criteria, then the lowest letter from that array.\r\n         * \r\n         * @param {number[]} outcomeAvgs Array of outcome averages to use for letter grade calculation\r\n         * @param {string} formula Formula to use for grade calculation. See gradeCalc.run.\r\n         * @param {string} [variation] Name of the letter grade variation (e.g. withSS, withoutSS, etc.). Only used for formulas with multiple variations.\r\n         * @return {object} Letter grade calculation results\r\n         */\r\n        getLetter: function (outcomeAvgs, formula, variation) {\r\n            //Grade calculation results object\r\n            //This includes any properties that need to be passed to the gradebook. The properties set depend on the formula.\r\n            var parameters = {};\r\n\r\n            //Sort outcome averages highest -> lowest\r\n            outcomeAvgs.sort((a, b) => b - a);\r\n\r\n            if (formula == \"2020s1\") {\r\n                //2020-21 SEMESTER 1 LETTER GRADE FORMULA (2020s1)\r\n\r\n                //Array of letters from each criteria\r\n                var letters = [];\r\n\r\n                // ------- [2020s1] Step 1: Get highest letter for Criteria 1 (percentage of outcomes criteria) -------\r\n                var percentage = .75;\r\n                var numOutcomesRequired = Math.floor(outcomeAvgs.length * percentage); //Minimum number of outcomes required\r\n\r\n                //Calculate the value 75% of outcomes >= to (number75) and the number of outcomes needed to meet criteria 1\r\n                if (outcomeAvgs.length == 1) {\r\n                    parameters.number75 = outcomeAvgs[0]; //if there is only 1 outcome, that outcome is number75\r\n                } else {\r\n                    parameters.number75 = outcomeAvgs[numOutcomesRequired - 1]; //number75 = the outcome 75% through the array (since its sorted)\r\n                }\r\n                parameters.number75thresh = numOutcomesRequired; //number75thresh = number of outcomes needed to meet the criteria\r\n\r\n                //Get the best letter\r\n                var bestLetter = null;\r\n\r\n                //Test each letter and add the highest to the letters array\r\n                for (var i = 0; i < this.letters.length; i++) {\r\n                    let letter = this.letters[i];\r\n\r\n                    if (parameters.number75 >= this.params[formula].percentage[letter]) {\r\n                        //Able to get this letter\r\n                        bestLetter = letter;\r\n\r\n                        //Stop checking for matches since all letters after this are lower\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                //Add highest criteria 1 letter to the letters array\r\n                letters.push(bestLetter);\r\n\r\n                // ------- [2020s1] Step 2: Get highest letter for Criteria 2 (lowest outcome criteria) -------\r\n\r\n                //Reset best letter\r\n                var bestLetter = null;\r\n\r\n                //Since the array is highest -> lowest, the lowest score is the last item in the array\r\n                parameters.lowestScore = outcomeAvgs[outcomeAvgs.length - 1];\r\n\r\n                //Test each letter and add the highest to the letters array\r\n                for (var i = 0; i < this.letters.length; i++) {\r\n                    let letter = this.letters[i];\r\n\r\n                    if (parameters.lowestScore >= this.params[formula].lowest[letter]) {\r\n                        //Able to get this letter\r\n                        bestLetter = letter;\r\n\r\n                        //Stop checking for matches since all letters after this are lower\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                //Add highest criteria 2 letter to the letters array\r\n                letters.push(bestLetter);\r\n            }\r\n\r\n            //Get the final letter, the lowest letter from the array\r\n            var letterIndexes = letters.map(letter => this.letters.indexOf(letter)); //Array of letter indexes in this.letters\r\n            var lowestLetterIndex = Math.max(...letterIndexes); //Lowest letter = highest index in this.letters\r\n            var letter = this.letters[lowestLetterIndex]; //Get final letter\r\n\r\n            return {\r\n                letter: letter,\r\n                parameters: parameters,\r\n                variation: variation\r\n            };\r\n        }\r\n    };\r\n\r\n    dtpsLMS.gradebook = function (course) {\r\n        return new Promise((resolve, reject) => {\r\n            if (course.gradeCalculation && course.gradeCalculation.dtech) {\r\n                //RENDERER: RENDER GRADE CALCULATION SUMMARY ------------------------------------\r\n                if (course.gradeCalculation.dtech.formula == \"2020s1\") {\r\n                    var gradeCalcSummary = /*html*/`\r\n                    <div style=\"--classColor: ${course.color}\" class=\"card\">\r\n\r\n                        <h3 class=\"gradeTitle\">\r\n                            Grades\r\n\r\n                            <div class=\"classGradeCircle\">\r\n                                <div class=\"letter\">${course.letter}</div>\r\n                            </div>\r\n\r\n                        </h3>\r\n\r\n                        <h5 class=\"gradeStat\">\r\n                            75% (rounded down) of outcome scores are ≥\r\n                            <div class=\"numFont\">${course.gradeCalculation.dtech.results.parameters.number75.toFixed(1)}</div>\r\n                        </h5>\r\n\r\n                        <h5 class=\"gradeStat\">\r\n                            No outcome scores are lower than\r\n                            <div class=\"numFont\">${course.gradeCalculation.dtech.results.parameters.lowestScore.toFixed(1)}</div>\r\n                        </h5>\r\n\r\n                        <div style=\"${dtps.gradebookExpanded ? \"\" : \"display: none;\"}\" id=\"classGradeMore\">\r\n                            <br />\r\n\r\n                            ${course.previousLetter ? /*html*/`\r\n                            <h5 class=\"smallStat\">\r\n                                Previous Grade\r\n                                <div class=\"numFont\">${course.previousLetter}</div>\r\n                            </h5>\r\n                            ` : ``}\r\n\r\n                            ${course.gradeCalculation.dtech.results.parameters.number75thresh ? /*html*/`\r\n                            <h5 class=\"smallStat\">\r\n                                75% of outcomes (rounded down) is\r\n                                <div class=\"numFont\">${course.gradeCalculation.dtech.results.parameters.number75thresh}</div>\r\n                            </h5>\r\n                            ` : ``}\r\n                        \r\n                            <br />\r\n\r\n                            <table class=\"u-full-width dtpsTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                    <th>&nbsp;&nbsp;Final Letter</th>\r\n                                    <th>75% (rounded down) of outcome scores is ≥</th>\r\n                                    <th>No outcome scores below</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    ${dtechGradeCalc.letters.map(letter => {\r\n                        return /*html*/`\r\n                                            <tr ${course.letter == letter ? `style=\"background-color: var(--classColor); color: white; font-size:20px; font-weight: bold;\"` : ``}>\r\n                                                <td>&nbsp;&nbsp;${letter}</td>\r\n                                                <td>${dtechGradeCalc.params[course.gradeCalculation.dtech.formula].percentage[letter]}</td>\r\n                                                <td>${dtechGradeCalc.params[course.gradeCalculation.dtech.formula].lowest[letter]}</td>\r\n                                            </tr>\r\n                                        `\r\n                    }).join(\"\")}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <br />\r\n\r\n                        <br />\r\n                        <a onclick=\"$('#classGradeMore').toggle(); if ($('#classGradeMore').is(':visible')) {$(this).html('Show less'); dtps.gradebookExpanded = true;} else {$(this).html('Show more'); dtps.gradebookExpanded = false;}\"\r\n                            style=\"color: var(--secText, gray); cursor: pointer; margin-right: 10px;\">${dtps.gradebookExpanded ? \"Show less\" : \"Show more\"}</a>\r\n                        <a style=\"color: var(--secText, gray);\">Using 2020-21 grade calculation</a>\r\n                    </div>\r\n                `;\r\n                } else {\r\n                    var gradeCalcSummary = \"\"; //no grade calculation for this class\r\n                }\r\n\r\n                //RENDERER: RENDER EACH OUTCOME ------------------------------------\r\n                var outcomeHTML = []; //array of outcome html to be rendered\r\n                var dividerAdded = false; //used for determining if the unassessed outcome divided has been added\r\n                Object.keys(course.gradeCalculation.dtech.outcomes).sort(function (a, b) {\r\n                    var keyA = course.gradeCalculation.dtech.outcomes[a].average,//sort by score lowest -> highest\r\n                        keyB = course.gradeCalculation.dtech.outcomes[b].average;\r\n                    if (keyA == undefined) { keyA = 999999 - course.gradeCalculation.dtech.outcomes[a].scores.length; } //put outcomes with no assessments at the bottom\r\n                    if (keyB == undefined) { keyB = 999999 - course.gradeCalculation.dtech.outcomes[b].scores.length; }\r\n                    // Compare the 2 scores\r\n                    if (keyA > keyB) return 1;\r\n                    if (keyA < keyB) return -1;\r\n                    return 0;\r\n                }).forEach((outcomeID) => {\r\n                    var outcome = course.gradeCalculation.dtech.outcomes[outcomeID];\r\n\r\n                    var divider = !dividerAdded && !outcome.scores.length; //render divider\r\n                    if (divider) dividerAdded = true; //remember that divider is already rendered\r\n\r\n                    outcomeHTML.push(/*html*/`\r\n                    ${divider ? `<h5 style=\"font-weight: bold;margin: 75px 75px 10px 75px;\">Unassesed outcomes</h5>` : \"\"}\r\n\r\n                    <div style=\"border-radius: 20px;padding: 22px; padding-bottom: 20px;\" class=\"card outcomeResults outcome-${outcomeID}\">\r\n                        <h5 style=\"max-width: calc(100% - 50px); font-size: 24px; margin: 0px; margin-bottom: 20px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; cursor: pointer;\">${outcome.title}</h5>\r\n\r\n                        ${outcome.average !== undefined ? `\r\n                            <div id=\"outcomeScore${outcomeID}\" style=\"position: absolute; top: 20px; right: 20px; font-size: 26px; font-weight: bold; display: inline-block; color: ${dtechRubricColor(outcome.average)}\">${outcome.average.toFixed(2)}</div>\r\n                        ` : ``}\r\n                        \r\n                        <div class=\"assessments\">\r\n                            ${outcome.scores.length == 0 ? `\r\n                                    <p style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin: 6px 0px; color: var(--secText);\">This outcome has not been assessed yet</p>\r\n                            ` :\r\n                            outcome.scores.map((assessment, aIndex) => {\r\n                                return /*html*/`\r\n                                        <p id=\"outcome${assessment.outcome}assessment${aIndex}\" class=\"${aIndex == outcome.droppedScore ? \"dropped\" : \"\"}\" style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin: 6px 0px;\">\r\n                                            <span aIndex=\"${aIndex}\" outcomeID=\"${outcomeID}\"\r\n                                                style=\"outline: none;margin-right: 5px; font-size: 20px; vertical-align: middle; color: ${assessment.color}\" class=\"editableScore\" contenteditable>${assessment.score}</span>\r\n                                            <span class=\"assessmentTitle\" style=\"cursor: pointer;\" onclick=\"dtps.assignment('${assessment.assignmentID}', ${course.num});\">${assessment.assignmentTitle}</span>\r\n                                        </p>\r\n                                    `;\r\n                            }).join(\"\")\r\n                        }\r\n                        </div>\r\n\r\n                        <p class=\"addWhatIf\" outcomeID=\"${outcomeID}\" style=\"font-size: 14px; color: var(--secText); margin: 0px; margin-top: 16px; cursor: pointer;\">\r\n                            <i style=\"cursor: pointer; vertical-align: middle; font-size: 16px;\" class=\"material-icons down\">add_box</i>\r\n                            Add a What-If grade\r\n                        </p>\r\n                    </div>\r\n                `);\r\n                })\r\n\r\n                //RENDERER: RENDER WHAT-IF RESULTS\r\n                var whatIfResults = /*html*/`\r\n                    <div style=\"--classColor: ${course.color}\" class=\"card\" id=\"whatIfResults\">\r\n                        <div style=\"display: inline-block;\">\r\n                           <h5>\r\n                              What-If Grade\r\n                              <div class=\"resultLetter\">--</div>\r\n                           </h5>\r\n                           <p style=\"color: var(--lightText);\" class=\"resultPercentage\"></p>\r\n                           <p>This grade is hypothetical and does not represent your actual grade for this class.</p>\r\n                           <p onclick=\"fluid.screen();\" style=\"color: var(--secText); cursor: pointer;\">Show actual grades</p>\r\n                        </div>\r\n                    </div>\r\n                `;\r\n\r\n                //RESOLVE WITH HTML\r\n                resolve(whatIfResults + gradeCalcSummary + `<br />` + outcomeHTML.join(\"\"));\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    //Enable What-If grades\r\n    dtpsLMS.gradebookDidRender = function (course) {\r\n        //Add event listeners for every editable score in the gradebook\r\n        $(\".card.outcomeResults .assessments .editableScore\").toArray().forEach(ele => {\r\n            listenForWhatIf(ele, course);\r\n        });\r\n\r\n        //Add event listeners for the \"Add a What-If grade\" buttons\r\n        $(\"p.addWhatIf\").click(function () {\r\n            addWhatIf(course, $(this).attr(\"outcomeID\"));\r\n        })\r\n    }\r\n\r\n    //Adds a What-If grade listener to the provided element\r\n    var listenForWhatIf = function (ele, course) {\r\n        ele.addEventListener(\"input\", function () {\r\n            //Prepare what-if grades if it's not already prepared\r\n            initWhatIf(course);\r\n\r\n            //Get new outcome score\r\n            var typedScore = Number($(ele).text());\r\n\r\n            //Check if score is valid\r\n            if ($(ele).text() && ($(ele).text().length < 4) && !isNaN(typedScore) && (typedScore >= 1) && (typedScore <= 4)) {\r\n                //Valid outcome score, update color to match\r\n                $(ele).css(\"color\", dtechRubricColor(typedScore))\r\n\r\n                //Update score in the what-if outcomes\r\n                course.gradeCalculation.dtech.whatIfOutcomes[Number($(ele).attr(\"outcomeID\"))].scores[Number($(ele).attr(\"aIndex\"))].score = typedScore;\r\n\r\n                //Calculate what-if grade\r\n                calcWhatIf(course);\r\n            } else {\r\n                //Invalid outcome score, gray out and reset what-if letter\r\n                $(ele).css(\"color\", \"var(--secText)\");\r\n                $(\"#outcomeScore\" + Number($(ele).attr(\"outcomeID\"))).html(\"--\");\r\n                $(\"#outcomeScore\" + Number($(ele).attr(\"outcomeID\"))).css(\"color\", \"var(--secText)\");\r\n                $(\".card#whatIfResults .resultLetter\").html(\"--\");\r\n                $(\".card#whatIfResults .resultLetter\").css(\"color\", \"var(--secText)\");\r\n            }\r\n\r\n        }, false);\r\n    }\r\n\r\n    //Copies outcomes for modification, shows what-if UI\r\n    var initWhatIf = function (course) {\r\n        if (!$(\".card#whatIfResults\").is(\":visible\")) {\r\n            //Initialize what-if grades\r\n\r\n            //Copy outcomes for modification\r\n            course.gradeCalculation.dtech.whatIfOutcomes = JSON.parse(JSON.stringify(course.gradeCalculation.dtech.outcomes));\r\n\r\n            //Show what-if card, reset state\r\n            $(\".card#whatIfResults\").show();\r\n            $(\".card#whatIfResults .resultLetter\").html(\"--\");\r\n            $(\".card#whatIfResults .resultLetter\").css(\"color\", \"var(--secText)\");\r\n        }\r\n    }\r\n\r\n    //Calculates what-if grade and updates the UI based on the results\r\n    var calcWhatIf = function (course) {\r\n        if (course.gradeCalculation.dtech.whatIfOutcomes) {\r\n            //Class has what-if outcomes\r\n\r\n            //Run grade calculation with modified outcomes object\r\n            var results = dtechGradeCalc.run(course.assignments, course.gradeCalculation.dtech.formula, course.gradeCalculation.dtech.whatIfOutcomes);\r\n\r\n            //Update whatIfOutcomes object with new scores\r\n            course.gradeCalculation.dtech.whatIfOutcomes = results.outcomes;\r\n\r\n            //Update what-if results card with the grade calculation results\r\n            $(\".card#whatIfResults .resultLetter\").html(results.results.letter);\r\n            if (results.results.percentage) {\r\n                $(\".card#whatIfResults .resultPercentage\").html(\"Percentage: \" + Number(results.results.percentage).toFixed(2) + \"%\");\r\n            } else {\r\n                $(\".card#whatIfResults .resultPercentage\").html(\"\");\r\n            }\r\n            $(\".card#whatIfResults .resultLetter\").css(\"color\", \"var(--classColor)\");\r\n\r\n            //Remove dropped state\r\n            $(\".card.outcomeResults .dropped\").removeClass(\"dropped\");\r\n\r\n            Object.keys(course.gradeCalculation.dtech.whatIfOutcomes).forEach(outcomeID => {\r\n                var outcome = course.gradeCalculation.dtech.whatIfOutcomes[outcomeID];\r\n\r\n                //Update outcome average\r\n                if (outcome.average) {\r\n                    $(\"#outcomeScore\" + outcomeID).html(outcome.average.toFixed(2));\r\n                    $(\"#outcomeScore\" + outcomeID).css(\"color\", dtechRubricColor(outcome.average));\r\n                }\r\n\r\n                //Add dropped state if the score is dropped\r\n                if (outcome.droppedScore !== undefined) {\r\n                    $(\"#outcome\" + outcomeID + \"assessment\" + outcome.droppedScore).addClass(\"dropped\");\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    //Adds a new score to an outcome\r\n    var addWhatIf = function (course, outcomeID) {\r\n        //Prepare what-if grades if it's not already prepared\r\n        initWhatIf(course);\r\n\r\n        //Get new assessment index\r\n        var aIndex = course.gradeCalculation.dtech.whatIfOutcomes[outcomeID].scores.length;\r\n\r\n        //Add new assessment to the outcome\r\n        course.gradeCalculation.dtech.whatIfOutcomes[outcomeID].scores.push({ //most of the stuff in this object is optional but I'm adding it anyways\r\n            id: \"whatIf\" + aIndex, //if changing this, update the id for the rendered what-if grade assessment as well\r\n            score: \"--\",\r\n            value: 4,\r\n            whatIfGrade: true,\r\n            outcome: outcomeID,\r\n            color: \"var(--secText)\",\r\n            assignmentTitle: \"What-If Grade\",\r\n            description: \"A What-If grade\",\r\n            title: course.gradeCalculation.dtech.whatIfOutcomes[outcomeID].title,\r\n            assignmentID: null\r\n        });\r\n\r\n        //Add a new What-If assessment to the UI\r\n        $(\".card.outcomeResults.outcome-\" + outcomeID + \" .assessments\").append(/*html*/`\r\n            <p id=\"outcome${outcomeID}assessment${aIndex}\" style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin: 6px 0px;\">\r\n                <span aIndex=\"${aIndex}\" outcomeID=\"${outcomeID}\"\r\n                      style=\"outline: none;margin-right: 5px; font-size: 20px; vertical-align: middle; color: var(--secText);\" class=\"editableScore\" contenteditable>-</span>\r\n                <span class=\"assessmentTitle\">What-If Grade</span>\r\n            </p>\r\n        `);\r\n\r\n        //Reset what-if results card\r\n        $(\".card#whatIfResults .resultLetter\").html(\"--\");\r\n        $(\".card#whatIfResults .resultLetter\").css(\"color\", \"var(--secText)\");\r\n\r\n        //Add an event listener for the new score\r\n        listenForWhatIf($(`#outcome${outcomeID}assessment${aIndex} .editableScore`)[0], course);\r\n    }\r\n});"]}