{"version":3,"sources":["scripts/lms/canvas.js"],"names":["dtpsLMS","name","shortName","legalName","description","url","logo","source","genericGradebook","commonHeaders","Accept","fetchUser","Promise","resolve","reject","jQuery","ajax","type","headers","success","userData","childrenData","user","id","photoURL","avatar_url","length","children","map","child","error","err","fetchClasses","colorData","dashboardData","dtps","lmsID","courseData","courses","forEach","course","index","dtpsCourse","course_code","subject","window","localStorage","split","syllabus","syllabus_body","homepage","default_view","public_description","numStudents","total_students","term","color","custom_colors","grade","enrollments","computed_current_score","letter","computed_current_grade","image","image_download_url","newDiscussionThreadURL","pages","tabs","tab","includes","modules","discussions","endDate","end_at","teachers","teacher","display_name","avatar_image_url","push","sort","a","b","keyA","dashboard_positions","keyB","fetchAssignments","classID","submissionData","assignmentData","assignments","assignment","dtpsAssignment","title","body","dueAt","due_at","html_url","locked","locked_for_user","publishedAt","created_at","value","points_possible","temporaryScoreNames","rubric","canvasRubric","long_description","points","outcome","outcome_id","assignmentTitle","assignmentID","ratings","canvasRating","submission","assignment_id","rubric_assessment","score","scoreName","turnedIn","submission_type","late","missing","gradedAt","graded_at","isNaN","submission_comments","feedback","comment","author","fetchModules","modulesData","progressionData","collapsedModules","prog","context_module_progression","context_module_id","collapsed","dtpsModules","module","moduleItems","items","item","toUpperCase","content_id","indent","completed","completion_requirement","page_url","external_url","collapseModule","modID","Content-Type","X-CSRF-Token","decodeURIComponent","document","cookie","data","fetchAnnouncements","dtpsAnnouncements","announcement","postedAt","message","fetchUsers","sections","section","students","users","student","short_name","dtechMatch","match","dtech","fetchHomepage","fetchDiscussionThreads","dtpsDiscussionThreads","thread","fetchDiscussionPosts","threadID","threadData","parseResponse","responsesData","baseURL","dtpsDiscussionPosts","initialPost","replyURL","view","people","participants","participant","post","deleted","replies","addReplies","arr","depth","reply","dtpsReply","user_id","dtpsPost","posts","group_topic_children","groupData","myGroups","group","groupID","groupDiscussionID","group_id","fetchPages","dtpsPages","page","fetchPageContent","pageID","dtpsPage","updatedAt","updated_at","content","last_edited_by","currentScript","src","getScript"],"mappings":"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","sourceRoot":"/","sourcesContent":["/**\n * @file DTPS Canvas LMS Integration\n * @author jottocraft\n * \n * @copyright Copyright (c) 2018-2020 jottocraft. All rights reserved.\n * @license GPL-2.0-only\n * \n * JSDoc documentation for these LMS functions can be found near the end of core.js\n */\n\n//DTPS LMS configuration for Canvas\nvar dtpsLMS = {\n    name: \"Canvas LMS\",\n    shortName: \"Canvas\",\n    legalName: \"Canvas LMS and Instructure Inc.\",\n    description: \"Power+ integration for Canvas LMS\",\n    url: \"https://www.instructure.com/canvas/\",\n    logo: \"https://i.imgur.com/rGjNVoc.png\",\n    source: \"https://github.com/jottocraft/dtps/blob/main/scripts/lms/canvas.js\",\n    genericGradebook: true\n};\n\n\n/**\n * Common headers used for Canvas web requests.\n * This variable is specific to Canvas LMS integration in DTPS and is not required for other LMS integrations.\n */\ndtpsLMS.commonHeaders = { Accept: \"application/json+canvas-string-ids, application/json\" };\n\n//Fetch userdata from Canvas\ndtpsLMS.fetchUser = function () {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/users/self\",\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (userData) {\n                jQuery.ajax({\n                    url: \"/api/v1/users/self/observees?include[]=avatar_url\",\n                    type: \"GET\",\n                    headers: dtpsLMS.commonHeaders,\n                    success: function (childrenData) {\n                        var user = {\n                            name: userData.name,\n                            id: userData.id,\n                            photoURL: userData.avatar_url\n                        };\n\n                        if (childrenData && childrenData.length) {\n                            //Parent account\n                            user.children = childrenData.map(child => {\n                                return {\n                                    name: child.name,\n                                    id: child.id,\n                                    photoURL: child.avatar_url\n                                }\n                            });\n                        }\n\n                        resolve(user);\n                    },\n                    error: function (err) {\n                        reject(err);\n                    }\n                });\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    })\n}\n\n//Fetch class data from Canvas\ndtpsLMS.fetchClasses = function () {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/users/self/colors\",\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (colorData) {\n                jQuery.ajax({\n                    url: \"/api/v1/users/self/dashboard_positions\",\n                    type: \"GET\",\n                    headers: dtpsLMS.commonHeaders,\n                    success: function (dashboardData) {\n                        jQuery.ajax({\n                            url: \"/api/v1/users/\" + dtps.user.lmsID + \"/courses?per_page=100&enrollment_state=active&include[]=term&include[]=total_scores&include[]=public_description&include[]=total_students&include[]=account&include[]=teachers&include[]=course_image&include[]=syllabus_body&include[]=tabs\",\n                            type: \"GET\",\n                            headers: dtpsLMS.commonHeaders,\n                            success: function (courseData) {\n                                //All fetches have been completed successfully\n\n                                var courses = [];\n\n                                //Add courses from canvas to courses array as a DTPS course object\n                                courseData.forEach((course, index) => {\n                                    var dtpsCourse = {\n                                        name: course.course_code,\n                                        id: course.id,\n                                        subject: window.localStorage[\"pref-fullNames\"] == \"true\" ? course.course_code : course.course_code.split(\" - \")[0],\n                                        syllabus: course.syllabus_body,\n                                        homepage: course.default_view == \"wiki\",\n                                        description: course.public_description,\n                                        numStudents: course.total_students,\n                                        term: course.course_code.split(\" - \")[1],\n                                        color: colorData.custom_colors[\"course_\" + course.id],\n                                        grade: course.enrollments[0].computed_current_score,\n                                        letter: course.enrollments[0].computed_current_grade,\n                                        image: course.image_download_url,\n                                        newDiscussionThreadURL: '/courses/' + course.id + '/discussion_topics/new',\n                                        pages: course.tabs.map(tab => tab.id).includes(\"pages\"),\n                                        modules: course.tabs.map(tab => tab.id).includes(\"modules\"),\n                                        discussions: course.tabs.map(tab => tab.id).includes(\"discussions\"),\n                                        endDate: course.end_at\n                                    };\n\n                                    if (course.teachers[0]) {\n                                        dtpsCourse.teacher = {\n                                            name: course.teachers[0] && course.teachers[0].display_name,\n                                            id: course.teachers[0] && course.teachers[0].id,\n                                            photoURL: course.teachers[0] && course.teachers[0].avatar_image_url\n                                        };\n                                    }\n\n                                    courses.push(dtpsCourse);\n                                });\n\n                                //Sort courses array\n                                courses.sort(function (a, b) {\n                                    var keyA = dashboardData.dashboard_positions[\"course_\" + a.id],\n                                        keyB = dashboardData.dashboard_positions[\"course_\" + b.id];\n\n                                    if (keyA < keyB) return -1;\n                                    if (keyA > keyB) return 1;\n                                    return 0;\n                                });\n\n                                resolve(courses);\n                            },\n                            error: function (err) {\n                                reject(err);\n                            }\n                        });\n                    },\n                    error: function (err) {\n                        reject(err);\n                    }\n                });\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    })\n}\n\n//Fetches assignment data from Canvas\ndtpsLMS.fetchAssignments = function (classID) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/courses/\" + classID + \"/students/submissions?include[]=rubric_assessment&include[]=submission_comments&per_page=100&student_ids[]=\" + dtps.user.lmsID,\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (submissionData) {\n                jQuery.ajax({\n                    url: \"/api/v1/users/\" + dtps.user.lmsID + \"/courses/\" + classID + \"/assignments?per_page=100&include[]=submission\",\n                    type: \"GET\",\n                    headers: dtpsLMS.commonHeaders,\n                    success: function (assignmentData) {\n                        //All fetches have been completed successfully\n                        var assignments = [];\n\n                        //Add assignments from canvas to assignments array as a DTPS assignment object\n                        assignmentData.forEach((assignment, index) => {\n                            //Define dtpsAssignment\n                            var dtpsAssignment = {\n                                title: assignment.name,\n                                body: assignment.description,\n                                id: assignment.id,\n                                dueAt: assignment.due_at,\n                                url: assignment.html_url,\n                                locked: assignment.locked_for_user,\n                                publishedAt: assignment.created_at,\n                                value: assignment.points_possible\n                            };\n\n                            //Save score names to an array temporarily\n                            //This is because the scoreNames can only be found in the rubric data from Canvas\n                            //And we don't know which name to use until the outcome score data is processed\n                            var temporaryScoreNames = {};\n\n                            //Add rubric data from Canvas to the dtpsAssignment\n                            if (assignment.rubric) {\n                                assignment.rubric.forEach(canvasRubric => {\n                                    //Add rubric array to assignment if it doesn't exist yet\n                                    if (!dtpsAssignment.rubric) dtpsAssignment.rubric = [];\n\n                                    dtpsAssignment.rubric.push({\n                                        title: canvasRubric.description,\n                                        description: canvasRubric.long_description,\n                                        id: canvasRubric.id,\n                                        value: canvasRubric.points,\n                                        outcome: canvasRubric.outcome_id,\n                                        assignmentTitle: assignment.name,\n                                        assignmentID: assignment.id\n                                    });\n\n                                    temporaryScoreNames[canvasRubric.id] = {};\n                                    canvasRubric.ratings.forEach(canvasRating => {\n                                        temporaryScoreNames[canvasRubric.id][canvasRating.points] = canvasRating.description;\n                                    });\n                                })\n                            }\n\n                            //Add submission data from Canvas to the dtpsAssignment\n                            submissionData.forEach(submission => {\n                                if (submission.assignment_id == assignment.id) {\n                                    //Add scores from this submission to the rubric\n                                    if (submission.rubric_assessment) {\n                                        dtpsAssignment.rubric.forEach(rubric => {\n                                            if (submission.rubric_assessment[rubric.id]) {\n                                                rubric.score = submission.rubric_assessment[rubric.id].points;\n                                                rubric.scoreName = temporaryScoreNames[rubric.id][rubric.score];\n                                            }\n                                        });\n                                    }\n\n                                    //Check for turned in, late, missing, gradedAt, and feedback\n                                    dtpsAssignment.turnedIn = submission.submission_type !== null;\n                                    dtpsAssignment.late = submission.late;\n                                    dtpsAssignment.missing = submission.missing;\n                                    dtpsAssignment.gradedAt = submission.graded_at;\n                                    dtpsAssignment.grade = submission.score;\n                                    if (isNaN(submission.grade)) dtpsAssignment.letter = submission.grade; //letter cannot be a number\n\n                                    //Check for submission comments\n                                    if (submission.submission_comments) {\n                                        //Add feedback array to assignment\n                                        dtpsAssignment.feedback = [];\n\n                                        //Add each comment to feedback array\n                                        submission.submission_comments.forEach(comment => {\n                                            var feedback = {\n                                                comment: comment.comment\n                                            };\n\n                                            //Add author to feedback if found\n                                            if (comment.author) {\n                                                feedback.author = {\n                                                    name: comment.author.display_name,\n                                                    id: comment.author.id,\n                                                    photoURL: comment.author.avatar_image_url\n                                                }\n                                            }\n\n                                            dtpsAssignment.feedback.push(feedback)\n                                        });\n                                    }\n                                }\n                            });\n\n                            //Add assignment to results array\n                            assignments.push(dtpsAssignment);\n                        });\n\n                        resolve(assignments);\n                    },\n                    error: function (err) {\n                        reject(err);\n                    }\n                });\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    })\n}\n\n//Fetches modules data from Canvas\ndtpsLMS.fetchModules = function (classID) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/courses/\" + classID + \"/modules?include[]=items&include[]=content_details\",\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (modulesData) {\n                jQuery.ajax({\n                    url: \"/courses/\" + classID + \"/modules/progressions\",\n                    type: \"GET\",\n                    headers: dtpsLMS.commonHeaders,\n                    success: function (progressionData) {\n                        //Get collapsed modules from progression data\n                        var collapsedModules = {};\n\n                        //Loop over progression data\n                        progressionData.forEach(prog => {\n                            //Store collapsed state\n                            collapsedModules[prog.context_module_progression.context_module_id] = prog.context_module_progression.collapsed;\n                        })\n\n                        //Parse data from Canvas\n                        var dtpsModules = modulesData.map(module => {\n                            //Create module items array\n                            var moduleItems = [];\n\n                            //Add module items to array\n                            module.items.forEach(item => {\n                                if (item.type.toUpperCase() == \"ASSIGNMENT\") {\n                                    moduleItems.push({\n                                        type: \"assignment\",\n                                        title: item.title,\n                                        id: item.content_id,\n                                        indent: item.indent,\n                                        completed: item.completion_requirement && item.completion_requirement.completed\n                                    })\n                                } else if (item.type.toUpperCase() == \"PAGE\") {\n                                    moduleItems.push({\n                                        type: \"page\",\n                                        title: item.title,\n                                        id: item.page_url,\n                                        indent: item.indent,\n                                        url: item.html_url,\n                                        completed: item.completion_requirement && item.completion_requirement.completed\n                                    })\n                                } else if (item.type.toUpperCase() == \"DISCUSSION\") {\n                                    moduleItems.push({\n                                        type: \"discussion\",\n                                        title: item.title,\n                                        id: item.content_id,\n                                        indent: item.indent,\n                                        url: item.html_url,\n                                        completed: item.completion_requirement && item.completion_requirement.completed\n                                    })\n                                } else if (item.type.toUpperCase() == \"EXTERNALURL\") {\n                                    moduleItems.push({\n                                        type: \"url\",\n                                        title: item.title,\n                                        url: item.external_url,\n                                        indent: item.indent,\n                                        completed: item.completion_requirement && item.completion_requirement.completed\n                                    })\n                                } else if (item.type.toUpperCase() == \"EXTERNALTOOL\") {\n                                    moduleItems.push({\n                                        type: \"embed\",\n                                        title: item.title,\n                                        url: item.html_url,\n                                        indent: item.indent,\n                                        completed: item.completion_requirement && item.completion_requirement.completed\n                                    });\n                                } else if (item.type.toUpperCase() == \"SUBHEADER\") {\n                                    moduleItems.push({\n                                        type: \"header\",\n                                        title: item.title,\n                                        indent: item.indent,\n                                        completed: item.completion_requirement && item.completion_requirement.completed\n                                    })\n                                }\n                            })\n\n                            return {\n                                id: module.id,\n                                title: module.name,\n                                collapsed: collapsedModules[module.id] || false,\n                                items: moduleItems\n                            }\n                        })\n\n                        //Resolve with module data\n                        resolve(dtpsModules);\n                    },\n                    error: function (err) {\n                        reject(err);\n                    }\n                });\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    });\n}\n\n//Collapses a module in Canvas\ndtpsLMS.collapseModule = function (classID, modID, collapsed) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/courses/\" + classID + \"/modules/\" + modID + \"/collapse\",\n            type: \"POST\",\n            headers: {\n                \"Accept\": \"application/json, text/javascript, application/json+canvas-string-ids, */*; q=0.01\",\n                \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n                \"X-CSRF-Token\": decodeURIComponent(document.cookie).split(\"_csrf_token=\")[1].split(\";\")[0]\n            },\n            body: \"_method=POST&collapse=\" + (collapsed ? 1 : 0) + \"&authenticity_token=\" + decodeURIComponent(document.cookie).split(\"_csrf_token=\")[1].split(\";\")[0],\n            success: function (data) {\n                resolve();\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    });\n}\n\n//Fetches announcement data from Canvas\ndtpsLMS.fetchAnnouncements = function (classID) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/announcements?context_codes[]=course_\" + classID,\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (data) {\n                var dtpsAnnouncements = data.map(function (announcement) {\n                    return {\n                        title: announcement.title,\n                        postedAt: announcement.created_at,\n                        body: announcement.message\n                    }\n                });\n\n                resolve(dtpsAnnouncements);\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    });\n}\n\n//Fetches user data from Canvas\ndtpsLMS.fetchUsers = function (classID) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/courses/\" + classID + \"/sections?include[]=avatar_url&include[]=students\",\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (data) {\n                var sections = [];\n                data.forEach(section => {\n                    if (!section.students) return;\n\n                    var users = [];\n                    section.students.forEach(student => {\n                        users.push({\n                            name: student.short_name,\n                            id: student.id,\n                            photoURL: student.avatar_url,\n                            url: \"/courses/\" + classID + \"/users/\" + student.id\n                        });\n                    });\n                    var dtechMatch = section.name.match(/[0-9](?=\\(A)/);\n                    if (dtpsLMS.dtech && dtechMatch) {\n                        section.name = \"Period \" + dtechMatch[0];\n                    }\n                    sections.push({\n                        title: section.name,\n                        id: section.id,\n                        users\n                    });\n                });\n                resolve(sections);\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    });\n}\n\n//Fetches homepage data from Canvas\ndtpsLMS.fetchHomepage = function (classID) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/courses/\" + classID + \"/front_page\",\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (data) {\n                resolve(data.body);\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    });\n}\n\n//Fetches discussion thread data from Canvas\ndtpsLMS.fetchDiscussionThreads = function (classID) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/courses/\" + classID + \"/discussion_topics\",\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (data) {\n                var dtpsDiscussionThreads = data.map(function (thread) {\n                    return {\n                        title: thread.title,\n                        id: thread.id,\n                        locked: thread.locked_for_user\n                    }\n                });\n\n                resolve(dtpsDiscussionThreads);\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    })\n}\n\n//Fetches discussion thread posts from Canvas\ndtpsLMS.fetchDiscussionPosts = function (classID, threadID) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/courses/\" + classID + \"/discussion_topics/\" + threadID + \"/\",\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (threadData) {\n                //Check if this discussion is a group discussion\n                if (threadData.group_topic_children && threadData.group_topic_children.length) {\n                    //This discussion is probably a group discussion, check groups, then fetch posts\n                    jQuery.ajax({\n                        url: \"/api/v1/courses/\" + classID + \"/groups?only_own_groups=true\",\n                        type: \"GET\",\n                        headers: dtpsLMS.commonHeaders,\n                        success: function (groupData) {\n                            //Get array of group IDs\n                            var myGroups = groupData.map(group => group.id);\n\n                            //Set default group and discussion ID variables\n                            var groupID = null;\n                            var groupDiscussionID = null;\n\n                            //Check every group this discussion has and see if one of them is in myGroups, set that group as the group to fetch posts for\n                            threadData.group_topic_children.forEach(group => {\n                                if (myGroups.includes(group.group_id)) {\n                                    groupID = group.group_id;\n                                    groupDiscussionID = group.id;\n                                }\n                            });\n\n                            if (!groupID || !groupDiscussionID) {\n                                //Couldn't find a group match, fetch class discussion\n                                jQuery.ajax({\n                                    url: \"/api/v1/courses/\" + classID + \"/discussion_topics/\" + threadID + \"/view\",\n                                    type: \"GET\",\n                                    headers: dtpsLMS.commonHeaders,\n                                    success: function (responsesData) {\n                                        parseResponse(responsesData, \"/courses/\" + classID + \"/discussion_topics/\" + threadID);\n                                    },\n                                    error: function (err) {\n                                        reject(err);\n                                    }\n                                });\n                            } else {\n                                //Group match found, fetch group discussion\n                                jQuery.ajax({\n                                    url: \"/api/v1/groups/\" + groupID + \"/discussion_topics/\" + groupDiscussionID + \"/view\",\n                                    type: \"GET\",\n                                    headers: dtpsLMS.commonHeaders,\n                                    success: function (responsesData) {\n                                        parseResponse(responsesData, \"/groups/\" + groupID + \"/discussion_topics/\" + groupDiscussionID);\n                                    },\n                                    error: function (err) {\n                                        reject(err);\n                                    }\n                                });\n                            }\n                        },\n                        error: function (err) {\n                            reject(err);\n                        }\n                    });\n                } else {\n                    //Not a group discussion, directly fetch posts\n                    jQuery.ajax({\n                        url: \"/api/v1/courses/\" + classID + \"/discussion_topics/\" + threadID + \"/view\",\n                        type: \"GET\",\n                        headers: dtpsLMS.commonHeaders,\n                        success: function (responsesData) {\n                            parseResponse(responsesData, \"/courses/\" + classID + \"/discussion_topics/\" + threadID);\n                        },\n                        error: function (err) {\n                            reject(err);\n                        }\n                    });\n                }\n\n\n                //This function handles the response from Canavs and returns the data to DTPS\n                //BaseURL is the baseURL of the thread, since this might be different for group discussions\n                function parseResponse(responsesData, baseURL) {\n                    //Define discussions post array\n                    var dtpsDiscussionPosts = [];\n\n                    //Define the initial post\n                    var initialPost = {\n                        id: threadID,\n                        body: threadData.message,\n                        postedAt: threadData.created_at,\n                        replyURL: baseURL\n                    };\n\n                    //Check for author\n                    if (threadData.author && threadData.author.display_name) {\n                        initialPost.author = {\n                            name: threadData.author.display_name,\n                            id: threadData.author.id,\n                            photoURL: threadData.author.avatar_image_url\n                        };\n                    }\n\n                    //Add initial post to array\n                    dtpsDiscussionPosts.push(initialPost);\n\n                    if (responsesData.view) {\n                        //Get thread author information\n                        var people = {};\n                        if (responsesData.participants) {\n                            responsesData.participants.forEach(participant => {\n                                people[participant.id] = participant;\n                            })\n                        }\n\n                        //If there are posts found from the second request, add those as well\n                        responsesData.view.forEach(function (post) {\n                            if (!post.deleted) {\n                                var replies = [];\n\n                                //Get replies for this post\n                                if (post.replies) {\n                                    //If this post has replies, flatten them into a single array\n                                    function addReplies(arr, depth) {\n                                        //Loop over replies to add\n                                        arr.forEach(reply => {\n                                            //Add this reply to the array\n                                            if (!reply.deleted) {\n                                                //Define reply object\n                                                var dtpsReply = {\n                                                    id: reply.id,\n                                                    body: reply.message,\n                                                    postedAt: reply.created_at,\n                                                    replyURL: baseURL + \"/entry-\" + reply.id,\n                                                    depth: depth\n                                                };\n\n                                                //Check for reply author\n                                                if (people[reply.user_id]) {\n                                                    dtpsReply.author = {\n                                                        name: people[reply.user_id].display_name,\n                                                        id: reply.user_id,\n                                                        photoURL: people[reply.user_id].avatar_image_url\n                                                    }\n                                                }\n\n                                                //Add reply to flattened array\n                                                replies.push(dtpsReply);\n                                            }\n\n                                            //Add nested replies to array\n                                            if (reply.replies) addReplies(reply.replies, depth + 1);\n                                        });\n                                    }\n\n                                    addReplies(post.replies, 0);\n                                }\n\n                                //Define post object\n                                var dtpsPost = {\n                                    id: post.id,\n                                    body: post.message,\n                                    postedAt: post.created_at,\n                                    replies: replies,\n                                    replyURL: baseURL + \"/entry-\" + post.id\n                                };\n\n                                //Check for post author\n                                if (people[post.user_id]) {\n                                    dtpsPost.author = {\n                                        name: people[post.user_id].display_name,\n                                        id: post.user_id,\n                                        photoURL: people[post.user_id].avatar_image_url\n                                    }\n                                }\n\n                                //Add post to array\n                                dtpsDiscussionPosts.push(dtpsPost);\n                            }\n                        });\n                    }\n\n                    resolve({\n                        title: threadData.title,\n                        id: threadData.id,\n                        locked: threadData.locked_for_user,\n                        posts: dtpsDiscussionPosts\n                    });\n                }\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    })\n}\n\n//Fetches pages list data from Canvas\ndtpsLMS.fetchPages = function (classID) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/courses/\" + classID + \"/pages?per_page=100\",\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (data) {\n                var dtpsPages = data.map(function (page) {\n                    var dtpsPage = {\n                        title: page.title,\n                        id: page.url\n                    };\n\n                    return dtpsPage;\n                });\n\n                resolve(dtpsPages);\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    })\n}\n\n//Fetches pages list data from Canvas\ndtpsLMS.fetchPageContent = function (classID, pageID) {\n    return new Promise(function (resolve, reject) {\n        jQuery.ajax({\n            url: \"/api/v1/courses/\" + classID + \"/pages/\" + pageID,\n            type: \"GET\",\n            headers: dtpsLMS.commonHeaders,\n            success: function (data) {\n                //Resolve with full page object\n                var dtpsPage = {\n                    title: data.title,\n                    id: data.url,\n                    updatedAt: data.updated_at,\n                    content: data.body\n                };\n\n                //Check for page author\n                if (data.last_edited_by) {\n                    dtpsPage.author = {\n                        name: data.last_edited_by.display_name,\n                        id: data.last_edited_by.id,\n                        photoURL: data.last_edited_by.avatar_image_url\n                    }\n                }\n\n                resolve(dtpsPage);\n            },\n            error: function (err) {\n                reject(err);\n            }\n        });\n    })\n}\n\n//Get baseURL from the URL of this script\nvar baseURL = document.currentScript.src.split(\"/scripts/lms/canvas.js\")[0];\n\n//Load Power+\njQuery.getScript(baseURL + \"/scripts/core.js\");"]}