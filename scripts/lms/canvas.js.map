{"version":3,"sources":["canvas.js"],"names":["dtpsLMS","name","shortName","legalName","description","url","logo","source","genericGradebook","commonHeaders","Accept","fetchUser","Promise","resolve","reject","jQuery","ajax","type","headers","success","userData","childrenData","user","id","photoURL","avatar_url","length","children","map","child","error","err","fetchClasses","colorData","dashboardData","dtps","lmsID","courseData","courses","forEach","course","index","dtpsCourse","course_code","subject","window","localStorage","split","syllabus","syllabus_body","homepage","default_view","public_description","numStudents","total_students","term","color","custom_colors","grade","enrollments","computed_current_score","letter","computed_current_grade","image","image_download_url","newDiscussionThreadURL","pages","tabs","tab","includes","modules","discussions","teachers","teacher","display_name","avatar_image_url","push","sort","a","b","keyA","dashboard_positions","keyB","fetchAssignments","classID","submissionData","assignmentData","assignments","assignment","dtpsAssignment","title","body","dueAt","due_at","html_url","locked","locked_for_user","publishedAt","created_at","value","points_possible","temporaryScoreNames","rubric","canvasRubric","long_description","points","outcome","outcome_id","assignmentTitle","assignmentID","ratings","canvasRating","submission","assignment_id","rubric_assessment","score","scoreName","turnedIn","submission_type","late","missing","gradedAt","graded_at","isNaN","submission_comments","feedback","comment","author","fetchModules","modulesData","progressionData","collapsedModules","prog","context_module_progression","context_module_id","collapsed","dtpsModules","module","moduleItems","items","item","toUpperCase","content_id","indent","page_url","external_url","collapseModule","modID","Content-Type","X-CSRF-Token","decodeURIComponent","document","cookie","data","fetchAnnouncements","dtpsAnnouncements","announcement","postedAt","message","fetchHomepage","fetchDiscussionThreads","dtpsDiscussionThreads","thread","requireInitialPost","require_initial_post","fetchDiscussionPosts","threadID","threadData","group_topic_children","groupData","myGroups","group","groupID","groupDiscussionID","group_id","responsesData","parseResponse","baseURL","dtpsDiscussionPosts","initialPost","replyURL","view","people","participants","participant","post","deleted","replies","addReplies","arr","depth","reply","dtpsReply","user_id","dtpsPost","fetchPages","dtpsPages","page","dtpsPage","updatedAt","updated_at","last_edited_by","fetchPageContent","pageID","currentScript","src","getScript"],"mappings":"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","sourcesContent":["/**\r\n * @file DTPS Canvas LMS Integration\r\n * @author jottocraft\r\n * \r\n * @copyright Copyright (c) 2018-2020 jottocraft. All rights reserved.\r\n * @license GPL-2.0-only\r\n * \r\n * JSDoc documentation for these LMS functions can be found near the end of core.js\r\n */\r\n\r\n//DTPS LMS configuration for Canvas\r\nvar dtpsLMS = {\r\n    name: \"Canvas LMS\",\r\n    shortName: \"Canvas\",\r\n    legalName: \"Canvas LMS and Instructure Inc.\",\r\n    description: \"Power+ integration for Canvas LMS\",\r\n    url: \"https://www.instructure.com/canvas/\",\r\n    logo: \"https://i.imgur.com/rGjNVoc.png\",\r\n    source: \"https://github.com/jottocraft/dtps/blob/master/scripts/lms/canvas.js\",\r\n    genericGradebook: true\r\n};\r\n\r\n\r\n/**\r\n * Common headers used for Canvas web requests.\r\n * This variable is specific to Canvas LMS integration in DTPS and is not required for other LMS integrations.\r\n */\r\ndtpsLMS.commonHeaders = { Accept: \"application/json+canvas-string-ids, application/json\" };\r\n\r\n//Fetch userdata from Canvas\r\ndtpsLMS.fetchUser = function () {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/users/self\",\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (userData) {\r\n                jQuery.ajax({\r\n                    url: \"/api/v1/users/self/observees?include[]=avatar_url\",\r\n                    type: \"GET\",\r\n                    headers: dtpsLMS.commonHeaders,\r\n                    success: function (childrenData) {\r\n                        var user = {\r\n                            name: userData.name,\r\n                            id: userData.id,\r\n                            photoURL: userData.avatar_url\r\n                        };\r\n\r\n                        if (childrenData && childrenData.length) {\r\n                            //Parent account\r\n                            user.children = childrenData.map(child => {\r\n                                return {\r\n                                    name: child.name,\r\n                                    id: child.id,\r\n                                    photoURL: child.avatar_url\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        resolve(user);\r\n                    },\r\n                    error: function (err) {\r\n                        reject(err);\r\n                    }\r\n                });\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n//Fetch class data from Canvas\r\ndtpsLMS.fetchClasses = function () {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/users/self/colors\",\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (colorData) {\r\n                jQuery.ajax({\r\n                    url: \"/api/v1/users/self/dashboard_positions\",\r\n                    type: \"GET\",\r\n                    headers: dtpsLMS.commonHeaders,\r\n                    success: function (dashboardData) {\r\n                        jQuery.ajax({\r\n                            url: \"/api/v1/users/\" + dtps.user.lmsID + \"/courses?per_page=100&enrollment_state=active&include[]=term&include[]=total_scores&include[]=public_description&include[]=total_students&include[]=account&include[]=teachers&include[]=course_image&include[]=syllabus_body&include[]=tabs\",\r\n                            type: \"GET\",\r\n                            headers: dtpsLMS.commonHeaders,\r\n                            success: function (courseData) {\r\n                                //All fetches have been completed successfully\r\n\r\n                                var courses = [];\r\n\r\n                                //Add courses from canvas to courses array as a DTPS course object\r\n                                courseData.forEach((course, index) => {\r\n                                    var dtpsCourse = {\r\n                                        name: course.course_code,\r\n                                        id: course.id,\r\n                                        subject: window.localStorage[\"pref-fullNames\"] == \"true\" ? course.course_code : course.course_code.split(\" - \")[0],\r\n                                        syllabus: course.syllabus_body,\r\n                                        homepage: course.default_view == \"wiki\",\r\n                                        description: course.public_description,\r\n                                        numStudents: course.total_students,\r\n                                        term: course.course_code.split(\" - \")[1],\r\n                                        color: colorData.custom_colors[\"course_\" + course.id],\r\n                                        grade: course.enrollments[0].computed_current_score,\r\n                                        letter: course.enrollments[0].computed_current_grade,\r\n                                        image: course.image_download_url,\r\n                                        newDiscussionThreadURL: '/courses/' + course.id + '/discussion_topics/new',\r\n                                        pages: course.tabs.map(tab => tab.id).includes(\"pages\"),\r\n                                        modules: course.tabs.map(tab => tab.id).includes(\"modules\"),\r\n                                        discussions: course.tabs.map(tab => tab.id).includes(\"discussions\")\r\n                                    };\r\n\r\n                                    if (course.teachers[0]) {\r\n                                        dtpsCourse.teacher = {\r\n                                            name: course.teachers[0] && course.teachers[0].display_name,\r\n                                            id: course.teachers[0] && course.teachers[0].id,\r\n                                            photoURL: course.teachers[0] && course.teachers[0].avatar_image_url\r\n                                        };\r\n                                    }\r\n\r\n                                    courses.push(dtpsCourse);\r\n                                });\r\n\r\n                                //Sort courses array\r\n                                courses.sort(function (a, b) {\r\n                                    var keyA = dashboardData.dashboard_positions[\"course_\" + a.id],\r\n                                        keyB = dashboardData.dashboard_positions[\"course_\" + b.id];\r\n\r\n                                    if (keyA < keyB) return -1;\r\n                                    if (keyA > keyB) return 1;\r\n                                    return 0;\r\n                                });\r\n\r\n                                resolve(courses);\r\n                            },\r\n                            error: function (err) {\r\n                                reject(err);\r\n                            }\r\n                        });\r\n                    },\r\n                    error: function (err) {\r\n                        reject(err);\r\n                    }\r\n                });\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n//Fetches assignment data from Canvas\r\ndtpsLMS.fetchAssignments = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/courses/\" + classID + \"/students/submissions?include[]=rubric_assessment&include[]=submission_comments&per_page=100&student_ids[]=\" + dtps.user.lmsID,\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (submissionData) {\r\n                jQuery.ajax({\r\n                    url: \"/api/v1/users/\" + dtps.user.lmsID + \"/courses/\" + classID + \"/assignments?per_page=100&include[]=submission\",\r\n                    type: \"GET\",\r\n                    headers: dtpsLMS.commonHeaders,\r\n                    success: function (assignmentData) {\r\n                        //All fetches have been completed successfully\r\n                        var assignments = [];\r\n\r\n                        //Add assignments from canvas to assignments array as a DTPS assignment object\r\n                        assignmentData.forEach((assignment, index) => {\r\n                            //Define dtpsAssignment\r\n                            var dtpsAssignment = {\r\n                                title: assignment.name,\r\n                                body: assignment.description,\r\n                                id: assignment.id,\r\n                                dueAt: assignment.due_at,\r\n                                url: assignment.html_url,\r\n                                locked: assignment.locked_for_user,\r\n                                publishedAt: assignment.created_at,\r\n                                value: assignment.points_possible\r\n                            };\r\n\r\n                            //Save score names to an array temporarily\r\n                            //This is because the scoreNames can only be found in the rubric data from Canvas\r\n                            //And we don't know which name to use until the outcome score data is processed\r\n                            var temporaryScoreNames = {};\r\n\r\n                            //Add rubric data from Canvas to the dtpsAssignment\r\n                            if (assignment.rubric) {\r\n                                assignment.rubric.forEach(canvasRubric => {\r\n                                    //Add rubric array to assignment if it doesn't exist yet\r\n                                    if (!dtpsAssignment.rubric) dtpsAssignment.rubric = [];\r\n\r\n                                    dtpsAssignment.rubric.push({\r\n                                        title: canvasRubric.description,\r\n                                        description: canvasRubric.long_description,\r\n                                        id: canvasRubric.id,\r\n                                        value: canvasRubric.points,\r\n                                        outcome: canvasRubric.outcome_id,\r\n                                        assignmentTitle: assignment.name,\r\n                                        assignmentID: assignment.id\r\n                                    });\r\n\r\n                                    temporaryScoreNames[canvasRubric.id] = {};\r\n                                    canvasRubric.ratings.forEach(canvasRating => {\r\n                                        temporaryScoreNames[canvasRubric.id][canvasRating.points] = canvasRating.description;\r\n                                    });\r\n                                })\r\n                            }\r\n\r\n                            //Add submission data from Canvas to the dtpsAssignment\r\n                            submissionData.forEach(submission => {\r\n                                if (submission.assignment_id == assignment.id) {\r\n                                    //Add scores from this submission to the rubric\r\n                                    if (submission.rubric_assessment) {\r\n                                        dtpsAssignment.rubric.forEach(rubric => {\r\n                                            if (submission.rubric_assessment[rubric.id]) {\r\n                                                rubric.score = submission.rubric_assessment[rubric.id].points;\r\n                                                rubric.scoreName = temporaryScoreNames[rubric.id][rubric.score];\r\n                                            }\r\n                                        });\r\n                                    }\r\n\r\n                                    //Check for turned in, late, missing, gradedAt, and feedback\r\n                                    dtpsAssignment.turnedIn = submission.submission_type !== null;\r\n                                    dtpsAssignment.late = submission.late;\r\n                                    dtpsAssignment.missing = submission.missing;\r\n                                    dtpsAssignment.gradedAt = submission.graded_at;\r\n                                    dtpsAssignment.grade = submission.score;\r\n                                    if (isNaN(submission.grade)) dtpsAssignment.letter = submission.grade; //letter cannot be a number\r\n\r\n                                    //Check for submission comments\r\n                                    if (submission.submission_comments) {\r\n                                        //Add feedback array to assignment\r\n                                        dtpsAssignment.feedback = [];\r\n\r\n                                        //Add each comment to feedback array\r\n                                        submission.submission_comments.forEach(comment => {\r\n                                            var feedback = {\r\n                                                comment: comment.comment\r\n                                            };\r\n\r\n                                            //Add author to feedback if found\r\n                                            if (comment.author) {\r\n                                                feedback.author = {\r\n                                                    name: comment.author.display_name,\r\n                                                    id: comment.author.id,\r\n                                                    photoURL: comment.author.avatar_image_url\r\n                                                }\r\n                                            }\r\n\r\n                                            dtpsAssignment.feedback.push(feedback)\r\n                                        });\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            //Add assignment to results array\r\n                            assignments.push(dtpsAssignment);\r\n                        });\r\n\r\n                        resolve(assignments);\r\n                    },\r\n                    error: function (err) {\r\n                        reject(err);\r\n                    }\r\n                });\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n//Fetches modules data from Canvas\r\ndtpsLMS.fetchModules = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/courses/\" + classID + \"/modules?include[]=items&include[]=content_details\",\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (modulesData) {\r\n                jQuery.ajax({\r\n                    url: \"/courses/\" + classID + \"/modules/progressions\",\r\n                    type: \"GET\",\r\n                    headers: dtpsLMS.commonHeaders,\r\n                    success: function (progressionData) {\r\n                        //Get collapsed modules from progression data\r\n                        var collapsedModules = {};\r\n\r\n                        //Loop over progression data\r\n                        progressionData.forEach(prog => {\r\n                            //Store collapsed state\r\n                            collapsedModules[prog.context_module_progression.context_module_id] = prog.context_module_progression.collapsed;\r\n                        })\r\n\r\n                        //Parse data from Canvas\r\n                        var dtpsModules = modulesData.map(module => {\r\n                            //Create module items array\r\n                            var moduleItems = [];\r\n\r\n                            //Add module items to array\r\n                            module.items.forEach(item => {\r\n                                if (item.type.toUpperCase() == \"ASSIGNMENT\") {\r\n                                    moduleItems.push({\r\n                                        type: \"assignment\",\r\n                                        title: item.title,\r\n                                        id: item.content_id,\r\n                                        indent: item.indent\r\n                                    })\r\n                                } else if (item.type.toUpperCase() == \"PAGE\") {\r\n                                    moduleItems.push({\r\n                                        type: \"page\",\r\n                                        title: item.title,\r\n                                        id: item.page_url,\r\n                                        indent: item.indent\r\n                                    })\r\n                                } else if (item.type.toUpperCase() == \"DISCUSSION\") {\r\n                                    moduleItems.push({\r\n                                        type: \"discussion\",\r\n                                        title: item.title,\r\n                                        id: item.content_id,\r\n                                        indent: item.indent\r\n                                    })\r\n                                } else if (item.type.toUpperCase() == \"EXTERNALURL\") {\r\n                                    moduleItems.push({\r\n                                        type: \"url\",\r\n                                        title: item.title,\r\n                                        url: item.external_url,\r\n                                        indent: item.indent\r\n                                    })\r\n                                } else if (item.type.toUpperCase() == \"EXTERNALTOOL\") {\r\n                                    moduleItems.push({\r\n                                        type: \"embed\",\r\n                                        title: item.title,\r\n                                        url: item.html_url,\r\n                                        indent: item.indent\r\n                                    });\r\n                                } else if (item.type.toUpperCase() == \"SUBHEADER\") {\r\n                                    moduleItems.push({\r\n                                        type: \"header\",\r\n                                        title: item.title,\r\n                                        indent: item.indent\r\n                                    })\r\n                                }\r\n                            })\r\n\r\n                            return {\r\n                                id: module.id,\r\n                                title: module.name,\r\n                                collapsed: collapsedModules[module.id] || false,\r\n                                items: moduleItems\r\n                            }\r\n                        })\r\n\r\n                        //Resolve with module data\r\n                        resolve(dtpsModules);\r\n                    },\r\n                    error: function (err) {\r\n                        reject(err);\r\n                    }\r\n                });\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n//Collapses a module in Canvas\r\ndtpsLMS.collapseModule = function (classID, modID, collapsed) {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/courses/\" + classID + \"/modules/\" + modID + \"/collapse\",\r\n            type: \"POST\",\r\n            headers: {\r\n                \"Accept\": \"application/json, text/javascript, application/json+canvas-string-ids, */*; q=0.01\",\r\n                \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n                \"X-CSRF-Token\": decodeURIComponent(document.cookie).split(\"_csrf_token=\")[1].split(\";\")[0]\r\n            },\r\n            body: \"_method=POST&collapse=\" + (collapsed ? 1 : 0) + \"&authenticity_token=\" + decodeURIComponent(document.cookie).split(\"_csrf_token=\")[1].split(\";\")[0],\r\n            success: function (data) {\r\n                resolve();\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n//Fetches announcement data from Canvas\r\ndtpsLMS.fetchAnnouncements = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/announcements?context_codes[]=course_\" + classID,\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (data) {\r\n                var dtpsAnnouncements = data.map(function (announcement) {\r\n                    return {\r\n                        title: announcement.title,\r\n                        postedAt: announcement.created_at,\r\n                        body: announcement.message\r\n                    }\r\n                });\r\n\r\n                resolve(dtpsAnnouncements);\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n//Fetches homepage data from Canvas\r\ndtpsLMS.fetchHomepage = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/courses/\" + classID + \"/front_page\",\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (data) {\r\n                resolve(data.body);\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n//Fetches discussion thread data from Canvas\r\ndtpsLMS.fetchDiscussionThreads = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/courses/\" + classID + \"/discussion_topics\",\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (data) {\r\n                var dtpsDiscussionThreads = data.map(function (thread) {\r\n                    return {\r\n                        title: thread.title,\r\n                        id: thread.id,\r\n                        locked: thread.locked_for_user,\r\n                        requireInitialPost: thread.require_initial_post\r\n                    }\r\n                });\r\n\r\n                resolve(dtpsDiscussionThreads);\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n//Fetches discussion thread posts from Canvas\r\ndtpsLMS.fetchDiscussionPosts = function (classID, threadID) {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/courses/\" + classID + \"/discussion_topics/\" + threadID + \"/\",\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (threadData) {\r\n                //Check if this discussion is a group discussion\r\n                if (threadData.group_topic_children && threadData.group_topic_children.length) {\r\n                    //This discussion is probably a group discussion, check groups, then fetch posts\r\n                    jQuery.ajax({\r\n                        url: \"/api/v1/courses/\" + classID + \"/groups?only_own_groups=true\",\r\n                        type: \"GET\",\r\n                        headers: dtpsLMS.commonHeaders,\r\n                        success: function (groupData) {\r\n                            //Get array of group IDs\r\n                            var myGroups = groupData.map(group => group.id);\r\n\r\n                            //Set default group and discussion ID variables\r\n                            var groupID = null;\r\n                            var groupDiscussionID = null;\r\n\r\n                            //Check every group this discussion has and see if one of them is in myGroups, set that group as the group to fetch posts for\r\n                            threadData.group_topic_children.forEach(group => {\r\n                                if (myGroups.includes(group.group_id)) {\r\n                                    groupID = group.group_id;\r\n                                    groupDiscussionID = group.id;\r\n                                }\r\n                            });\r\n\r\n                            if (!groupID || !groupDiscussionID) {\r\n                                //Couldn't find a group match, fetch class discussion\r\n                                jQuery.ajax({\r\n                                    url: \"/api/v1/courses/\" + classID + \"/discussion_topics/\" + threadID + \"/view\",\r\n                                    type: \"GET\",\r\n                                    headers: dtpsLMS.commonHeaders,\r\n                                    success: function (responsesData) {\r\n                                        parseResponse(responsesData, \"/courses/\" + classID + \"/discussion_topics/\" + threadID);\r\n                                    },\r\n                                    error: function (err) {\r\n                                        reject(err);\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                //Group match found, fetch group discussion\r\n                                jQuery.ajax({\r\n                                    url: \"/api/v1/groups/\" + groupID + \"/discussion_topics/\" + groupDiscussionID + \"/view\",\r\n                                    type: \"GET\",\r\n                                    headers: dtpsLMS.commonHeaders,\r\n                                    success: function (responsesData) {\r\n                                        parseResponse(responsesData, \"/groups/\" + groupID + \"/discussion_topics/\" + groupDiscussionID);\r\n                                    },\r\n                                    error: function (err) {\r\n                                        reject(err);\r\n                                    }\r\n                                });\r\n                            }\r\n                        },\r\n                        error: function (err) {\r\n                            reject(err);\r\n                        }\r\n                    });\r\n                } else {\r\n                    //Not a group discussion, directly fetch posts\r\n                    jQuery.ajax({\r\n                        url: \"/api/v1/courses/\" + classID + \"/discussion_topics/\" + threadID + \"/view\",\r\n                        type: \"GET\",\r\n                        headers: dtpsLMS.commonHeaders,\r\n                        success: function (responsesData) {\r\n                            parseResponse(responsesData, \"/courses/\" + classID + \"/discussion_topics/\" + threadID);\r\n                        },\r\n                        error: function (err) {\r\n                            reject(err);\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n                //This function handles the response from Canavs and returns the data to DTPS\r\n                //BaseURL is the baseURL of the thread, since this might be different for group discussions\r\n                function parseResponse(responsesData, baseURL) {\r\n                    //Define discussions post array\r\n                    var dtpsDiscussionPosts = [];\r\n\r\n                    //Define the initial post\r\n                    var initialPost = {\r\n                        id: threadID,\r\n                        body: threadData.message,\r\n                        postedAt: threadData.created_at,\r\n                        replyURL: baseURL\r\n                    };\r\n\r\n                    //Check for author\r\n                    if (threadData.author && threadData.author.display_name) {\r\n                        initialPost.author = {\r\n                            name: threadData.author.display_name,\r\n                            id: threadData.author.id,\r\n                            photoURL: threadData.author.avatar_image_url\r\n                        };\r\n                    }\r\n\r\n                    //Add initial post to array\r\n                    dtpsDiscussionPosts.push(initialPost);\r\n\r\n                    if (responsesData.view) {\r\n                        //Get thread author information\r\n                        var people = {};\r\n                        if (responsesData.participants) {\r\n                            responsesData.participants.forEach(participant => {\r\n                                people[participant.id] = participant;\r\n                            })\r\n                        }\r\n\r\n                        //If there are posts found from the second request, add those as well\r\n                        responsesData.view.forEach(function (post) {\r\n                            if (!post.deleted) {\r\n                                var replies = [];\r\n\r\n                                //Get replies for this post\r\n                                if (post.replies) {\r\n                                    //If this post has replies, flatten them into a single array\r\n                                    function addReplies(arr, depth) {\r\n                                        //Loop over replies to add\r\n                                        arr.forEach(reply => {\r\n                                            //Add this reply to the array\r\n                                            if (!reply.deleted) {\r\n                                                //Define reply object\r\n                                                var dtpsReply = {\r\n                                                    id: reply.id,\r\n                                                    body: reply.message,\r\n                                                    postedAt: reply.created_at,\r\n                                                    replyURL: baseURL + \"/entry-\" + reply.id,\r\n                                                    depth: depth\r\n                                                };\r\n\r\n                                                //Check for reply author\r\n                                                if (people[reply.user_id]) {\r\n                                                    dtpsReply.author = {\r\n                                                        name: people[reply.user_id].display_name,\r\n                                                        id: reply.user_id,\r\n                                                        photoURL: people[reply.user_id].avatar_image_url\r\n                                                    }\r\n                                                }\r\n\r\n                                                //Add reply to flattened array\r\n                                                replies.push(dtpsReply);\r\n                                            }\r\n\r\n                                            //Add nested replies to array\r\n                                            if (reply.replies) addReplies(reply.replies, depth + 1);\r\n                                        });\r\n                                    }\r\n\r\n                                    addReplies(post.replies, 0);\r\n                                }\r\n\r\n                                //Define post object\r\n                                var dtpsPost = {\r\n                                    id: post.id,\r\n                                    body: post.message,\r\n                                    postedAt: post.created_at,\r\n                                    replies: replies,\r\n                                    replyURL: baseURL + \"/entry-\" + post.id\r\n                                };\r\n\r\n                                //Check for post author\r\n                                if (people[post.user_id]) {\r\n                                    dtpsPost.author = {\r\n                                        name: people[post.user_id].display_name,\r\n                                        id: post.user_id,\r\n                                        photoURL: people[post.user_id].avatar_image_url\r\n                                    }\r\n                                }\r\n\r\n                                //Add post to array\r\n                                dtpsDiscussionPosts.push(dtpsPost);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    resolve(dtpsDiscussionPosts);\r\n                }\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n//Fetches pages list data from Canvas\r\ndtpsLMS.fetchPages = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/courses/\" + classID + \"/pages?per_page=100\",\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (data) {\r\n                var dtpsPages = data.map(function (page) {\r\n                    var dtpsPage = {\r\n                        title: page.title,\r\n                        id: page.url,\r\n                        updatedAt: page.updated_at\r\n                    };\r\n\r\n                    //Check for page author\r\n                    if (page.last_edited_by) {\r\n                        dtpsPage.author = {\r\n                            name: page.last_edited_by.display_name,\r\n                            id: page.last_edited_by.id,\r\n                            photoURL: page.last_edited_by.avatar_image_url\r\n                        }\r\n                    }\r\n\r\n                    return dtpsPage;\r\n                });\r\n\r\n                resolve(dtpsPages);\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n//Fetches pages list data from Canvas\r\ndtpsLMS.fetchPageContent = function (classID, pageID) {\r\n    return new Promise(function (resolve, reject) {\r\n        jQuery.ajax({\r\n            url: \"/api/v1/courses/\" + classID + \"/pages/\" + pageID,\r\n            type: \"GET\",\r\n            headers: dtpsLMS.commonHeaders,\r\n            success: function (data) {\r\n                //Resolve with page content\r\n                resolve(data.body);\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n//Get baseURL from the URL of this script\r\nvar baseURL = document.currentScript.src.split('/')[0] + '//' + document.currentScript.src.split('/')[2];\r\n\r\n//Load Power+\r\njQuery.getScript(baseURL + \"/scripts/core.js\");"]}