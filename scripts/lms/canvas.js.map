{"version":3,"sources":["scripts/lms/canvas.js"],"names":["dtpsLMS","name","shortName","legalName","description","url","logo","source","genericGradebook","commonHeaders","Accept","teacherCache","fetchUser","Promise","resolve","reject","window","ENV","current_user","id","action","redirectURL","user","display_name","photoURL","avatar_image_url","current_user_roles","includes","fetch","headers","then","response","json","childrenData","length","children","map","child","split","avatar_url","catch","fetchClasses","userID","all","dtps","responses","r","data","colorData","dashboardData","courseData","courses","forEach","course","index","dtpsCourse","course_code","lmsID","people","parent","period","sections","find","section","test","subject","localStorage","homepage","default_view","term","color","custom_colors","grade","enrollments","computed_current_score","letter","computed_current_grade","image","image_download_url","newDiscussionThreadURL","pages","tabs","tab","modules","discussions","endDate","end_at","teachers","teacher","push","sort","a","b","keyA","dashboard_positions","keyB","fetchAssignments","classID","submissionData","assignmentData","assignments","assignment","dtpsAssignment","title","body","dueAt","due_at","html_url","locked","locked_for_user","publishedAt","created_at","value","points_possible","temporaryScoreNames","rubric","canvasRubric","long_description","points","outcome","outcome_id","assignmentTitle","assignmentID","ratings","canvasRating","submission","assignment_id","rubric_assessment","score","scoreName","turnedIn","submission_type","late","missing","gradedAt","graded_at","isNaN","submission_comments","feedback","comment","author","fetchModules","modulesData","progressionData","collapsedModules","prog","context_module_progression","context_module_id","collapsed","dtpsModules","module","moduleItems","items","item","type","toUpperCase","content_id","indent","completed","completion_requirement","page_url","external_url","collapseModule","modID","method","Content-Type","X-CSRF-Token","decodeURIComponent","document","cookie","collapseAllModules","fetchAnnouncements","dtpsAnnouncements","announcement","postedAt","message","fetchUsers","users","students","student","short_name","dtechMatch","match","dtech","fetchHomepage","fetchDiscussionThreads","dtpsDiscussionThreads","thread","fetchDiscussionPosts","threadID","threadData","parseResponse","responsesData","baseURL","dtpsDiscussionPosts","initialPost","replyURL","view","participants","participant","post","deleted","replies","addReplies","arr","depth","reply","dtpsReply","user_id","dtpsPost","posts","group_topic_children","groupData","myGroups","group","groupID","groupDiscussionID","group_id","fetchPages","dtpsPages","page","fetchPageContent","pageID","dtpsPage","updatedAt","updated_at","content","last_edited_by","currentScript","src","jQuery","getScript"],"mappings":"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","sourceRoot":"/","sourcesContent":["/**\r\n * @file DTPS Canvas LMS Integration\r\n * @author jottocraft\r\n * \r\n * @copyright Copyright (c) 2018-2021 jottocraft. All rights reserved.\r\n * @license GPL-2.0-only\r\n * \r\n * JSDoc documentation for these LMS functions can be found near the end of core.js\r\n */\r\n\r\n//DTPS LMS configuration for Canvas\r\nvar dtpsLMS = {\r\n    name: \"Canvas LMS\",\r\n    shortName: \"Canvas\",\r\n    legalName: \"Canvas LMS or Instructure Inc.\",\r\n    description: \"Power+ integration for Canvas LMS\",\r\n    url: \"https://www.instructure.com/canvas/\",\r\n    logo: \"https://i.imgur.com/rGjNVoc.png\",\r\n    source: \"https://github.com/jottocraft/dtps/blob/main/scripts/lms/canvas.js\",\r\n    genericGradebook: true\r\n};\r\n\r\n\r\n/**\r\n * Common headers used for Canvas web requests.\r\n * This variable is specific to Canvas LMS integration in DTPS and is not required for other LMS integrations.\r\n */\r\ndtpsLMS.commonHeaders = { Accept: \"application/json+canvas-string-ids, application/json\" };\r\n\r\n/**\r\n * List of teachers from dtpsLMS.fetchClasses for use in other methods\r\n * This variable is specific to Canvas LMS integration in DTPS and is not required for other LMS integrations.\r\n */\r\ndtpsLMS.teacherCache = {};\r\n\r\n//Fetch userdata from Canvas\r\ndtpsLMS.fetchUser = function () {\r\n    return new Promise(function (resolve, reject) {\r\n        if (!window.ENV || !window.ENV.current_user.id) reject({ action: \"login\", redirectURL: \"/?dtpsLogin=true\" });\r\n\r\n        var user = {\r\n            name: window.ENV.current_user.display_name,\r\n            id: window.ENV.current_user.id,\r\n            photoURL: ENV.current_user.avatar_image_url\r\n        };\r\n\r\n        if (window.ENV.current_user_roles.includes(\"observer\")) {\r\n            fetch(\"/api/v1/users/self/observees?include[]=avatar_url\", { headers: dtpsLMS.commonHeaders }).then(response => {\r\n                return response.json();\r\n            }).then(childrenData => {\r\n                if (childrenData && childrenData.length) {\r\n                    //Parent account\r\n                    user.children = childrenData.map(child => {\r\n                        return {\r\n                            name: child.name.split(\" \")[0],\r\n                            id: child.id,\r\n                            photoURL: child.avatar_url\r\n                        }\r\n                    });\r\n                }\r\n\r\n                resolve(user);\r\n            }).catch(reject);\r\n        } else {\r\n            resolve(user);\r\n        }\r\n    })\r\n}\r\n\r\n//Fetch class data from Canvas\r\ndtpsLMS.fetchClasses = function (userID) {\r\n    return new Promise(function (resolve, reject) {\r\n        Promise.all([\r\n            fetch(\"/api/v1/users/\" + dtps.user.id + \"/colors\", { headers: dtpsLMS.commonHeaders }),\r\n            fetch(\"/api/v1/users/\" + userID + \"/dashboard_positions\", { headers: dtpsLMS.commonHeaders }),\r\n            fetch(\"/api/v1/users/\" + userID + \"/courses?per_page=100&enrollment_state=active&include[]=term&include[]=total_scores&include[]=account&include[]=teachers&include[]=course_image&include[]=tabs&include[]=sections\", { headers: dtpsLMS.commonHeaders })\r\n        ]).then(responses => {\r\n            return Promise.all(responses.map(r => r.json()));\r\n        }).then(data => {\r\n            var [colorData, dashboardData, courseData] = data;\r\n            var courses = [];\r\n\r\n            //Add courses from canvas to courses array as a DTPS course object\r\n            courseData.forEach((course, index) => {\r\n                var dtpsCourse = {\r\n                    name: course.course_code,\r\n                    id: course.id,\r\n                    lmsID: course.id,\r\n                    people: !dtps.user.parent,\r\n                    userID: userID,\r\n                    period: course.sections && course.sections[0] && (course.sections.find(section => /[0-9](?=\\(A)/.test(section.name)) || course.sections[0]).name,\r\n                    subject: window.localStorage[\"pref-fullNames\"] == \"true\" ? course.course_code : course.course_code.split(\" - \")[0],\r\n                    homepage: course.default_view == \"wiki\",\r\n                    term: course.course_code.split(\" - \")[1],\r\n                    color: colorData.custom_colors[\"course_\" + course.id],\r\n                    grade: course.enrollments[0].computed_current_score,\r\n                    letter: course.enrollments[0].computed_current_grade,\r\n                    image: course.image_download_url,\r\n                    newDiscussionThreadURL: '/courses/' + course.id + '/discussion_topics/new',\r\n                    pages: course.tabs.map(tab => tab.id).includes(\"pages\"),\r\n                    modules: course.tabs.map(tab => tab.id).includes(\"modules\"),\r\n                    discussions: true || course.tabs.map(tab => tab.id).includes(\"discussions\"),\r\n                    endDate: course.end_at\r\n                };\r\n\r\n                //Save teachers in cache\r\n                dtpsLMS.teacherCache[course.id] = course.teachers;\r\n\r\n                if (course.teachers[0]) {\r\n                    dtpsCourse.teacher = {\r\n                        name: course.teachers[0] && course.teachers[0].display_name,\r\n                        id: course.teachers[0] && course.teachers[0].id,\r\n                        photoURL: course.teachers[0] && course.teachers[0].avatar_image_url\r\n                    };\r\n                }\r\n\r\n                courses.push(dtpsCourse);\r\n            });\r\n\r\n            //Sort courses array\r\n            courses.sort(function (a, b) {\r\n                var keyA = dashboardData.dashboard_positions[\"course_\" + a.id],\r\n                    keyB = dashboardData.dashboard_positions[\"course_\" + b.id];\r\n\r\n                if (keyA < keyB) return -1;\r\n                if (keyA > keyB) return 1;\r\n                return 0;\r\n            });\r\n\r\n            resolve(courses);\r\n        }).catch(reject);\r\n    })\r\n}\r\n\r\n//Fetches assignment data from Canvas\r\ndtpsLMS.fetchAssignments = function (userID, classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        Promise.all([\r\n            fetch(\"/api/v1/courses/\" + classID + \"/students/submissions?include[]=rubric_assessment&include[]=submission_comments&per_page=100&student_ids[]=\" + userID, { headers: dtpsLMS.commonHeaders }),\r\n            fetch(\"/api/v1/users/\" + userID + \"/courses/\" + classID + \"/assignments?per_page=100\", { headers: dtpsLMS.commonHeaders })\r\n        ]).then(responses => {\r\n            return Promise.all(responses.map(r => r.json()));\r\n        }).then(data => {\r\n            var [submissionData, assignmentData] = data;\r\n\r\n            //All fetches have been completed successfully\r\n            var assignments = [];\r\n\r\n            //Add assignments from canvas to assignments array as a DTPS assignment object\r\n            assignmentData.forEach((assignment, index) => {\r\n                //Define dtpsAssignment\r\n                var dtpsAssignment = {\r\n                    title: assignment.name,\r\n                    body: assignment.description,\r\n                    id: assignment.id,\r\n                    dueAt: assignment.due_at,\r\n                    url: assignment.html_url,\r\n                    locked: assignment.locked_for_user,\r\n                    publishedAt: assignment.created_at,\r\n                    value: assignment.points_possible\r\n                };\r\n\r\n                //Save score names to an array temporarily\r\n                //This is because the scoreNames can only be found in the rubric data from Canvas\r\n                //And we don't know which name to use until the outcome score data is processed\r\n                var temporaryScoreNames = {};\r\n\r\n                //Add rubric data from Canvas to the dtpsAssignment\r\n                if (assignment.rubric) {\r\n                    assignment.rubric.forEach(canvasRubric => {\r\n                        //Add rubric array to assignment if it doesn't exist yet\r\n                        if (!dtpsAssignment.rubric) dtpsAssignment.rubric = [];\r\n\r\n                        dtpsAssignment.rubric.push({\r\n                            title: canvasRubric.description,\r\n                            description: canvasRubric.long_description,\r\n                            id: canvasRubric.id,\r\n                            value: canvasRubric.points,\r\n                            outcome: canvasRubric.outcome_id,\r\n                            assignmentTitle: assignment.name,\r\n                            assignmentID: assignment.id\r\n                        });\r\n\r\n                        temporaryScoreNames[canvasRubric.id] = {};\r\n                        canvasRubric.ratings.forEach(canvasRating => {\r\n                            temporaryScoreNames[canvasRubric.id][canvasRating.points] = canvasRating.description;\r\n                        });\r\n                    })\r\n                }\r\n\r\n                //Add submission data from Canvas to the dtpsAssignment\r\n                submissionData.forEach(submission => {\r\n                    if (submission.assignment_id == assignment.id) {\r\n                        //Add scores from this submission to the rubric\r\n                        if (submission.rubric_assessment) {\r\n                            dtpsAssignment.rubric.forEach(rubric => {\r\n                                if (submission.rubric_assessment[rubric.id]) {\r\n                                    rubric.score = submission.rubric_assessment[rubric.id].points;\r\n                                    rubric.scoreName = temporaryScoreNames[rubric.id][rubric.score];\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        //Check for turned in, late, missing, gradedAt, and feedback\r\n                        dtpsAssignment.turnedIn = submission.submission_type !== null;\r\n                        dtpsAssignment.late = submission.late;\r\n                        dtpsAssignment.missing = submission.missing;\r\n                        dtpsAssignment.gradedAt = submission.graded_at;\r\n                        dtpsAssignment.grade = submission.score;\r\n                        var letter = submission.grade;\r\n                        if (letter == \"complete\") letter = \"✔️\";\r\n                        if (letter == \"incomplete\") letter = \"❌\";\r\n                        if (isNaN(letter)) dtpsAssignment.letter = letter; //letter cannot be a number\r\n\r\n                        //Check for submission comments\r\n                        if (submission.submission_comments) {\r\n                            //Add feedback array to assignment\r\n                            dtpsAssignment.feedback = [];\r\n\r\n                            //Add each comment to feedback array\r\n                            submission.submission_comments.forEach(comment => {\r\n                                var feedback = {\r\n                                    comment: comment.comment\r\n                                };\r\n\r\n                                //Add author to feedback if found\r\n                                if (comment.author) {\r\n                                    feedback.author = {\r\n                                        name: comment.author.display_name,\r\n                                        id: comment.author.id,\r\n                                        photoURL: comment.author.avatar_image_url\r\n                                    }\r\n                                }\r\n\r\n                                dtpsAssignment.feedback.push(feedback)\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n\r\n                //Add assignment to results array\r\n                assignments.push(dtpsAssignment);\r\n            });\r\n\r\n            resolve(assignments);\r\n        }).catch(reject);\r\n    });\r\n}\r\n\r\n//Fetches modules data from Canvas\r\ndtpsLMS.fetchModules = function (userID, classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        Promise.all([\r\n            fetch(\"/api/v1/courses/\" + classID + \"/modules?include[]=items&include[]=content_details\", { headers: dtpsLMS.commonHeaders }),\r\n            fetch(\"/courses/\" + classID + \"/modules/progressions\", { headers: dtpsLMS.commonHeaders })\r\n        ]).then(responses => {\r\n            return Promise.all(responses.map(r => r.json()));\r\n        }).then(data => {\r\n            var [modulesData, progressionData] = data;\r\n\r\n            //Get collapsed modules from progression data\r\n            var collapsedModules = {};\r\n\r\n            //Loop over progression data\r\n            progressionData.forEach(prog => {\r\n                //Store collapsed state\r\n                collapsedModules[prog.context_module_progression.context_module_id] = prog.context_module_progression.collapsed;\r\n            })\r\n\r\n            //Parse data from Canvas\r\n            var dtpsModules = modulesData.map(module => {\r\n                //Create module items array\r\n                var moduleItems = [];\r\n\r\n                //Add module items to array\r\n                module.items.forEach(item => {\r\n                    if (item.type.toUpperCase() == \"ASSIGNMENT\") {\r\n                        moduleItems.push({\r\n                            type: \"assignment\",\r\n                            title: item.title,\r\n                            id: item.content_id,\r\n                            indent: item.indent,\r\n                            url: item.html_url,\r\n                            completed: item.completion_requirement && item.completion_requirement.completed\r\n                        })\r\n                    } else if (item.type.toUpperCase() == \"PAGE\") {\r\n                        moduleItems.push({\r\n                            type: \"page\",\r\n                            title: item.title,\r\n                            id: item.page_url,\r\n                            indent: item.indent,\r\n                            url: item.html_url,\r\n                            completed: item.completion_requirement && item.completion_requirement.completed\r\n                        })\r\n                    } else if (item.type.toUpperCase() == \"DISCUSSION\") {\r\n                        moduleItems.push({\r\n                            type: \"discussion\",\r\n                            title: item.title,\r\n                            id: item.content_id,\r\n                            indent: item.indent,\r\n                            url: item.html_url,\r\n                            completed: item.completion_requirement && item.completion_requirement.completed\r\n                        })\r\n                    } else if (item.type.toUpperCase() == \"EXTERNALURL\") {\r\n                        moduleItems.push({\r\n                            type: \"url\",\r\n                            title: item.title,\r\n                            url: item.external_url,\r\n                            indent: item.indent,\r\n                            completed: item.completion_requirement && item.completion_requirement.completed\r\n                        })\r\n                    } else if (item.type.toUpperCase() == \"EXTERNALTOOL\") {\r\n                        moduleItems.push({\r\n                            type: \"embed\",\r\n                            title: item.title,\r\n                            url: item.html_url,\r\n                            indent: item.indent,\r\n                            completed: item.completion_requirement && item.completion_requirement.completed\r\n                        });\r\n                    } else if (item.type.toUpperCase() == \"SUBHEADER\") {\r\n                        moduleItems.push({\r\n                            type: \"header\",\r\n                            title: item.title,\r\n                            indent: item.indent,\r\n                            completed: item.completion_requirement && item.completion_requirement.completed\r\n                        })\r\n                    }\r\n                })\r\n\r\n                return {\r\n                    id: module.id,\r\n                    title: module.name,\r\n                    collapsed: collapsedModules[module.id] || false,\r\n                    items: moduleItems\r\n                }\r\n            })\r\n\r\n            //Resolve with module data\r\n            resolve(dtpsModules);\r\n        }).catch(reject);\r\n    });\r\n}\r\n\r\n//Collapses a module in Canvas\r\ndtpsLMS.collapseModule = function (classID, modID, collapsed) {\r\n    return fetch(\"/courses/\" + classID + \"/modules/\" + modID + \"/collapse\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Accept\": \"application/json, text/javascript, application/json+canvas-string-ids, */*; q=0.01\",\r\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n            \"X-CSRF-Token\": decodeURIComponent(document.cookie).split(\"_csrf_token=\")[1].split(\";\")[0]\r\n        },\r\n        body: \"_method=POST&collapse=\" + (collapsed ? 1 : 0) + \"&authenticity_token=\" + decodeURIComponent(document.cookie).split(\"_csrf_token=\")[1].split(\";\")[0]\r\n    });\r\n}\r\n\r\n//Collapses all modules in Canvas\r\ndtpsLMS.collapseAllModules = function (classID, collapsed) {\r\n    return fetch(\"/courses/\" + classID + \"/collapse_all_modules\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Accept\": \"application/json, text/javascript, application/json+canvas-string-ids, */*; q=0.01\",\r\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n            \"X-CSRF-Token\": decodeURIComponent(document.cookie).split(\"_csrf_token=\")[1].split(\";\")[0]\r\n        },\r\n        body: \"_method=POST&collapse=\" + (collapsed ? 1 : 0) + \"&authenticity_token=\" + decodeURIComponent(document.cookie).split(\"_csrf_token=\")[1].split(\";\")[0]\r\n    });\r\n}\r\n\r\n//Fetches announcement data from Canvas\r\ndtpsLMS.fetchAnnouncements = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        fetch(\"/api/v1/announcements?context_codes[]=course_\" + classID, { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(data => {\r\n            var dtpsAnnouncements = data.map(function (announcement) {\r\n                return {\r\n                    title: announcement.title,\r\n                    postedAt: announcement.created_at,\r\n                    body: announcement.message,\r\n                    url: announcement.html_url\r\n                }\r\n            });\r\n\r\n            resolve(dtpsAnnouncements);\r\n        }).catch(reject);\r\n    });\r\n}\r\n\r\n//Fetches user data from Canvas\r\ndtpsLMS.fetchUsers = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        fetch(\"/api/v1/courses/\" + classID + \"/sections?include[]=avatar_url&include[]=students&per_page=99\", { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(data => {\r\n            var teachers = dtpsLMS.teacherCache[classID];\r\n            var sections = [{\r\n                title: \"Teachers\",\r\n                id: \"lms.dtps.canvas-teachers\",\r\n                users: []\r\n            }];\r\n\r\n            teachers.forEach(teacher => {\r\n                sections[0].users.push({\r\n                    name: teacher.display_name,\r\n                    id: teacher.id,\r\n                    photoURL: teacher.avatar_image_url,\r\n                    url: \"/courses/\" + classID + \"/users/\" + teacher.id\r\n                });\r\n            });\r\n\r\n            data.forEach(section => {\r\n                if (!section.students) return;\r\n                var users = [];\r\n                section.students.forEach(student => {\r\n                    users.push({\r\n                        name: student.short_name,\r\n                        id: student.id,\r\n                        photoURL: student.avatar_url,\r\n                        url: \"/courses/\" + classID + \"/users/\" + student.id\r\n                    });\r\n                });\r\n                var dtechMatch = section.name.match(/[0-9](?=\\(A)/);\r\n                if (dtpsLMS.dtech && dtechMatch) {\r\n                    section.name = dtechMatch[0] == 7 ? \"@d.tech\" : \"Period \" + dtechMatch[0];\r\n                }\r\n                sections.push({\r\n                    title: section.name,\r\n                    id: section.id,\r\n                    users\r\n                });\r\n            });\r\n            resolve(sections);\r\n        }).catch(reject);\r\n    });\r\n}\r\n\r\n//Fetches homepage data from Canvas\r\ndtpsLMS.fetchHomepage = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        fetch(\"/api/v1/courses/\" + classID + \"/front_page\", { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(data => {\r\n            resolve(data.body);\r\n        }).catch(reject);\r\n    });\r\n}\r\n\r\n//Fetches discussion thread data from Canvas\r\ndtpsLMS.fetchDiscussionThreads = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        fetch(\"/api/v1/courses/\" + classID + \"/discussion_topics\", { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(data => {\r\n            var dtpsDiscussionThreads = data.map(function (thread) {\r\n                return {\r\n                    title: thread.title,\r\n                    id: thread.id,\r\n                    locked: thread.locked_for_user\r\n                }\r\n            });\r\n\r\n            resolve(dtpsDiscussionThreads);\r\n        }).catch(reject);\r\n    })\r\n}\r\n\r\n//Fetches discussion thread posts from Canvas\r\ndtpsLMS.fetchDiscussionPosts = function (classID, threadID) {\r\n    return new Promise(function (resolve, reject) {\r\n        fetch(\"/api/v1/courses/\" + classID + \"/discussion_topics/\" + threadID + \"/\", { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(threadData => {\r\n            //Check if this discussion is a group discussion\r\n            if (threadData.group_topic_children && threadData.group_topic_children.length) {\r\n                //This discussion is probably a group discussion, check groups, then fetch posts\r\n                fetch(\"/api/v1/courses/\" + classID + \"/groups?only_own_groups=true\", { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(groupData => {\r\n                    //Get array of group IDs\r\n                    var myGroups = groupData.map(group => group.id);\r\n\r\n                    //Set default group and discussion ID variables\r\n                    var groupID = null;\r\n                    var groupDiscussionID = null;\r\n\r\n                    //Check every group this discussion has and see if one of them is in myGroups, set that group as the group to fetch posts for\r\n                    threadData.group_topic_children.forEach(group => {\r\n                        if (myGroups.includes(group.group_id)) {\r\n                            groupID = group.group_id;\r\n                            groupDiscussionID = group.id;\r\n                        }\r\n                    });\r\n\r\n                    if (!groupID || !groupDiscussionID) {\r\n                        //Couldn't find a group match, fetch class discussion\r\n                        fetch(\"/api/v1/courses/\" + classID + \"/discussion_topics/\" + threadID + \"/view\", { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(responsesData => {\r\n                            parseResponse(responsesData, \"/courses/\" + classID + \"/discussion_topics/\" + threadID);\r\n                        });\r\n                    } else {\r\n                        //Group match found, fetch group discussion\r\n                        fetch(\"/api/v1/groups/\" + groupID + \"/discussion_topics/\" + groupDiscussionID + \"/view\", { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(responsesData => {\r\n                            parseResponse(responsesData, \"/groups/\" + groupID + \"/discussion_topics/\" + groupDiscussionID);\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                //Not a group discussion, directly fetch posts\r\n                fetch(\"/api/v1/courses/\" + classID + \"/discussion_topics/\" + threadID + \"/view\", { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(responsesData => {\r\n                    parseResponse(responsesData, \"/courses/\" + classID + \"/discussion_topics/\" + threadID);\r\n                });\r\n            }\r\n\r\n\r\n            //This function handles the response from Canavs and returns the data to DTPS\r\n            //BaseURL is the baseURL of the thread, since this might be different for group discussions\r\n            function parseResponse(responsesData, baseURL) {\r\n                //Define discussions post array\r\n                var dtpsDiscussionPosts = [];\r\n\r\n                //Define the initial post\r\n                var initialPost = {\r\n                    id: threadID,\r\n                    body: threadData.message,\r\n                    postedAt: threadData.created_at,\r\n                    replyURL: baseURL\r\n                };\r\n\r\n                //Check for author\r\n                if (threadData.author && threadData.author.display_name) {\r\n                    initialPost.author = {\r\n                        name: threadData.author.display_name,\r\n                        id: threadData.author.id,\r\n                        photoURL: threadData.author.avatar_image_url\r\n                    };\r\n                }\r\n\r\n                //Add initial post to array\r\n                dtpsDiscussionPosts.push(initialPost);\r\n\r\n                if (responsesData.view) {\r\n                    //Get thread author information\r\n                    var people = {};\r\n                    if (responsesData.participants) {\r\n                        responsesData.participants.forEach(participant => {\r\n                            people[participant.id] = participant;\r\n                        })\r\n                    }\r\n\r\n                    //If there are posts found from the second request, add those as well\r\n                    responsesData.view.forEach(function (post) {\r\n                        if (!post.deleted) {\r\n                            var replies = [];\r\n\r\n                            //Get replies for this post\r\n                            if (post.replies) {\r\n                                //If this post has replies, flatten them into a single array\r\n                                function addReplies(arr, depth) {\r\n                                    //Loop over replies to add\r\n                                    arr.forEach(reply => {\r\n                                        //Add this reply to the array\r\n                                        if (!reply.deleted) {\r\n                                            //Define reply object\r\n                                            var dtpsReply = {\r\n                                                id: reply.id,\r\n                                                body: reply.message,\r\n                                                postedAt: reply.created_at,\r\n                                                replyURL: baseURL + \"/entry-\" + reply.id,\r\n                                                depth: depth\r\n                                            };\r\n\r\n                                            //Check for reply author\r\n                                            if (people[reply.user_id]) {\r\n                                                dtpsReply.author = {\r\n                                                    name: people[reply.user_id].display_name,\r\n                                                    id: reply.user_id,\r\n                                                    photoURL: people[reply.user_id].avatar_image_url\r\n                                                }\r\n                                            }\r\n\r\n                                            //Add reply to flattened array\r\n                                            replies.push(dtpsReply);\r\n                                        }\r\n\r\n                                        //Add nested replies to array\r\n                                        if (reply.replies) addReplies(reply.replies, depth + 1);\r\n                                    });\r\n                                }\r\n\r\n                                addReplies(post.replies, 0);\r\n                            }\r\n\r\n                            //Define post object\r\n                            var dtpsPost = {\r\n                                id: post.id,\r\n                                body: post.message,\r\n                                postedAt: post.created_at,\r\n                                replies: replies,\r\n                                replyURL: baseURL + \"/entry-\" + post.id\r\n                            };\r\n\r\n                            //Check for post author\r\n                            if (people[post.user_id]) {\r\n                                dtpsPost.author = {\r\n                                    name: people[post.user_id].display_name,\r\n                                    id: post.user_id,\r\n                                    photoURL: people[post.user_id].avatar_image_url\r\n                                }\r\n                            }\r\n\r\n                            //Add post to array\r\n                            dtpsDiscussionPosts.push(dtpsPost);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                resolve({\r\n                    title: threadData.title,\r\n                    id: threadData.id,\r\n                    locked: threadData.locked_for_user,\r\n                    posts: dtpsDiscussionPosts\r\n                });\r\n            }\r\n        }).catch(reject);\r\n    });\r\n}\r\n\r\n//Fetches pages list data from Canvas\r\ndtpsLMS.fetchPages = function (classID) {\r\n    return new Promise(function (resolve, reject) {\r\n        fetch(\"/api/v1/courses/\" + classID + \"/pages?per_page=100\", { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(data => {\r\n            var dtpsPages = data.map(function (page) {\r\n                var dtpsPage = {\r\n                    title: page.title,\r\n                    id: page.url\r\n                };\r\n\r\n                return dtpsPage;\r\n            });\r\n\r\n            resolve(dtpsPages);\r\n        }).catch(reject);\r\n    })\r\n}\r\n\r\n//Fetches pages list data from Canvas\r\ndtpsLMS.fetchPageContent = function (classID, pageID) {\r\n    return new Promise(function (resolve, reject) {\r\n        fetch(\"/api/v1/courses/\" + classID + \"/pages/\" + pageID, { headers: dtpsLMS.commonHeaders }).then(response => response.json()).then(data => {\r\n            //Resolve with full page object\r\n            var dtpsPage = {\r\n                title: data.title,\r\n                id: data.url,\r\n                updatedAt: data.updated_at,\r\n                content: data.body\r\n            };\r\n\r\n            //Check for page author\r\n            if (data.last_edited_by) {\r\n                dtpsPage.author = {\r\n                    name: data.last_edited_by.display_name,\r\n                    id: data.last_edited_by.id,\r\n                    photoURL: data.last_edited_by.avatar_image_url\r\n                }\r\n            }\r\n\r\n            resolve(dtpsPage);\r\n        }).catch(reject);\r\n    })\r\n}\r\n\r\n//Get baseURL from the URL of this script\r\nvar baseURL = document.currentScript.src.split(\"/scripts/lms/canvas.js\")[0];\r\n\r\n//Load Power+\r\njQuery.getScript(baseURL + \"/scripts/core.js\");"]}