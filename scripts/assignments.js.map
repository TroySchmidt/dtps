{"version":3,"sources":["scripts/assignments.js"],"names":["dtps","renderAssignment","assignment","scoreHTML","renderAssignmentScore","id","class","classes","color","title","dueAt","formatDate","outcomes","length","category","turnedIn","missing","late","locked","pending","dtpsLMS","useRubricGrades","rubric","rubricHTML","forEach","rubricItem","score","push","join","grade","value","letter","replace","Math","round","masterStream","presentClass","showClasses","$","removeClass","ready","course","assignments","doneLoading","dashboardContainerHTML","dashboardItem","undefined","fullCalendar","selectedClass","jQuery","html","leftDashboard","map","rightDashboard","renderUpdates","renderUpcoming","calendar","renderDueToday","combinedStream","isToday","sort","a","b","keyA","Date","getTime","keyB","combinedHTML","updatesHTML","updates","update","type","body","gradedAt","calEvents","courseIndex","start","moment","toISOString","allDay","classNum","assignmentID","events","header","left","right","eventClick","calEvent","jsEvent","view","eventAfterAllRender","classStream","classID","searchResults","searchText","indexOf","selectedContent","addClass","error","renderClassTools","now","prevAssignment","streamHTML","divider","assignmentIDs","assignmentBodyURL","computedBackgroundColor","getComputedStyle","getPropertyValue","computedTextColor","blob","Blob","window","URL","createObjectURL","assignmentRubricHTML","scoreName","assignmentFeedbackHTML","feedback","author","photoURL","name","comment","publishedAt","subject","env","url","shortName","fluid","cards","close","modal","search","val","screen","input","Fuse","keys","moduleStream","Promise","resolve","modules","fetchModules","then","data","modulesHTML","module","moduleItemHTML","items","item","icon","action","pages","discussions","indent","collapsed","catch","err","moduleCollapse","ele","modID","parents","toggleClass","hasClass","collapseModule","num","modulesSelector","teacher","homepage","videoMeetingURL","classInfo","syllabus","syllabusURL","description","numStudents","classHome","fetchHomepage","homepageURL","e","gradebook","zeros","totalPoints","earnedPoints","gradedAssignments","assignmentHTML","gradeCalcSummary","gradebookExpanded","previousLetter","externalScreens","dashboard","stream","courseID"],"mappings":"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","sourceRoot":"/","sourcesContent":["/**\n * @file DTPS assignment functions\n * @author jottocraft\n * \n * @copyright Copyright (c) 2018-2020 jottocraft. All rights reserved.\n * @license GPL-2.0-only\n */\n\n/**\n * Renders HTML for an assignment item in a list\n * \n * @param {Assignment} assignment The assignment object to render\n * @return {string} Assignment HTML for use in a list\n */\ndtps.renderAssignment = function (assignment) {\n    //Render points/letter score\n    var scoreHTML = dtps.renderAssignmentScore(assignment);\n\n    var HTML = /*html*/`\n        <div \n            onclick=\"${`dtps.assignment('` + assignment.id + `', ` + assignment.class + `)`}\" \n            class=\"card ${scoreHTML ? \"graded assignment\" : \"assignment\"}\"\n            style=\"${'--classColor: ' + dtps.classes[assignment.class].color}\"\n        >\n\n            <!-- Color bar for the dashboard -->\n            <div class=\"colorBar\"></div>\n\n            <!-- Assignment title and points -->\n            <h4>\n                <span>${assignment.title}</span>\n\n                <!-- Points display -->\n                ${scoreHTML ? `<div class=\"points\">${scoreHTML}</div>` : ``}\n            </h4>\n\n            <h5 style=\"white-space: nowrap; overflow: hidden;\">\n                <!-- Assignment info -->\n                ${assignment.dueAt ? `<div class=\"infoChip\"><i style=\"margin-top: -2px;\" class=\"material-icons\">alarm</i> Due ` + dtps.formatDate(assignment.dueAt) + `</div>` : \"\"}\n                ${assignment.outcomes ? `<div class=\"infoChip weighted\"><i class=\"material-icons\">adjust</i>` + assignment.outcomes.length + `</div>` : \"\"}\n                ${assignment.category ? `<div class=\"infoChip weighted\"><i class=\"material-icons\">category</i> ` + assignment.category + `</div>` : \"\"}\n\n                <!-- Status icons -->\n                ${assignment.turnedIn ? `<i title=\"Assignment submitted\" class=\"material-icons statusIcon\" style=\"color: #0bb75b;\">assignment_turned_in</i>` : ``}\n                ${assignment.missing ? `<i title=\"Assignment is missing\" class=\"material-icons statusIcon\" style=\"color: #c44848;\">remove_circle_outline</i>` : ``}\n                ${assignment.late ? `<i title=\"Assignment is late\" class=\"material-icons statusIcon\" style=\"color: #c44848;\">assignment_late</i>` : ``}\n                ${assignment.locked ? `<i title=\"Assignment submissions are locked\" class=\"material-icons statusIcon\" style=\"font-family: 'Material Icons Extended'; color: var(--secText, gray);\">lock_outline</i>` : ``}\n                ${assignment.pending ? `<i title=\"Grade is pending review\" class=\"material-icons statusIcon\" style=\"color: #b3b70b;\">rate_review</i>` : ``}\n            </h5>\n        </div>\n    `;\n\n    return HTML;\n}\n\n/**\n* Renders HTML for an assignment score if the assignment is graded\n* \n* @param {Assignment} assignment The assignment object to render a score for\n* @return {string} Assignment score HTML\n*/\ndtps.renderAssignmentScore = function (assignment) {\n    var scoreHTML = \"\";\n\n    //Use rubric score over points score if possible\n    if (dtpsLMS.useRubricGrades && assignment.rubric) {\n        var rubricHTML = [];\n\n        assignment.rubric.forEach(rubricItem => {\n            if (rubricItem.score) {\n                rubricHTML.push(/*html*/`\n                    <div title=\"${rubricItem.title}\" style=\"color: ${rubricItem.color || \"var(--text)\"};\">\n                        ${rubricItem.score}\n                    </div>\n                `);\n            }\n        });\n\n        if (rubricHTML.length) scoreHTML = `<div class=\"dtpsRubricScore\">${rubricHTML.join(\"\")}</div>`;\n\n    } else if (!dtpsLMS.useRubricGrades && (assignment.grade || (assignment.grade == 0))) {\n        scoreHTML = /*html*/`\n            <div class=\"assignmentGrade\">\n                <div class=\"grade\">${assignment.grade}</div>\n                <div class=\"value\">/${assignment.value}</div>\n                ${assignment.letter ? `<div class=\"letter\">${assignment.letter.replace(\"incomplete\", `<i class=\"material-icons\">cancel</i>`).replace(\"complete\", `<i class=\"material-icons\">done</i>`)}</div>` : \"\"}\n                <div class=\"percentage\">${Math.round((assignment.grade / assignment.value) * 100)}%</div>\n            </div>\n        `;\n    }\n\n    return scoreHTML;\n}\n\n/**\n * Renders the DTPS dashboard and calls dtps.renderCalendar, dtps.renderUpdates, and dtps.renderUpcoming\n */\ndtps.masterStream = function () {\n    //Ensure classes are rendered in the sidebar\n    dtps.presentClass(\"dash\");\n    dtps.showClasses();\n\n    //Clear active state from all tabs\n    $(\"#dtpsTabBar .btn\").removeClass(\"active\");\n\n    //Count amount of classes that are loaded\n    var ready = 0;\n    dtps.classes.forEach(course => {\n        if (course.assignments) ready++;\n    });\n\n    //Check if all classes are loaded\n    var doneLoading = ready == dtps.classes.length;\n\n    //Returns dashboard item container HTML for an item\n    function dashboardContainerHTML(dashboardItem) {\n        if (dashboardItem.id == \"dtps.calendar\") {\n            return $.fullCalendar !== undefined ? `<div id=\"calendar\" class=\"card\" style=\"padding: 20px;\"></div>` : \"\";\n        } else if (dashboardItem.id == \"dtps.updates\") {\n            return `<div class=\"updatesStream recentlyGraded announcements\"></div>`;\n        } else if (dashboardItem.id == \"dtps.dueToday\") {\n            return `<div style=\"padding: 20px 0px;\" class=\"dueToday\"></div>`;\n        } else if (dashboardItem.id == \"dtps.upcoming\") {\n            return `<div style=\"padding: 20px 0px;\" class=\"assignmentStream\"></div>`;\n        }\n    }\n\n    //Render HTML with loading placeholder\n    if (dtps.selectedClass == \"dash\") {\n        jQuery(\".classContent\").html(/*html*/`\n            <div class=\"dash cal\" style=\"width: 40%;display: inline-block; vertical-align: top;\">\n                ${dtps.leftDashboard.map(dashboardItem => {\n            return dashboardContainerHTML(dashboardItem);\n        }).join(\"\")}\n            </div>\n\n            <div style=\"width: 59%; display: inline-block;\" class=\"dash stream\">\n                ${!doneLoading ? `<div style=\"margin: 75px 25px 10px 75px;\"><div class=\"spinner\"></div></div>` : \"\"}\n                ${dtps.rightDashboard.map(dashboardItem => {\n            return dashboardContainerHTML(dashboardItem);\n        }).join(\"\")}\n            </div>\n        `);\n    }\n\n    //Render updates stream\n    dtps.renderUpdates();\n\n    //Render upcoming assignments stream\n    dtps.renderUpcoming(doneLoading);\n\n    //Render calendar\n    dtps.calendar();\n\n    //Render due today\n    dtps.renderDueToday(doneLoading);\n}\n\n/**\n * Compiles and displays due today / to-do stream\n * \n * @param {boolean} doneLoading True if all classes have finished loading their assignment lists\n */\ndtps.renderDueToday = function (doneLoading) {\n    //Combine class stream arrays\n    var combinedStream = [];\n    if (dtps.classes) {\n        dtps.classes.forEach(course => {\n            if (course.assignments) {\n                //If course has assignments, add them to the combined stream array\n                course.assignments.forEach(assignment => {\n                    //Only assignments that are due today\n                    if (dtps.isToday(assignment.dueAt)) {\n                        combinedStream.push(assignment);\n                    }\n                })\n            }\n        })\n    }\n\n    //Sort combined stream by date\n    combinedStream.sort(function (a, b) {\n        var keyA = new Date(a.dueAt).getTime(),\n            keyB = new Date(b.dueAt).getTime();\n\n        // Compare the 2 dates\n        if (keyA > keyB) return 1;\n        if (keyA < keyB) return -1;\n        return 0;\n    });\n\n    //Get due today stream HTML\n    var combinedHTML = combinedStream.map(assignment => {\n        return dtps.renderAssignment(assignment);\n    }).join(\"\");\n\n    if (combinedStream.length == 0) {\n        //Nothing due today\n        if (doneLoading) {\n            combinedHTML = `<p style=\"text-align: center;margin: 10px 25px 10px 75px; font-size: 18px;\"><i class=\"material-icons\">done</i> Nothing due today</p>`;\n        } else {\n            combinedHTML = ``;\n        }\n    } else {\n        //Add header\n        combinedHTML = /*html*/`\n            <h5 style=\"text-align: center; margin: 10px 25px 10px 75px; font-weight: bold;\">Due today</h5>\n        ` + combinedHTML;\n    }\n\n    if (dtps.selectedClass == \"dash\") {\n        jQuery(\".classContent .dash .dueToday\").html(combinedHTML);\n    }\n}\n\n/**\n * Compiles and displays upcoming assignments stream\n */\ndtps.renderUpcoming = function () {\n    //Combine class stream arrays\n    var combinedStream = [];\n    if (dtps.classes) {\n        dtps.classes.forEach(course => {\n            if (course.assignments) {\n                //If course has assignments, add them to the combined stream array\n                course.assignments.forEach(assignment => {\n                    //Only include upcoming assignments that aren't due today\n                    if ((new Date(assignment.dueAt) > new Date()) && !dtps.isToday(assignment.dueAt)) {\n                        combinedStream.push(assignment);\n                    }\n                })\n            }\n        })\n    }\n\n    //Sort combined stream by date\n    combinedStream.sort(function (a, b) {\n        var keyA = new Date(a.dueAt).getTime(),\n            keyB = new Date(b.dueAt).getTime();\n\n        // Compare the 2 dates\n        if (keyA > keyB) return 1;\n        if (keyA < keyB) return -1;\n        return 0;\n    });\n\n    //Render upcoming assignments stream\n    var combinedHTML = combinedStream.map(assignment => {\n        return dtps.renderAssignment(assignment);\n    }).join(\"\");\n\n    //No upcoming assignments\n    if (combinedStream.length == 0) {\n        combinedHTML = \"\";\n    }\n\n    if (dtps.selectedClass == \"dash\") {\n        jQuery(\".classContent .dash .assignmentStream\").html(combinedHTML);\n    }\n}\n\n/**\n * Renders updates stream (recently graded & announcements)\n */\ndtps.renderUpdates = function () {\n    //Get updates HTML\n    var updatesHTML = \"\";\n\n    dtps.updates.forEach(update => {\n        if (update.type == \"announcement\") {\n            updatesHTML += /*html*/`\n                <div onclick=\"$(this).toggleClass('open');\" style=\"cursor: pointer; padding: 20px; --classColor: ${dtps.classes[update.class].color};\" class=\"announcement card\">\n                    <div class=\"className\">${update.title}</div>\n                    ${update.body}\n                </div>\n            `;\n        } else if (update.type == \"assignment\") {\n            var scoreHTML = dtps.renderAssignmentScore(update);\n            updatesHTML += /*html*/`\n                <div onclick=\"dtps.assignment('${update.id}', ${update.class})\" style=\"--classColor: ${dtps.classes[update.class].color};\" class=\"card recentGrade\">\n                    <h5>\n                        <span>${update.title}</span>\n\n                        <!-- Points display -->\n                        ${scoreHTML ? `<div class=\"points\">${scoreHTML}</div>` : ``}\n                    </h5>\n\n                    <p>Graded at ${dtps.formatDate(update.gradedAt)}</p>\n                </div>\n            `;\n        }\n    })\n\n    if (dtps.selectedClass == \"dash\") {\n        jQuery(\".classContent .dash .updatesStream\").html(updatesHTML);\n    }\n}\n\n\n/**\n * Compiles and displays the assignment calendar\n */\ndtps.calendar = function () {\n    if (dtps.selectedClass == \"dash\") {\n        //Calendar events array\n        var calEvents = [];\n\n        //Add assignments from every class to calEvents array\n        dtps.classes.forEach((course, courseIndex) => {\n            if (course.assignments) {\n                //Class has assignments\n                course.assignments.forEach(assignment => {\n                    calEvents.push({\n                        title: assignment.title,\n                        start: moment(new Date(assignment.dueAt)).toISOString(true),\n                        allDay: false,\n                        color: course.color,\n                        classNum: courseIndex,\n                        assignmentID: assignment.id\n                    });\n                });\n            }\n        });\n\n        //Render calendar\n        if ($.fullCalendar !== undefined) {\n            $('#calendar').fullCalendar({\n                events: calEvents,\n                header: {\n                    left: 'title',\n                    right: 'prev,next'\n                },\n                eventClick: function (calEvent, jsEvent, view) {\n                    dtps.assignment(calEvent.assignmentID, calEvent.classNum);\n                },\n                eventAfterAllRender: function () {\n                    $(\".fc-prev-button\").html(`<i class=\"material-icons\">keyboard_arrow_left</i>`);\n                    $(\".fc-next-button\").html(`<i class=\"material-icons\">keyboard_arrow_right</i>`);\n                }\n            });\n        }\n        $(\".fc-prev-button\").html(`<i class=\"material-icons\">keyboard_arrow_left</i>`);\n        $(\".fc-next-button\").html(`<i class=\"material-icons\">keyboard_arrow_right</i>`);\n\n    }\n}\n\n/**\n * Shows the assignments stream for a class\n * \n * @param {string} classID The class ID to show assignments for\n * @param {Assignment[]} [searchResults] An array of assignemnts to render instead of course.assignments. Used for assignment search.\n * @param {string} [searchText] Text to render in the search box. Used for assignment search.\n */\ndtps.classStream = function (classID, searchResults, searchText) {\n    //Get class index and set as selected class\n    var classNum = dtps.classes.map(course => course.id).indexOf(classID);\n    dtps.selectedClass = classNum;\n\n    //Set stream as the selected content\n    dtps.selectedContent = \"stream\";\n    $(\"#dtpsTabBar .btn\").removeClass(\"active\");\n    $(\"#dtpsTabBar .btn.stream\").addClass(\"active\");\n\n    //Load class color, name, etc.\n    dtps.presentClass(classNum);\n\n    //Ensure classes are shown in the sidebar\n    dtps.showClasses();\n\n    if (classNum == -1) {\n        //Class does not exist\n        dtps.error(\"The selected class doesn't exist\", \"classNum check failed @ dtps.classStream\");\n    }\n\n    //Use search results to render or render all class assignments\n    var assignments = searchResults || dtps.classes[classNum].assignments;\n\n    //Render assignments\n    if (!assignments) {\n        //Assignments are still loading\n        if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"stream\")) {\n            jQuery(\".classContent\").html(dtps.renderClassTools(classNum, \"stream\", searchText) + `<div class=\"spinner\"></div>`);\n        }\n    } else if (assignments.length == 0) {\n        if (searchText) {\n            //No search results\n            if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"stream\")) {\n                $(\".classContent\").html(/*html*/ dtps.renderClassTools(classNum, \"stream\", searchText) + `\n                    <div style=\"cursor: auto;\" class=\"card assignment\">\n                        <h4>No results</h4>\n                        <p>There weren't any search results</p>\n                        <button onclick=\"fluid.screen()\" class=\"btn\"><i class=\"material-icons\">arrow_back</i> Back</button>\n                    </div>\n                `);\n            }\n        } else {\n            //This class doesn't have any assignments\n            if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"stream\")) {\n                $(\".classContent\").html(dtps.renderClassTools(classNum, \"stream\", searchText) + `<div style=\"cursor: auto;\" class=\"card assignment\"><h4>No assignments</h4><p>There aren't any assignments in this class yet</p></div>`);\n            }\n        }\n    } else {\n        //Sort assignments\n        assignments.sort(function (a, b) {\n            var keyA = new Date(a.dueAt).getTime(),\n                keyB = new Date(b.dueAt).getTime();\n\n            var now = new Date().getTime();\n\n            //Put assignments without a due date at the end\n            if (!a.dueAt) { keyA = 0; }\n            if (!b.dueAt) { keyB = 0; }\n\n            //Put upcoming assignments at the top\n            if ((keyA < now) || (keyB < now)) {\n                // Sort upcoming assignments from earliest -> latest\n                if (keyA < keyB) return 1;\n                if (keyA > keyB) return -1;\n                return 0;\n            } else {\n                // Sort old assignments from latest -> earliest\n                if (keyA > keyB) return 1;\n                if (keyA < keyB) return -1;\n                return 0;\n            }\n        });\n\n        //Render assignments\n        var prevAssignment = null;\n        var streamHTML = assignments.map(assignment => {\n            var divider = \"\";\n\n            if (!assignment.dueAt) {\n                if (prevAssignment && (prevAssignment !== \"undated\")) {\n                    divider = `<h5 style=\"margin: 75px 75px 10px 75px;font-weight: bold;\">Undated Assignments</h5>`;\n                }\n\n                prevAssignment = \"undated\";\n            } else if (new Date(assignment.dueAt) < new Date()) {\n                if (prevAssignment && (prevAssignment !== \"old\")) {\n                    divider = `<h5 style=\"margin: 75px 75px 10px 75px;font-weight: bold;\">Old Assignments</h5>`;\n                }\n\n                prevAssignment = \"old\";\n            } else {\n                prevAssignment = \"upcoming\";\n            }\n\n            return divider + dtps.renderAssignment(assignment);\n        }).join(\"\");\n\n        //Add stream header with class info buttons and search box\n        streamHTML = dtps.renderClassTools(classNum, \"stream\", searchText) + streamHTML;\n\n        if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"stream\")) {\n            $(\".classContent\").html(streamHTML);\n        }\n    }\n}\n\n/**\n * Shows details for an assignment given the assignment ID and class number\n * \n * @param {string} id Assignment ID\n * @param {number} classNum Assignment class number\n */\ndtps.assignment = function (id, classNum) {\n    //Get assignment from the id prop\n    var assignmentIDs = dtps.classes[classNum].assignments.map(assignment => assignment.id);\n    var assignment = dtps.classes[classNum].assignments[assignmentIDs.indexOf(id)];\n\n    //The assignment body is rendered in an iFrame to keep its content and styling isolated from the rest of the page\n    var assignmentBodyURL = null;\n    if (assignment.body) {\n        //Get computed background and text color to style the iFrame with\n        var computedBackgroundColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--cards\");\n        var computedTextColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--text\");\n\n        //Generate a blob with the assignment body and get its data URL\n        var blob = new Blob([`\n                <base target=\"_blank\" /> \n                <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jottocraft.com/CanvasCSS.css\" media=\"screen,projection\"/>\n                <style>body {background-color: ${computedBackgroundColor}; color: ${computedTextColor};</style>\n                ${assignment.body}\n            `], { type: 'text/html' });\n        assignmentBodyURL = window.URL.createObjectURL(blob);\n    }\n\n    //Get assignment rubric HTML\n    var assignmentRubricHTML = \"\";\n    if (assignment.rubric) {\n        var assignmentRubricHTML = assignment.rubric.map(function (rubricItem) {\n            return /*html*/`\n                    <div class=\"dtpsAssignmentRubricItem\">\n                        <h5>${rubricItem.title}</h5>\n                        <div class=\"score\">\n                            <p style=\"color: ${rubricItem.color ? rubricItem.color : \"var(--secText)\"};\" class=\"scoreName\">\n                                ${rubricItem.score ? rubricItem.scoreName || \"\" : \"Not assessed\"}\n\n                                <div class=\"points\">\n                                    <p class=\"earned\">${rubricItem.score || \"-\"}</p>\n                                    <p class=\"possible\">${\"/\" + rubricItem.value}</p>\n                                </div>\n                            </p>\n                        </div>\n                    </div>\n                `\n        }).join(\"\");\n    }\n\n    //Get assignment feedback HTML\n    var assignmentFeedbackHTML = \"\";\n    if (assignment.feedback) {\n        var assignmentFeedbackHTML = assignment.feedback.map(feedback => {\n            return /*html*/`\n                    <div class=\"dtpsSubmissionComment\">\n                        ${feedback.author ? /*html*/`\n                            <img src=\"${feedback.author.photoURL}\" />\n                            <h5>${feedback.author.name}</h5>\n                        ` : ``}\n\n                        <p>${feedback.comment}</p>\n                    </div>\n                `\n        }).join(\"\");\n    }\n\n    //Get assignment score HTML\n    var scoreHTML = dtps.renderAssignmentScore(assignment);\n\n    //Render assignment details\n    $(\".card.details\").html(/*html*/`\n            <i onclick=\"fluid.cards.close('.card.details'); $('.card.details').html('');\" class=\"material-icons close\">close</i>\n\n            <h4 style=\"font-weight: bold;\">${assignment.title}</h4>\n\n            <div>\n                ${assignment.dueAt ? `<div class=\"assignmentChip\"><i class=\"material-icons\">alarm</i><span>Due ${dtps.formatDate(assignment.dueAt)}</span></div>` : \"\"}\n                ${assignment.turnedIn ? `<div title=\"Assignment submitted\" class=\"assignmentChip\" style=\"color: #0bb75b\"><i class=\"material-icons\">assignment_turned_in</i></div>` : \"\"}\n                ${assignment.missing ? `<div  title=\"Assignment is missing\" class=\"assignmentChip\" style=\"color: #c44848\"><i class=\"material-icons\">remove_circle_outline</i></div>` : \"\"}\n                ${assignment.late ? `<div title=\"Assignment is late\" class=\"assignmentChip\" style=\"color: #c44848\"><i class=\"material-icons\">assignment_late</i></div>` : \"\"}\n                ${assignment.locked ? `<div title=\"Assignment submissions are locked\" class=\"assignmentChip\" style=\"color: var(--secText, gray);\"><i style=\"font-family: 'Material Icons Extended';\" class=\"material-icons\">lock_outline</i></div>` : \"\"}\n                ${scoreHTML}\n            </div>\n\n            <div style=\"margin-top: 20px;\" class=\"assignmentBody\">\n                ${assignment.body ? `<iframe id=\"assignmentIframe\" onload=\"dtps.iframeLoad('assignmentIframe')\" style=\"margin: 10px 0px; width: 100%; border: none; outline: none;\" src=\"${assignmentBodyURL}\" />` : \"\"}\n            </div>\n\n            ${assignment.body ? `<div style=\"margin: 5px 0px; background-color: var(--darker); height: 1px; width: 100%;\" class=\"divider\"></div>` : \"\"}\n\n            <div style=\"width: calc(40% - 2px); margin-top: 20px; display: inline-block; overflow: hidden; vertical-align: top;\">\n                ${assignment.publishedAt ? `<p style=\"color: var(--secText); margin: 5px 0px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">add_box</i> Published: ${dtps.formatDate(assignment.publishedAt)}</p>` : \"\"}\n                ${assignment.dueAt ? `<p style=\"color: var(--secText); margin: 5px 0px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">alarm</i> Due: ${dtps.formatDate(assignment.dueAt)}</p>` : \"\"}\n                ${assignment.value ? `<p style=\"color: var(--secText); margin: 5px 0px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">bar_chart</i> Point value: ${assignment.value}</p>` : \"\"}\n                ${(assignment.grade || (assignment.grade == 0)) ? `<p style=\"color: var(--secText); margin: 5px 0px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">assessment</i> Points earned: ${assignment.grade}</p>` : \"\"}\n                ${assignment.letter ? `<p style=\"color: var(--secText); margin: 5px 0px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">font_download</i> Letter grade: ${assignment.letter}</p>` : \"\"}\n                ${assignment.category ? `<p style=\"color: var(--secText); margin: 5px 0px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">category</i> Category: ${assignment.category}</p>` : \"\"}\n                ${assignment.rubric ? assignment.rubric.map(function (rubricItem) { return `<p style=\"color: var(--secText); margin: 5px 0px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">adjust</i> ${rubricItem.title}</p>`; }).join(\"\") : \"\"}\n                <p style=\"color: var(--secText); margin: 5px 0px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">class</i> Class: ${dtps.classes[assignment.class].subject}</p>\n                ${dtps.env == \"dev\" ? `<p style=\"color: var(--secText); margin: 5px 0px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">code</i> Assignment ID: ${assignment.id}</p>` : \"\"}\n\n                <br />\n                <div class=\"row\">\n                    ${assignment.url ? `<div class=\"btn small outline\" onclick=\"window.open('${assignment.url}')\"><i class=\"material-icons\">open_in_new</i> Open in ${dtpsLMS.shortName || dtpsLMS.name}</div>` : ``}\n                </div>\n            </div>\n\n            <div style=\"width: calc(60% - 7px); margin-top: 20px; margin-left: 5px; display: inline-block; overflow: hidden; vertical-align: middle;\">\n                ${assignmentFeedbackHTML}\n\n                ${assignmentRubricHTML}\n            </div>\n        `);\n\n    //Close other active cards and open the assignment details card\n    fluid.cards.close(\".card.focus\");\n    fluid.modal(\".card.details\");\n}\n\n/**\n * Searches the assignment stream for a keyword using Fuse.js\n */\ndtps.search = function () {\n    if ($(\"input.search\").val() == \"\") {\n        fluid.screen();\n    } else {\n        var input = $(\"input.search\").val();\n        var search = new Fuse(dtps.classes[dtps.selectedClass].assignments, {\n            keys: [\"title\", \"body\"]\n        });\n        dtps.classStream(dtps.classes[dtps.selectedClass].id, search.search(input), input);\n    }\n}\n\n/**\n * Shows the module stream for a class\n * \n * @param {string} classID Class number to fetch modules for\n */\ndtps.moduleStream = function (classID) {\n    //Get class index and set as selected class\n    var classNum = dtps.classes.map(course => course.id).indexOf(classID);\n    dtps.selectedClass = classNum;\n\n    //Set stream as the selected content\n    dtps.selectedContent = \"moduleStream\";\n    $(\"#dtpsTabBar .btn\").removeClass(\"active\");\n    $(\"#dtpsTabBar .btn.stream\").addClass(\"active\");\n\n    //Load class color, name, etc.\n    dtps.presentClass(classNum);\n\n    //Ensure classes are shown in the sidebar\n    dtps.showClasses();\n\n    if (classNum == -1) {\n        //Class does not exist\n        dtps.error(\"The selected class doesn't exist\", \"classNum check failed @ dtps.moduleStream\");\n    }\n\n    //Show loading indicator\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"moduleStream\")) {\n        jQuery(\".classContent\").html(dtps.renderClassTools(classNum, \"modules\") + `<div class=\"spinner\"></div>`);\n    }\n\n    new Promise(resolve => {\n        if (dtps.classes[classNum].modules && (dtps.classes[classNum].modules !== true)) {\n            resolve(dtps.classes[classNum].modules);\n        } else {\n            dtpsLMS.fetchModules(dtps.classes[classNum].id).then(data => resolve(data));\n        }\n    }).then(data => {\n        //Save modules data in the class object for future use\n        dtps.classes[classNum].modules = data;\n\n        var modulesHTML = dtps.renderClassTools(classNum, \"modules\");\n\n        data.forEach(module => {\n            var moduleItemHTML = \"\";\n\n            //Get HTML for each module item\n            module.items.forEach(item => {\n                //Get module item icon\n                var icon = \"list\";\n                if (item.type == \"assignment\") icon = \"assignment\";\n                if (item.type == \"page\") icon = \"insert_drive_file\";\n                if (item.type == \"discussion\") icon = \"forum\";\n                if (item.type == \"url\") icon = \"open_in_new\";\n                if (item.type == \"header\") icon = \"format_size\";\n                if (item.type == \"embed\") icon = \"web\";\n\n                //Get module action\n                var action = \"\";\n                if (item.type == \"assignment\") action = \"dtps.assignment('\" + item.id + \"', \" + classNum + \")\";\n                if (item.type == \"page\") {\n                    if (dtps.classes[classNum].pages) {\n                        action = \"fluid.screen('pages', '\" + classID + \"|\" + item.id + \"')\";\n                    } else {\n                        action = \"window.open('\" + item.url + \"')\";\n                    }                 \n                }  \n                if (item.type == \"discussion\") {\n                    if (dtps.classes[classNum].discussions) {\n                        action = \"fluid.screen('discussions', '\" + classID + \"|\" + item.id + \"')\";\n                    } else {\n                        action = \"window.open('\" + item.url + \"')\";\n                    }\n                }\n                if (item.type == \"url\") action = \"window.open('\" + item.url + \"')\";\n                if (item.type == \"header\") action = \"\";\n                if (item.type == \"embed\") action = \"dtps.showIFrameCard('\" + item.url + \"')\";\n\n                //Get module HTML\n                if (item.type == \"header\") {\n                    moduleItemHTML += `<h5 style=\"font-size: 22px;padding: 2px 10px;\">${item.title}</h5>`;\n                } else {\n                    moduleItemHTML += `\n                        <div class=\"moduleItem\" onclick=\"${action}\" style=\"margin-left: ${item.indent * 15}px;\">\n                            <i class=\"material-icons\">${icon}</i>\n                            ${item.title}\n                        </div>\n                    `;\n                }\n            });\n\n            //Add HTML for this module to the string\n            modulesHTML += /*html*/`\n                <div class=\"module card ${module.collapsed ? \"collapsed\" : \"\"}\">\n                    <h4>\n                        <i onclick=\"dtps.moduleCollapse(this, '${dtps.classes[classNum].id}', '${module.id}');\" \n                            class=\"material-icons collapseIcon\">${module.collapsed ? \"keyboard_arrow_right\" : \"keyboard_arrow_down\"}</i>\n                        ${module.title}\n                    </h4>\n\n                    <div class=\"moduleContents\" style=\"padding-top: 10px;\">\n                        ${moduleItemHTML}\n                    </div>\n                </div>\n            `;\n        });\n\n        if (data.length == 0) {\n            modulesHTML += `<div style=\"cursor: auto;\" class=\"card assignment\"><h4>No modules</h4><p>There aren't any modules in this class yet</p></div>`;\n        }\n\n        //Render module HTML\n        if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"moduleStream\")) {\n            jQuery(\".classContent\").html(modulesHTML);\n        }\n    }).catch(err => {\n        dtps.error(\"Could not load modules\", \"Caught promise rejection @ dtps.moduleStream\", err);\n    });\n}\n\n/**\n * Collapses a module\n * \n * @param {Element} ele Element of the module collapse arrow\n * @param {string} classID Class ID\n * @param {string} modID Module ID of the module to collapse\n */\ndtps.moduleCollapse = function (ele, classID, modID) {\n    //Add collapsed class to module card\n    $(ele).parents('.card').toggleClass('collapsed');\n\n    //Update arrow icon and, if the LMS supports it, collapse the module in the LMS as well\n    if ($(ele).parents('.card').hasClass('collapsed')) {\n        if (dtpsLMS.collapseModule) dtpsLMS.collapseModule(classID, modID, true);\n        $(ele).html('keyboard_arrow_right');\n    } else {\n        if (dtpsLMS.collapseModule) dtpsLMS.collapseModule(classID, modID, false);\n        $(ele).html('keyboard_arrow_down');\n    }\n\n}\n\n/**\n * Gets stream tools HTML (search box, class info, and modules/assignment switcher)\n * \n * @param {number} num Class number\n * @param {string} type Class content these tools are for (e.g. \"stream\")\n * @param {string} [searchText] Text to render in the search box for assignment search\n * @return {string} Stream tools HTML\n */\ndtps.renderClassTools = function (num, type, searchText) {\n    var modulesSelector = dtps.classes[num].modules;\n    return /*html*/`\n        <div style=\"position: absolute;display:inline-block;margin: ${modulesSelector ? \"82px\" : \"38px 82px\"};\">\n\n            ${dtps.classes[num].teacher ? /*html*/`\n                <div class=\"acrylicMaterial\" style=\"border-radius: 20px; display: inline-block; margin-right: 5px;\">\n                    <img src=\"${dtps.classes[num].teacher.photoURL}\" style=\"width: 40px; height: 40px; border-radius: 50%;vertical-align: middle;\"> \n                    <div style=\"font-size: 16px;display: inline-block;vertical-align: middle;margin: 0px 10px;\">${dtps.classes[num].teacher.name}</div>\n                </div>` : ``\n        }\n\n            <div onclick=\"dtps.classInfo(${num})\" class=\"acrylicMaterial\" style=\"border-radius: 50%; height: 40px; width: 40px; text-align: center; display: inline-block; vertical-align: middle; cursor: pointer; margin-right: 3px;\">\n                <i style=\"line-height: 40px;\" class=\"material-icons\">info</i>\n            </div>\n\n            ${dtps.classes[num].homepage ? /*html*/`\n                <div onclick=\"dtps.classHome(${num})\" class=\"acrylicMaterial\" style=\"border-radius: 50%; height: 40px; width: 40px; text-align: center; display: inline-block; vertical-align: middle; cursor: pointer; margin-right: 3px;\">\n                    <i style=\"line-height: 40px;\" class=\"material-icons\">home</i>\n                </div>` : \"\"\n        }\n\n        ${dtps.classes[num].videoMeetingURL ? /*html*/`\n                <div onclick=\"window.open('${dtps.classes[num].videoMeetingURL}')\" class=\"acrylicMaterial\" style=\"border-radius: 50%; height: 40px; width: 40px; text-align: center; display: inline-block; vertical-align: middle; cursor: pointer; margin-right: 3px;\">\n                    <i style=\"line-height: 40px;\" class=\"material-icons\">videocam</i>\n                </div>` : \"\"\n        }\n\n        </div>\n        \n        ${(type == \"modules\") || (type == \"stream\") ? /*html*/`\n            <div style=\"text-align: right;${modulesSelector ? \"\" : \"margin-top: 20px;\"}\">\n\n                ${type == \"stream\" ? `<i class=\"inputIcon material-icons\">search</i><input ${searchText ? `value=\"${searchText}\"` : ``} onchange=\"dtps.search()\" class=\"search inputIcon filled shadow\" placeholder=\"Search assignments\" type=\"search\" />` : \"\"}\n\n                <br />\n                ${modulesSelector ? /*html*/`\n                    <div class=\"btns row small acrylicMaterial assignmentPicker\" style=\"margin: ${type == \"stream\" ? `20px 80px 20px 0px !important` : `63px 80px 20px 0px !important`};\">\n                        <button class=\"btn ${type == \"stream\" ? \"active\" : \"\"}\" onclick=\"fluid.screen('stream', dtps.classes[dtps.selectedClass].id);\"><i class=\"material-icons\">assignment</i>Assignments</button>\n                        <button class=\"btn ${type == \"modules\" ? \"active\" : \"\"}\" onclick=\"fluid.screen('moduleStream', dtps.classes[dtps.selectedClass].id);\"><i class=\"material-icons\">view_module</i>Modules</button>\n                    </div>\n                ` : ``}\n                \n            </div>` : ``\n        }\n    `;\n}\n\n/**\n * Displays class info & syllabus card\n * \n * @param {number} num Class number to show info for\n */\ndtps.classInfo = function (num) {\n    //Get syllabus blob if the class has a syllabus\n    if ((dtps.classes[num].syllabus !== \"\") && dtps.classes[num].syllabus !== null) {\n        //Get computed background and text color to style the iFrame with\n        var computedBackgroundColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--cards\");\n        var computedTextColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--text\");\n\n        //Generate a blob with the assignment body and get its data URL\n        var blob = new Blob([`\n            <base target=\"_blank\" /> \n            <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jottocraft.com/CanvasCSS.css\" media=\"screen,projection\"/>\n            <style>body {background-color: ${computedBackgroundColor}; color: ${computedTextColor};</style>\n            ${dtps.classes[num].syllabus}\n        `], { type: 'text/html' });\n        var syllabusURL = window.URL.createObjectURL(blob);\n    }\n\n    //Show class info HTML\n    $(\".card.details\").html(/*html*/`\n        <i onclick=\"fluid.cards.close('.card.details')\" class=\"material-icons close\">close</i>\n\n        <h4 style=\"font-weight: bold;\">${dtps.classes[num].name}</h4>\n        <p style=\"color: var(--secText)\">${dtps.classes[num].description || \"\"}</p>\n\n        ${dtps.classes[num].numStudents ? `<div class=\"assignmentChip\"><i class=\"material-icons\">group</i><span>${dtps.classes[num].numStudents} students</span></div>` : ``}\n        ${dtps.env == \"dev\" ? `<div class=\"assignmentChip\"><i class=\"material-icons\">code</i><span>Class ID: ${dtps.classes[num].id}</span></div>` : ``}\n    \n        <br />\n\n        <div style=\"margin-top: 20px;\" class=\"syllabusBody\">\n            ${dtps.classes[num].syllabus ? `\n                <iframe id=\"syllabusIframe\" onload=\"dtps.iframeLoad('syllabusIframe')\" style=\"margin: 10px 0px; width: 100%; border: none; outline: none;\" src=\"${syllabusURL}\" />` : \"\"}\n        </div>\n    `)\n\n    //Show the class info card\n    fluid.modal(\".card.details\")\n}\n\n/**\n * Displays the class homepage\n * \n * @param {number} num Class number to show the homepage for\n */\ndtps.classHome = function (num) {\n    //Render loading screen\n    $(\".card.details\").html(/*html*/`\n        <i onclick=\"fluid.cards.close('.card.details')\" class=\"material-icons close\">close</i>\n        <h4 style=\"font-weight: bold;\">${dtps.classes[num].subject} Homepage</h4>\n\n        <br />\n        <p>Loading...</p>\n    `);\n\n    //Fetch homepage from the LMS\n    dtpsLMS.fetchHomepage(dtps.classes[num].id).then(homepage => {\n        if (homepage) {\n            //Get computed background and text color to style the iFrame with\n            var computedBackgroundColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--cards\");\n            var computedTextColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--text\");\n\n            //Generate a blob with the assignment body and get its data URL\n            var blob = new Blob([`\n                <base target=\"_blank\" /> \n                <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jottocraft.com/CanvasCSS.css\" media=\"screen,projection\"/>\n                <style>body {background-color: ${computedBackgroundColor}; color: ${computedTextColor};</style>\n                ${homepage}\n            `], { type: 'text/html' });\n            var homepageURL = window.URL.createObjectURL(blob);\n\n            $(\".card.details\").html(/*html*/`\n                <i onclick=\"fluid.cards.close('.card.details')\" class=\"material-icons close\">close</i>\n\n                <h4 style=\"font-weight: bold;\">${dtps.classes[num].subject} Homepage</h4>\n\n                <br />\n                <div style=\"margin-top: 20px;\" class=\"homepageBody\">\n                    <iframe id=\"homepageIframe\" onload=\"dtps.iframeLoad('homepageIframe')\" style=\"margin: 10px 0px; width: 100%; border: none; outline: none;\" src=\"${homepageURL}\" />\n                </div>\n            `);\n\n            fluid.modal(\".card.details\");\n        } else {\n            fluid.cards.close('.card.details');\n            dtps.error(\"Homepage unavailable\", \"homepage is either empty or undefined @ dtps.classHome\");\n        }\n    }).catch(e => {\n        dtps.error(\"Couldn't load homepage\", \"Caught a promise rejection @ dtps.classHome\", e);\n    })\n}\n\n/**\n * Shows the generic gradebook\n * \n * @param {string} classID Class ID\n */\ndtps.gradebook = function (classID) {\n    //Get class index and set as selected class\n    var classNum = dtps.classes.map(course => course.id).indexOf(classID);\n    dtps.selectedClass = classNum;\n\n    //Set stream as the selected content\n    dtps.selectedContent = \"grades\";\n    $(\"#dtpsTabBar .btn\").removeClass(\"active\");\n    $(\"#dtpsTabBar .btn.grades\").addClass(\"active\");\n\n    //Load class color, name, etc.\n    dtps.presentClass(classNum);\n\n    //Ensure classes are shown in the sidebar\n    dtps.showClasses();\n\n    if (classNum == -1) {\n        //Class does not exist\n        dtps.error(\"The selected class doesn't exist\", \"classNum check failed @ dtps.gradebook\");\n    }\n\n    //Show loading indicator\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"grades\")) {\n        jQuery(\".classContent\").html(`<div class=\"spinner\"></div>`);\n    }\n\n    //Terminate function if the class doesn't have a letter grade or assignments\n    if (!dtps.classes[classNum].letter || !dtps.classes[classNum].assignments) {\n        return;\n    }\n\n    //Define variables for total points and zeros\n    var zeros = 0;\n    var totalPoints = 0;\n    var earnedPoints = 0;\n    var gradedAssignments = 0;\n\n    //Define variable for assignment HTML string\n    var assignmentHTML = \"\";\n\n    //Calculate total points and zeros\n    dtps.classes[classNum].assignments.forEach(assignment => {\n        if (assignment.grade || (assignment.grade == 0)) {\n            earnedPoints += assignment.grade;\n            gradedAssignments++;\n\n            assignmentHTML += /*html*/`\n                <div onclick=\"dtps.assignment('${assignment.id}', ${classNum})\" class=\"gradebookAssignment card\">\n                    <h5>\n                        ${assignment.title}\n\n                        <div class=\"stats\">\n                            ${assignment.letter ? `<div class=\"gradebookLetter\">${assignment.letter}</div>` : \"\"}\n                            <div class=\"gradebookScore\">${assignment.grade}</div>\n                            <div class=\"gradebookValue\">/${assignment.value}</div>\n                            <div class=\"gradebookPercentage\">${Math.round((assignment.grade / assignment.value) * 100)}%</div>\n                        </div>\n                    </h5>\n                </div>\n            `;\n        }\n\n        if (assignment.value) {\n            totalPoints += assignment.value;\n        }\n\n        if ((assignment.grade == 0) && assignment.value) {\n            zeros++;\n        }\n    })\n\n    //Grade calculation summary\n    var gradeCalcSummary = /*html*/`\n        <div style=\"--classColor: ${dtps.classes[classNum].color}\" class=\"card\">\n            <h3 class=\"gradeTitle\">\n                Grade Summary\n                <div class=\"classGradeCircle\">\n                    ${dtps.classes[classNum].grade ? `<span class=\"percentage\">${dtps.classes[classNum].grade}%</span>` : ``}\n                    <div class=\"letter\">${dtps.classes[classNum].letter || ``}</div>\n                </div>\n            </h3>\n\n            ${zeros ? /*html*/`\n                <h5 style=\"color: #d63d3d;\" class=\"gradeStat\">\n                    Zeros\n                    <div style=\"color: #d63d3d;\" class=\"numFont\">${zeros}</div>\n                </h5>\n            ` : ``}\n\n            <div style=\"${dtps.gradebookExpanded ? \"\" : \"display: none;\"}\" id=\"classGradeMore\">\n                <br />\n\n                ${dtps.classes[classNum].previousLetter ? /*html*/`\n                    <h5 class=\"smallStat\">\n                        Previous Grade\n                        <div class=\"numFont\">${dtps.classes[classNum].previousLetter}</div>\n                    </h5>\n                ` : ``}\n\n                <h5 class=\"smallStat\">\n                    Points\n                    <div class=\"numFont fraction\">\n                        <span class=\"earned\">${earnedPoints}</span>\n                        <span class=\"total\">/${totalPoints}</span>\n                    </div>\n                </h5>\n\n                <h5 class=\"smallStat\">\n                    Graded Assignments\n                    <div class=\"numFont\">${gradedAssignments}</div>\n                </h5>\n            </div>\n\n            <br />\n            <a onclick=\"$('#classGradeMore').toggle(); if ($('#classGradeMore').is(':visible')) {$(this).html('Show less'); dtps.gradebookExpanded = true;} else {$(this).html('Show more'); dtps.gradebookExpanded = false;}\"\n                style=\"color: var(--secText, gray); cursor: pointer; margin-right: 10px;\">${dtps.gradebookExpanded ? \"Show less\" : \"Show more\"}</a>\n        </div>\n\n        <br />\n    `;\n\n\n    //Render HTML\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"grades\")) {\n        $(\".classContent\").html(gradeCalcSummary + assignmentHTML);\n    }\n}\n\n//Fluid UI screen definitions\nfluid.externalScreens.dashboard = () => {\n    dtps.masterStream();\n}\n\nfluid.externalScreens.stream = (courseID) => {\n    dtps.classStream(courseID);\n}\n\nfluid.externalScreens.moduleStream = (courseID) => {\n    dtps.moduleStream(courseID);\n}\n\nfluid.externalScreens.gradebook = (courseID) => {\n    dtps.gradebook(courseID);\n}\n\n//Type definitions\n\n/**\n* @typedef {Object} Assignment\n* @description Defines assignments objects in DTPS\n* @property {string} title Title of the assignment\n* @property {string} [body] HTML of the assignment's body\n* @property {string} id Assignment ID\n* @property {Date} [dueAt] Assignment due date\n* @property {string} [url] Assignment URL\n* @property {AssignmentFeedback[]} [feedback] Feedback / private comments for this assignment\n* @property {User} [grader] Assignment grader\n* @property {boolean} [turnedIn] True if the assignment is turned in\n* @property {boolean} [late] True if the assignment is late\n* @property {boolean} [missing] True if the assignment is missing\n* @property {boolean} [locked] True if assignment submissions are locked\n* @property {string} [category] Assignment category\n* @property {Date} [publishedAt] Date for when the assignment was published\n* @property {Date} [gradedAt] Date for when the assignment was graded\n* @property {number} [grade] Points earned on this assignment\n* @property {string} [letter] Letter grade on this assignment\n* @property {number} [value] Total amount of points possible for this assignment\n* @property {RubricItem[]} [rubric] Assignment rubric\n*/\n\n/**\n* @typedef {Object} Module\n* @description Defines module objects in DTPS\n* @property {string} title Title of the module\n* @property {string} id Module ID\n* @property {boolean} [collapsed] True if the module is collapsed, false otherwise. undefined or null if this module does not support collapsing.\n* @property {ModuleItem[]} items An array of items for this module.\n*/\n\n/**\n * @typedef {Object} ModuleItem\n * @description Defines module items in DTPS\n * @property {string} type Either \"assignment\", \"page\", \"discussion\", \"url\", \"embed\", or \"header\".\n * @property {string} [title] Required for URL and header items, and can be used to override the title of assignment, page, and discussion items.\n * @property {string} [id] Required for assignment, page, and discussion items.\n * @property {string} [url] Required for URL and embed items. Required for discussion and page items if the class does not support the pages or discussions feature.\n * @property {number} [indent] Indent level\n */\n\n/**\n* @typedef {Object} Announcement\n* @description Defines announcement objects in DTPS\n* @property {string} title Title of the announcement\n* @property {Date} postedAt Date when the announcement was posted\n* @property {string} body Announcement content\n*/\n\n/**\n* @typedef {Object} AssignmentFeedback\n* @description Defines assignment feedback objects in DTPS\n* @property {string} comment Feedback comment\n* @property {User} [author] Feedback author\n*/\n\n/**\n* @typedef {Object} RubricItem\n* @description Defines rubric item objects in DTPS\n* @property {string} title Title of the rubric item\n* @property {string} id Rubric item ID (only needs to be unique to this assignment)\n* @property {number} value Total amount of points possible\n* @property {string} [outcome] The ID of the outcome this rubric item is assessing. This is only used for grade calculation.\n* @property {string} [description] Rubric item description\n* @property {number} [score] Rubric assessment score in points\n* @property {string} [scoreName] Rubric assessment score name\n* @property {string} [color] Score color in a CSS color format\n*/\n\n/**\n * @typedef {Object} DashboardItem\n * @description Defines dashboard items in DTPS\n * @property {string} name Dashbord item name\n * @property {string} id Unique dashboard item ID\n * @property {string} icon Dashboard item icon\n * @property {boolean} supportsCompactMode True if this dashboard item supports compact mode\n * @property {number} size The approximate size of this dashboard item relative to other dashboard items. Should be no less than 20.\n * @property {string} defaultSide The default side of this dashboard item. Either \"right\" or \"left\".\n * @property {boolean} compact True if the user has turned on compact mode for this item.\n */"]}