{"version":3,"sources":["pages-discussions.js"],"names":["dtps","loadThreadsList","courseID","defaultThread","classNum","classes","map","course","id","indexOf","selectedClass","selectedContent","$","removeClass","addClass","error","presentClass","jQuery","html","dtpsLMS","fetchDiscussionThreads","then","threadData","discussions","length","discussionHTML","discussionThread","title","locked","join","newDiscussionThreadURL","loadThreadPosts","click","event","this","siblings","postID","attr","catch","err","threadID","thread","forEach","fetchDiscussionPosts","postData","posts","postHTML","post","index","computedBackgroundColor","getComputedStyle","getPropertyValue","computedTextColor","blob","Blob","body","type","discussionPostContentURL","window","URL","createObjectURL","replyHTML","replies","push","reply","depth","author","photoURL","name","replyURL","formatDate","postedAt","requireInitialPost","loadPagesList","defaultPage","fetchPages","pagesData","pages","pageHTML","page","loadPage","pageID","pageCheck","fetchPageContent","pageContentData","content","pageContentURL","updatedAt","fluid","externalScreens","param","split"],"mappings":"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","sourcesContent":["/**\r\n * @file DTPS pages & discussion functions\r\n * @author jottocraft\r\n * \r\n * @copyright Copyright (c) 2018-2020 jottocraft. All rights reserved.\r\n * @license GPL-2.0-only\r\n */\r\n\r\n\r\n/**\r\n * Renders the discussions list for a class\r\n * \r\n * @param {string} courseID The course ID to render discussion threads for\r\n * @param {string} [defaultThread] The thread to load by default\r\n */\r\ndtps.loadThreadsList = function (courseID, defaultThread) {\r\n    //Get class index and set as selected class\r\n    var classNum = dtps.classes.map(course => course.id).indexOf(courseID);\r\n    dtps.selectedClass = classNum;\r\n\r\n    //Set discussions as the selected content\r\n    dtps.selectedContent = \"discuss\";\r\n    $(\"#dtpsTabBar .btn\").removeClass(\"active\");\r\n    $(\"#dtpsTabBar .btn.discuss\").addClass(\"active\");\r\n\r\n    if (classNum == -1) {\r\n        //Class does not exist\r\n        dtps.error(\"The selected class doesn't exist\", \"classNum check failed @ dtps.loadThreadsList\");\r\n    }\r\n\r\n    //Load class color and things\r\n    dtps.presentClass(classNum);\r\n    jQuery(\"body\").removeClass(\"collapsedSidebar\");\r\n\r\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"discuss\")) {\r\n        //Render sidebar\r\n        jQuery(\".sidebar\").html(/*html*/`\r\n            <div class=\"bigLogo\" style=\"text-align: center; margin: 10px 0 20px; height: 38px;\">\r\n                <i style=\"font-size: 28px; margin-right: 7px; vertical-align: middle;\" class=\"material-icons\">forum</i>\r\n                <h4 style=\"color: var(--text); display: inline-block; font-size: 28px; vertical-align: middle; margin: 0px;\">Discussions</h4>\r\n            </div>\r\n                        \r\n            <div class=\"items\">\r\n                <div class=\"spinner\"></div>\r\n            </div>\r\n        `);\r\n\r\n        //Delete existing class content HTML\r\n        jQuery(\".classContent\").html(\"\");\r\n    }\r\n\r\n    //Fetch discussion thread data\r\n    dtpsLMS.fetchDiscussionThreads(dtps.classes[classNum].id).then(function (threadData) {\r\n        //Store fetched data to the selected class\r\n        dtps.classes[classNum].discussions = threadData;\r\n\r\n        if (dtps.classes[classNum].discussions.length == 0) {\r\n            //No discussion topics in this class\r\n            jQuery(\".sidebar .items\").html(/*html*/`\r\n                <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"class item main back\">\r\n                    <span class=\"label\">Classes</span>\r\n                    <div class=\"icon\">\r\n                        <i class=\"material-icons\">keyboard_arrow_left</i>\r\n                    </div>\r\n                </div>\r\n\r\n                <p style=\"text-align: center; font-weight: bold; margin-top: 60px;\">No discussions found</p>\r\n                <p style=\"text-align: center; font-size: 14px;\">This class doesn't have any discussions</p>\r\n            `);\r\n        } else {\r\n            //Loop over discusson threads array to create discussion thread HTML for the sidebar\r\n            var discussionHTML = dtps.classes[classNum].discussions.map(discussionThread => {\r\n                return /*html*/`\r\n                    <div data-threadID=\"${discussionThread.id}\" class=\"item\">\r\n                        <span class=\"label\">${discussionThread.title}</span>\r\n                        <div class=\"icon\">\r\n                            <i style=\"font-family: 'Material Icons Extended';\" class=\"material-icons\">${discussionThread.locked ? \"lock_outline\" : \"chat_bubble_outline\"}</i>\r\n                        </div>\r\n                    </div>\r\n                `;\r\n            }).join(\"\");\r\n\r\n            //Render discussion threads in the sidebar\r\n            if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"discuss\")) {\r\n                jQuery(\".sidebar .items\").html(/*html*/`\r\n                    <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"class item main back\">\r\n                        <span class=\"label\">Classes</span>\r\n                        <div class=\"icon\">\r\n                            <i class=\"material-icons\">keyboard_arrow_left</i>\r\n                        </div>\r\n                    </div>\r\n\r\n                    ${\r\n                    dtps.classes[classNum].newDiscussionThreadURL ? (/*html*/`\r\n                            <div onclick=\"window.open('${dtps.classes[classNum].newDiscussionThreadURL}')\" class=\"class item back\">\r\n                                <span class=\"label\">New discussion</span>\r\n                                <div class=\"icon\">\r\n                                    <i class=\"material-icons\">add</i>\r\n                                </div>\r\n                            </div>\r\n                        `) : \"\"\r\n                    }\r\n\r\n                    <div class=\"divider\"></div>\r\n\r\n                    ${discussionHTML}\r\n                `);\r\n\r\n                //Load default thread if provided\r\n                if (defaultThread) {\r\n                    dtps.loadThreadPosts(classNum, defaultThread);\r\n                }\r\n\r\n                //Add click event listeners for discussion threads\r\n                $(\".sidebar .item:not(.back)\").click(function (event) {\r\n                    //Show the selected thread as active\r\n                    $(this).siblings().removeClass(\"active\");\r\n                    $(this).addClass(\"active\");\r\n\r\n                    //Get thread ID from HTML attribute\r\n                    var postID = $(this).attr(\"data-threadID\");\r\n\r\n                    //Load the thread\r\n                    dtps.loadThreadPosts(classNum, postID);\r\n                });\r\n            }\r\n        }\r\n\r\n    }).catch(function (err) {\r\n        dtps.error(\"Couldn't fetch discussion threads\", \"Caught promise rejection @ dtps.loadThreadsList\", err);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetches and displays posts in a discussion\r\n * \r\n * @param {number} classNum The class number to render\r\n * @param {string} threadID The discussion thread to render\r\n */\r\ndtps.loadThreadPosts = function (classNum, threadID) {\r\n    //Show loading indicator\r\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"discuss\")) {\r\n        jQuery(\".classContent\").html(`<div class=\"spinner\"></div>`);\r\n    }\r\n\r\n    //Get discussion data\r\n    var thread = null;\r\n    dtps.classes[classNum].discussions.forEach(discussionThread => {\r\n        if (discussionThread.id == threadID) {\r\n            thread = discussionThread;\r\n        }\r\n    });\r\n\r\n    if (!thread) {\r\n        dtps.error(\"Thread does not exist\", \"thread is null @ dtps.loadThreadPosts\");\r\n        throw null;\r\n    }\r\n\r\n    //Fetch discussion posts from the LMS\r\n    dtpsLMS.fetchDiscussionPosts(dtps.classes[classNum].id, threadID).then(function (postData) {\r\n        //Store posts in the discussion thread\r\n        thread.posts = postData;\r\n\r\n        //Post HTML array\r\n        var postHTML = [];\r\n\r\n        thread.posts.forEach((post, index) => {\r\n            //Get background and text color for iFrame content\r\n            var computedBackgroundColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--cards\");\r\n            var computedTextColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--text\");\r\n\r\n            //Create a new blob data URL with the post's content\r\n            var blob = new Blob([`\r\n                    <base target=\"_blank\" /> \r\n                    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jottocraft.com/CanvasCSS.css\" media=\"screen,projection\"/>\r\n                    <style>body {background-color: ${computedBackgroundColor}; color: ${computedTextColor};</style>\r\n                    ${post.body}\r\n                `], { type: 'text/html' });\r\n            var discussionPostContentURL = window.URL.createObjectURL(blob);\r\n\r\n            //Create HTML for replies\r\n            var replyHTML = [];\r\n            if (post.replies) {\r\n                //Add space above replies\r\n                replyHTML.push(`<br />`);\r\n\r\n                //Get HTML for each reply and add to array\r\n                post.replies.forEach(reply => {\r\n                    replyHTML.push(/*html*/`\r\n                        <div style=\"margin-left: ${(reply.depth || 0) * 50}px;\" class=\"discussionReply\">\r\n                            <div class=\"discussionHeader\">\r\n                                ${post.author ? /*html*/`\r\n                                    <img src=\"${reply.author.photoURL}\" />\r\n                                    <h5>${reply.author.name}</h5>\r\n                                ` : ``}\r\n                                \r\n                                <span style=\"cursor: pointer;\" onclick=\"window.open('${reply.replyURL}')\">\r\n                                    <i class=\"material-icons\">reply</i>\r\n                                    <span>Reply</span>\r\n                                </span>\r\n                            </div>\r\n\r\n                            ${reply.body}\r\n                        </div>\r\n                    `)\r\n                });\r\n\r\n                //Add space below replies\r\n                replyHTML.push(`<br />`);\r\n            }\r\n\r\n            //Create HTML for this post\r\n            //Note that index == 0 is the initial post\r\n            postHTML.push(/*html*/`\r\n                    <div class=\"card\" style=\"margin-top: 20px;${index == 0 ? \"margin-bottom: 75px;\" : \"padding: 20px 30px;\"}\">\r\n                        <!-- Thread title (Initial post) -->\r\n                        ${index == 0 ? /*html*/`\r\n                            <h4 style=\"font-weight: bold\">${thread.title}</h4>\r\n                        ` : ''}\r\n\r\n                        <!-- Author header -->\r\n                        <div ${index == 0 ? `style=\"margin-bottom: 32px;\"` : \"\"} class=\"discussionHeader\">\r\n                            ${post.author ? /*html*/`\r\n                                <img src=\"${post.author.photoURL}\" />\r\n                                <h5>${post.author.name}</h5>\r\n                            ` : ``}\r\n\r\n                            <i class=\"material-icons\">calendar_today</i>\r\n                            <span>${dtps.formatDate(post.postedAt)}</span>\r\n\r\n                            <!-- Thread info (initial post) -->\r\n                            ${index == 0 ? /*html*/`\r\n                                ${thread.locked ? `<i class=\"material-icons\">lock</i>` : \"\"}\r\n                                ${thread.requireInitialPost ? /*html*/`\r\n                                    <i class=\"material-icons\">visibility</i>\r\n                                    <span>You must post before you can see other replies</span>\r\n                                ` : \"\"}\r\n                            ` : ''}\r\n                        </div>\r\n         \r\n                        ${post.body}\r\n\r\n                        ${replyHTML.join(\"\")}\r\n\r\n                        <!-- Reply / Add post footer -->\r\n                        ${post.replyURL ? /*html*/`\r\n                            <div ${index == 0 ? `style=\"margin-top: 32px;\"` : \"\"} class=\"discussionFooter\">\r\n                                ${index == 0 ? /*html*/`\r\n                                    <button onclick=\"window.open('${post.replyURL}')\" class=\"btn small\"><i class=\"material-icons\">post_add</i> Add Post</button>\r\n                                ` : /*html*/`\r\n                                    <button onclick=\"window.open('${post.replyURL}')\" class=\"btn small\"><i class=\"material-icons\">reply</i> Reply</button>\r\n                                `}\r\n                            </div> \r\n                        ` : \"\"}\r\n                    </div>\r\n                `);\r\n        });\r\n\r\n        //Render HTML\r\n        if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"discuss\")) {\r\n            jQuery(\".classContent\").html(postHTML.join(\"\"));\r\n        }\r\n    }).catch(function (err) {\r\n        dtps.error(\"Could not fetch discussion posts\", \"Caught promise rejection @ dtps.loadThreadPosts\", err);\r\n    });\r\n}\r\n\r\n/**\r\n * Renders the pages list for a class\r\n * \r\n * @param {string} courseID The course ID to render pages for\r\n * @param {string} [defaultPage] If provided, load the pageID by default\r\n */\r\ndtps.loadPagesList = function (courseID, defaultPage) {\r\n    //Get class index and set as selected class\r\n    var classNum = dtps.classes.map(course => course.id).indexOf(courseID);\r\n    dtps.selectedClass = classNum;\r\n\r\n    //Set pages as the selected content\r\n    dtps.selectedContent = \"pages\";\r\n    $(\"#dtpsTabBar .btn\").removeClass(\"active\");\r\n    $(\"#dtpsTabBar .btn.pages\").addClass(\"active\");\r\n\r\n    if (classNum == -1) {\r\n        //Class does not exist\r\n        dtps.error(\"The selected class doesn't exist\", \"classNum check failed @ dtps.loadPagesList\");\r\n    }\r\n\r\n    //Load class color and things\r\n    dtps.presentClass(classNum);\r\n    jQuery(\"body\").removeClass(\"collapsedSidebar\");\r\n\r\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"pages\")) {\r\n        //Render sidebar\r\n        jQuery(\".sidebar\").html(/*html*/`\r\n            <div class=\"bigLogo\" style=\"text-align: center; margin: 10px 0 20px; height: 38px;\">\r\n                <i style=\"font-size: 28px; margin-right: 7px; vertical-align: middle;\" class=\"material-icons\">insert_drive_file</i>\r\n                <h4 style=\"color: var(--text); display: inline-block; font-size: 28px; vertical-align: middle; margin: 0px;\">Pages</h4>\r\n            </div>\r\n                        \r\n            <div class=\"items\">\r\n                <div class=\"spinner\"></div>\r\n            </div>\r\n        `);\r\n\r\n        //Delete existing class content HTML\r\n        jQuery(\".classContent\").html(\"\");\r\n    }\r\n\r\n    dtpsLMS.fetchPages(dtps.classes[classNum].id).then(function (pagesData) {\r\n        //Store fetched pages data to the class\r\n        dtps.classes[classNum].pages = pagesData;\r\n\r\n        if (pagesData.length == 0) {\r\n            //No pages in this class\r\n            jQuery(\".sidebar .items\").html(/*html*/`\r\n                <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"class item main back\">\r\n                    <span class=\"label\">Classes</span>\r\n                    <div class=\"icon\">\r\n                        <i class=\"material-icons\">keyboard_arrow_left</i>\r\n                    </div>\r\n                </div>\r\n\r\n                <p style=\"text-align: center; font-weight: bold; margin-top: 60px;\">No pages found</p>\r\n                <p style=\"text-align: center; font-size: 14px;\">This class doesn't have any pages</p>\r\n            `);\r\n        } else {\r\n            //Loop over discusson threads array to create discussion thread HTML for the sidebar\r\n            var pageHTML = dtps.classes[classNum].pages.map(page => {\r\n                return /*html*/`\r\n                    <div data-pageID=\"${page.id}\" class=\"item ${(defaultPage && (page.id == defaultPage)) ? \"active\" : \"\"}\">\r\n                        <span class=\"label\">${page.title}</span>\r\n                        <div class=\"icon\">\r\n                            <i class=\"material-icons\">insert_drive_file</i>\r\n                        </div>\r\n                    </div>\r\n                `;\r\n            }).join(\"\");\r\n\r\n            //Render discussion threads in the sidebar\r\n            if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"pages\")) {\r\n                jQuery(\".sidebar .items\").html(/*html*/`\r\n                    <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"class item main back\">\r\n                        <span class=\"label\">Classes</span>\r\n                        <div class=\"icon\">\r\n                            <i class=\"material-icons\">keyboard_arrow_left</i>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"divider\"></div>\r\n\r\n                    ${pageHTML}\r\n                `);\r\n            }\r\n\r\n            //Load default page if provided\r\n            if (defaultPage) {\r\n                dtps.loadPage(classNum, defaultPage);\r\n            }\r\n\r\n            //Add click event listeners for pages\r\n            $(\".sidebar .item:not(.back)\").click(function (event) {\r\n                //Show the selected thread as active\r\n                $(this).siblings().removeClass(\"active\");\r\n                $(this).addClass(\"active\");\r\n\r\n                //Get page ID from HTML attribute\r\n                var pageID = $(this).attr(\"data-pageID\");\r\n\r\n                //Load the page content\r\n                dtps.loadPage(classNum, pageID);\r\n            });\r\n        }\r\n    }).catch((err) => {\r\n        dtps.error(\"Couldn't fetch pages\", \"Caught promise rejection @ dtps.loadPagesList\", err);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetches and renders a page and its contents\r\n * \r\n * @param {string} classNum The class number of the page to render\r\n * @param {string} pageID The page ID to render\r\n */\r\ndtps.loadPage = function (classNum, pageID) {\r\n    //Show loading indicator\r\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"pages\")) {\r\n        jQuery(\".classContent\").html(`<div class=\"spinner\"></div>`);\r\n    }\r\n\r\n    //Get page data\r\n    var page = null;\r\n    dtps.classes[classNum].pages.forEach(pageCheck => {\r\n        if (pageCheck.id == pageID) {\r\n            page = pageCheck;\r\n        }\r\n    });\r\n\r\n    if (!page) {\r\n        dtps.error(\"Page does not exist\", \"page is null @ dtps.loadPage\");\r\n        throw null;\r\n    }\r\n\r\n    //Fetch page content\r\n    dtpsLMS.fetchPageContent(dtps.classes[classNum].id, page.id).then(function (pageContentData) {\r\n        //Store page content in the page object\r\n        page.content = pageContentData;\r\n\r\n        if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"pages\")) {\r\n            //Get computed background and text color to style the iFrame with\r\n            var computedBackgroundColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--cards\");\r\n            var computedTextColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--text\");\r\n\r\n            //Generate a blob with the page content and get its data URL\r\n            var blob = new Blob([`\r\n                <base target=\"_blank\" /> \r\n                <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jottocraft.com/CanvasCSS.css\" media=\"screen,projection\"/>\r\n                <style>body {background-color: ${computedBackgroundColor}; color: ${computedTextColor};</style>\r\n                ${page.content}\r\n            `], { type: 'text/html' });\r\n\r\n            //Get URL from blob\r\n            var pageContentURL = window.URL.createObjectURL(blob);\r\n\r\n            //Render page card in the class content\r\n            jQuery(\".classContent\").html(/*html*/`\r\n                <div class=\"card\">\r\n                    <!-- Page title -->\r\n                    <h4 style=\"font-weight: bold;\">${page.title}</h4>\r\n\r\n                    <!-- Page header -->\r\n                    <div style=\"margin-bottom: 32px;\" class=\"discussionHeader\">\r\n                        ${page.author ? /*html*/`\r\n                            <img src=\"${page.author.photoURL}\" />\r\n                            <h5>${page.author.name}</h5>\r\n                        ` : ``}\r\n\r\n                        <i class=\"material-icons\">calendar_today</i>\r\n                        <span>${\"Last Updated \" + dtps.formatDate(page.updatedAt)}</span>\r\n                    </div>\r\n\r\n                    <!-- Page content -->\r\n                    <br />\r\n                    <iframe id=\"classPageIframe\" onload=\"dtps.iframeLoad('classPageIframe')\" style=\"margin: 10px 0px; width: 100%; border: none; outline: none;\" src=\"${pageContentURL}\" />\r\n                </div>\r\n            `);\r\n        }\r\n    }).catch((err) => {\r\n        dtps.error(\"Couldn't load page\", \"Caught promise rejection @ dtps.loadPage\", err);\r\n    });\r\n}\r\n\r\n//Fluid UI screen definitions\r\nfluid.externalScreens.discussions = (param) => {\r\n    //Split parameter string into variables\r\n    var courseID = param.split(\"|\")[0];\r\n    var threadID = param.split(\"|\")[1];\r\n\r\n    dtps.loadThreadsList(courseID, threadID);\r\n}\r\n\r\nfluid.externalScreens.pages = (param) => {\r\n    //Split parameter string into variables\r\n    var courseID = param.split(\"|\")[0];\r\n    var pageID = param.split(\"|\")[1];\r\n\r\n    dtps.loadPagesList(courseID, pageID);\r\n}\r\n\r\n//Type definitions\r\n\r\n/**\r\n* @typedef {Object} DiscussionThread\r\n* @description Defines discussion thread objects in DTPS\r\n* @property {string} title Title of the discussion thread\r\n* @property {string} id Discussion thread ID\r\n* @property {DiscussionPost[]} posts Posts in this thread, with the initial one first. Assume that the topic has not been selected and loaded if this is undefined, and that there are no posts if this is an empty array.\r\n* @property {boolean} [locked] True if posting to the discussion thread is locked\r\n* @property {boolean} [requireInitialPost] True if the user must post before viewing others' posts\r\n*/\r\n\r\n/**\r\n* @typedef {Object} DiscussionPost\r\n* @description Defines discussion post objects in DTPS\r\n* @property {string} id Discussion post ID\r\n* @property {string} body Discussion post body HTML\r\n* @property {Date} postedAt Date for when the post was posted\r\n* @property {number} [depth] The depth level this post is\r\n* @property {User} [author] Discussion post author\r\n* @property {DiscussionPost[]} [replies] Replies to this post. Nested replies (replies to replies) should be after this post in the array with a depth of 1, not in the replies key.\r\n* @property {string} [replyURL] A URL that the user can visit to reply to this post\r\n*/\r\n\r\n/**\r\n* @typedef {Object} Page\r\n* @description Defines Page objects in DTPS\r\n* @property {string} title Page title\r\n* @property {string} id Page ID\r\n* @property {string} content Page content. Assume the page hasn't been selected/loaded if this is undefined.\r\n* @property {Date} [updatedAt] When the page was last updated\r\n* @property {User} [author] Page author\r\n*/"]}