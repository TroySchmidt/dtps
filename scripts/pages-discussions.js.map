{"version":3,"sources":["scripts/pages-discussions.js"],"names":["dtps","loadThreadsList","courseID","defaultThread","fromModules","classNum","classes","map","course","id","indexOf","selectedClass","selectedContent","$","removeClass","addClass","jQuery","error","presentClass","loadThreadPosts","html","dtpsLMS","fetchDiscussionThreads","then","threadData","discussions","length","discussionHTML","discussionThread","title","locked","join","newDiscussionThreadURL","click","event","this","siblings","postID","attr","catch","err","threadID","fetchDiscussionPosts","thread","postHTML","posts","forEach","post","index","computedBackgroundColor","getComputedStyle","getPropertyValue","computedTextColor","blob","Blob","body","type","discussionPostContentURL","window","URL","createObjectURL","replyHTML","replies","push","reply","depth","author","photoURL","name","replyURL","formatDate","postedAt","requireInitialPost","loadPagesList","defaultPage","loadPage","fetchPages","pagesData","pages","pageHTML","page","pageID","fetchPageContent","content","pageContentURL","updatedAt","fluid","externalScreens","param","split"],"mappings":"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","sourceRoot":"/","sourcesContent":["/**\n * @file DTPS pages & discussion functions\n * @author jottocraft\n * \n * @copyright Copyright (c) 2018-2020 jottocraft. All rights reserved.\n * @license GPL-2.0-only\n */\n\n\n/**\n * Renders the discussions list for a class\n * \n * @param {string} courseID The course ID to render discussion threads for\n * @param {string} [defaultThread] The thread to load by default\n * @param {boolean} fromModules True if this page is being loaded from the moduleStream\n */\ndtps.loadThreadsList = function (courseID, defaultThread, fromModules) {\n    //Get class index and set as selected class\n    var classNum = dtps.classes.map(course => course.id).indexOf(courseID);\n    dtps.selectedClass = classNum;\n\n    //Set discussions as the selected content\n    if (!fromModules) {\n        dtps.selectedContent = \"discuss\";\n        $(\"#dtpsTabBar .btn\").removeClass(\"active\");\n        $(\"#dtpsTabBar .btn.discuss\").addClass(\"active\");\n        jQuery(\"body\").removeClass(\"collapsedSidebar\");\n    }\n\n    if (classNum == -1) {\n        //Class does not exist\n        dtps.error(\"The selected class doesn't exist\", \"classNum check failed @ dtps.loadThreadsList\");\n    }\n\n    //Load class color and things\n    dtps.presentClass(classNum);\n\n    //Load module thread\n    if (fromModules) {\n        dtps.loadThreadPosts(classNum, defaultThread, fromModules);\n        return;\n    }\n\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"discuss\")) {\n        //Render sidebar\n        jQuery(\".sidebar\").html(/*html*/`\n            <div class=\"bigLogo\" style=\"text-align: center; margin: 10px 0 20px; height: 38px;\">\n                <i style=\"font-size: 28px; margin-right: 7px; vertical-align: middle;\" class=\"material-icons\">forum</i>\n                <h4 style=\"color: var(--text); display: inline-block; font-size: 26px; vertical-align: middle; margin: 0px;\">Discussions</h4>\n            </div>\n                        \n            <div class=\"items\">\n                <div class=\"spinner\"></div>\n            </div>\n        `);\n\n        //Delete existing class content HTML\n        jQuery(\".classContent\").html(\"\");\n    }\n\n    //Fetch discussion thread data\n    dtpsLMS.fetchDiscussionThreads(dtps.classes[classNum].id).then(function (threadData) {\n        //Store fetched data to the selected class\n        dtps.classes[classNum].discussions = threadData;\n\n        if (dtps.classes[classNum].discussions.length == 0) {\n            //No discussion topics in this class\n            jQuery(\".sidebar .items\").html(/*html*/`\n                <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"class item main back\">\n                    <span class=\"label\">Classes</span>\n                    <div class=\"icon\">\n                        <i class=\"material-icons\">keyboard_arrow_left</i>\n                    </div>\n                </div>\n\n                <p style=\"text-align: center; font-weight: bold; margin-top: 60px; margin-bottom: 10px;\">No discussions found</p>\n                <p style=\"text-align: center; font-size: 14px; margin: 0px;\">This class doesn't have any discussions</p>\n            `);\n        } else {\n            //Loop over discusson threads array to create discussion thread HTML for the sidebar\n            var discussionHTML = dtps.classes[classNum].discussions.map(discussionThread => {\n                return /*html*/`\n                    <div data-threadID=\"${discussionThread.id}\" class=\"item\">\n                        <span class=\"label\">${discussionThread.title}</span>\n                        <div class=\"icon\">\n                            <i style=\"font-family: 'Material Icons Extended';\" class=\"material-icons\">${discussionThread.locked ? \"lock_outline\" : \"chat_bubble_outline\"}</i>\n                        </div>\n                    </div>\n                `;\n            }).join(\"\");\n\n            //Render discussion threads in the sidebar\n            if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"discuss\")) {\n                jQuery(\".sidebar .items\").html(/*html*/`\n                    <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"class item main back\">\n                        <span class=\"label\">Classes</span>\n                        <div class=\"icon\">\n                            <i class=\"material-icons\">keyboard_arrow_left</i>\n                        </div>\n                    </div>\n\n                    ${\n                    dtps.classes[classNum].newDiscussionThreadURL ? (/*html*/`\n                            <div onclick=\"window.open('${dtps.classes[classNum].newDiscussionThreadURL}')\" class=\"class item back\">\n                                <span class=\"label\">New discussion</span>\n                                <div class=\"icon\">\n                                    <i class=\"material-icons\">add</i>\n                                </div>\n                            </div>\n                        `) : \"\"\n                    }\n\n                    <div class=\"divider\"></div>\n\n                    ${discussionHTML}\n                `);\n\n                //Load default thread if provided\n                if (defaultThread) {\n                    dtps.loadThreadPosts(classNum, defaultThread);\n                }\n\n                //Add click event listeners for discussion threads\n                $(\".sidebar .item:not(.back)\").click(function (event) {\n                    //Show the selected thread as active\n                    $(this).siblings().removeClass(\"active\");\n                    $(this).addClass(\"active\");\n\n                    //Get thread ID from HTML attribute\n                    var postID = $(this).attr(\"data-threadID\");\n\n                    //Load the thread\n                    dtps.loadThreadPosts(classNum, postID);\n                });\n            }\n        }\n\n    }).catch(function (err) {\n        dtps.error(\"Couldn't fetch discussion threads\", \"Caught promise rejection @ dtps.loadThreadsList\", err);\n    });\n}\n\n/**\n * Fetches and displays posts in a discussion\n * \n * @param {number} classNum The class number to render\n * @param {string} threadID The discussion thread to render\n * @param {boolean} fromModules True if this page is being loaded from the moduleStream\n */\ndtps.loadThreadPosts = function (classNum, threadID, fromModules) {\n    //Show loading indicator\n    if ((dtps.selectedClass == classNum) && ((dtps.selectedContent == \"discuss\") || fromModules)) {\n        jQuery(\".classContent\").html(`<div class=\"spinner\"></div>`);\n    }\n\n    //Fetch discussion posts from the LMS\n    dtpsLMS.fetchDiscussionPosts(dtps.classes[classNum].id, threadID).then(function (thread) {\n        //Post HTML array\n        var postHTML = [];\n\n        thread.posts.forEach((post, index) => {\n            //Get background and text color for iFrame content\n            var computedBackgroundColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--cards\");\n            var computedTextColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--text\");\n\n            //Create a new blob data URL with the post's content\n            var blob = new Blob([`\n                    <base target=\"_blank\" /> \n                    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jottocraft.com/CanvasCSS.css\" media=\"screen,projection\"/>\n                    <style>body {background-color: ${computedBackgroundColor}; color: ${computedTextColor};</style>\n                    ${post.body}\n                `], { type: 'text/html' });\n            var discussionPostContentURL = window.URL.createObjectURL(blob);\n\n            //Create HTML for replies\n            var replyHTML = [];\n            if (post.replies) {\n                //Add space above replies\n                replyHTML.push(`<br />`);\n\n                //Get HTML for each reply and add to array\n                post.replies.forEach(reply => {\n                    replyHTML.push(/*html*/`\n                        <div style=\"margin-left: ${(reply.depth || 0) * 50}px;\" class=\"discussionReply\">\n                            <div class=\"discussionHeader\">\n                                ${post.author ? /*html*/`\n                                    <img src=\"${reply.author.photoURL}\" />\n                                    <h5>${reply.author.name}</h5>\n                                ` : ``}\n                                \n                                <span style=\"cursor: pointer;\" onclick=\"window.open('${reply.replyURL}')\">\n                                    <i class=\"material-icons\">reply</i>\n                                    <span>Reply</span>\n                                </span>\n                            </div>\n\n                            ${reply.body}\n                        </div>\n                    `)\n                });\n\n                //Add space below replies\n                replyHTML.push(`<br />`);\n            }\n\n            //Create HTML for this post\n            //Note that index == 0 is the initial post\n            postHTML.push(/*html*/`\n                    <div class=\"card\" style=\"margin-top: 20px;${index == 0 ? \"margin-bottom: 75px;\" : \"padding: 20px 30px;\"}\">\n                        <!-- Thread title (Initial post) -->\n                        ${index == 0 ? /*html*/`\n                            <h4 style=\"font-weight: bold\">${thread.title}</h4>\n                        ` : ''}\n\n                        <!-- Author header -->\n                        <div ${index == 0 ? `style=\"margin-bottom: 32px;\"` : \"\"} class=\"discussionHeader\">\n                            ${post.author ? /*html*/`\n                                <img src=\"${post.author.photoURL}\" />\n                                <h5>${post.author.name}</h5>\n                            ` : ``}\n\n                            <i class=\"material-icons\">calendar_today</i>\n                            <span>${dtps.formatDate(post.postedAt)}</span>\n\n                            <!-- Thread info (initial post) -->\n                            ${index == 0 ? /*html*/`\n                                ${thread.locked ? `<i class=\"material-icons\">lock</i>` : \"\"}\n                                ${thread.requireInitialPost ? /*html*/`\n                                    <i class=\"material-icons\">visibility</i>\n                                    <span>You must post before you can see other replies</span>\n                                ` : \"\"}\n                            ` : ''}\n                        </div>\n         \n                        ${index == 0 ? /*html*/`\n                            <iframe id=\"classThreadIframe\" onload=\"dtps.iframeLoad('classThreadIframe')\" style=\"margin: 10px 0px; width: 100%; border: none; outline: none;\" src=\"${discussionPostContentURL}\" />\n                        ` : post.body}\n\n                        ${replyHTML.join(\"\")}\n\n                        <!-- Reply / Add post footer -->\n                        ${post.replyURL ? /*html*/`\n                            <div ${index == 0 ? `style=\"margin-top: 32px;\"` : \"\"} class=\"discussionFooter\">\n                                ${index == 0 ? /*html*/`\n                                    <button onclick=\"window.open('${post.replyURL}')\" class=\"btn small\"><i class=\"material-icons\">post_add</i> Add Post</button>\n                                ` : /*html*/`\n                                    <button onclick=\"window.open('${post.replyURL}')\" class=\"btn small\"><i class=\"material-icons\">reply</i> Reply</button>\n                                `}\n                            </div> \n                        ` : \"\"}\n                    </div>\n                `);\n        });\n\n        //Render HTML\n        if ((dtps.selectedClass == classNum) && ((dtps.selectedContent == \"discuss\") || fromModules)) {\n            jQuery(\".classContent\").html((fromModules ? /*html*/`\n                <div class=\"acrylicMaterial\" onclick=\"fluid.screen('moduleStream', '${dtps.classes[classNum].id}')\" style=\"line-height: 40px;display:  inline-block;border-radius: 20px;margin: 82px 0px 0px 82px; cursor: pointer;\">\n                    <div style=\"font-size: 16px;display: inline-block;vertical-align: middle;margin: 0px 20px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">keyboard_arrow_left</i> Back</div>\n                </div>\n            ` : \"\") + postHTML.join(\"\"));\n        }\n    }).catch(function (err) {\n        dtps.error(\"Could not fetch discussion posts\", \"Caught promise rejection @ dtps.loadThreadPosts\", err);\n    });\n}\n\n/**\n * Renders the pages list for a class\n * \n * @param {string} courseID The course ID to render pages for\n * @param {string} [defaultPage] If provided, load the pageID by default\n * @param {boolean} fromModules True if this page is being loaded from the moduleStream\n */\ndtps.loadPagesList = function (courseID, defaultPage, fromModules) {\n    //Get class index and set as selected class\n    var classNum = dtps.classes.map(course => course.id).indexOf(courseID);\n    dtps.selectedClass = classNum;\n\n    //Set pages as the selected content\n    if (!fromModules) {\n        dtps.selectedContent = \"pages\";\n        $(\"#dtpsTabBar .btn\").removeClass(\"active\");\n        $(\"#dtpsTabBar .btn.pages\").addClass(\"active\");\n        jQuery(\"body\").removeClass(\"collapsedSidebar\");\n    }\n\n    if (classNum == -1) {\n        //Class does not exist\n        dtps.error(\"The selected class doesn't exist\", \"classNum check failed @ dtps.loadPagesList\");\n    }\n\n    //Load class color and things\n    dtps.presentClass(classNum);\n\n    //Load module page\n    if (fromModules) {\n        dtps.loadPage(classNum, defaultPage, fromModules);\n        return;\n    }\n\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"pages\")) {\n        //Render sidebar\n        jQuery(\".sidebar\").html(/*html*/`\n            <div class=\"bigLogo\" style=\"text-align: center; margin: 10px 0 20px; height: 38px;\">\n                <i style=\"font-size: 28px; margin-right: 7px; vertical-align: middle;\" class=\"material-icons\">insert_drive_file</i>\n                <h4 style=\"color: var(--text); display: inline-block; font-size: 26px; vertical-align: middle; margin: 0px;\">Pages</h4>\n            </div>\n                        \n            <div class=\"items\">\n                <div class=\"spinner\"></div>\n            </div>\n        `);\n\n        //Delete existing class content HTML\n        jQuery(\".classContent\").html(\"\");\n    }\n\n    dtpsLMS.fetchPages(dtps.classes[classNum].id).then(function (pagesData) {\n        //Store fetched pages data to the class\n        dtps.classes[classNum].pages = pagesData;\n\n        if (pagesData.length == 0) {\n            //No pages in this class\n            jQuery(\".sidebar .items\").html(/*html*/`\n                <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"class item main back\">\n                    <span class=\"label\">Classes</span>\n                    <div class=\"icon\">\n                        <i class=\"material-icons\">keyboard_arrow_left</i>\n                    </div>\n                </div>\n\n                <p style=\"text-align: center; font-weight: bold; margin-top: 60px; margin-bottom: 10px;\">No pages found</p>\n                <p style=\"text-align: center; font-size: 14px; margin: 0px;\">This class doesn't have any pages</p>\n            `);\n        } else {\n            //Loop over discusson threads array to create discussion thread HTML for the sidebar\n            var pageHTML = dtps.classes[classNum].pages.map(page => {\n                return /*html*/`\n                    <div data-pageID=\"${page.id}\" class=\"item ${(defaultPage && (page.id == defaultPage)) ? \"active\" : \"\"}\">\n                        <span class=\"label\">${page.title}</span>\n                        <div class=\"icon\">\n                            <i class=\"material-icons\">insert_drive_file</i>\n                        </div>\n                    </div>\n                `;\n            }).join(\"\");\n\n            //Render discussion threads in the sidebar\n            if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"pages\")) {\n                jQuery(\".sidebar .items\").html(/*html*/`\n                    <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"class item main back\">\n                        <span class=\"label\">Classes</span>\n                        <div class=\"icon\">\n                            <i class=\"material-icons\">keyboard_arrow_left</i>\n                        </div>\n                    </div>\n\n                    <div class=\"divider\"></div>\n\n                    ${pageHTML}\n                `);\n            }\n\n            //Load default page if provided\n            if (defaultPage) {\n                dtps.loadPage(classNum, defaultPage);\n            }\n\n            //Add click event listeners for pages\n            $(\".sidebar .item:not(.back)\").click(function (event) {\n                //Show the selected thread as active\n                $(this).siblings().removeClass(\"active\");\n                $(this).addClass(\"active\");\n\n                //Get page ID from HTML attribute\n                var pageID = $(this).attr(\"data-pageID\");\n\n                //Load the page content\n                dtps.loadPage(classNum, pageID);\n            });\n        }\n    }).catch((err) => {\n        dtps.error(\"Couldn't fetch pages\", \"Caught promise rejection @ dtps.loadPagesList\", err);\n    });\n}\n\n/**\n * Fetches and renders a page and its contents\n * \n * @param {string} classNum The class number of the page to render\n * @param {string} pageID The page ID to render\n * @param {boolean} fromModules True if this page is being loaded from the moduleStream\n */\ndtps.loadPage = function (classNum, pageID, fromModules) {\n    //Show loading indicator\n    if ((dtps.selectedClass == classNum) && ((dtps.selectedContent == \"pages\") || fromModules)) {\n        jQuery(\".classContent\").html(`<div class=\"spinner\"></div>`);\n    }\n\n    //Fetch page content\n    dtpsLMS.fetchPageContent(dtps.classes[classNum].id, pageID).then(function (page) {\n        if ((dtps.selectedClass == classNum) && ((dtps.selectedContent == \"pages\") || fromModules)) {\n            //Get computed background and text color to style the iFrame with\n            var computedBackgroundColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--cards\");\n            var computedTextColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--text\");\n\n            //Generate a blob with the page content and get its data URL\n            var blob = new Blob([`\n                <base target=\"_blank\" /> \n                <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jottocraft.com/CanvasCSS.css\" media=\"screen,projection\"/>\n                <style>body {background-color: ${computedBackgroundColor}; color: ${computedTextColor};</style>\n                ${page.content}\n            `], { type: 'text/html' });\n\n            //Get URL from blob\n            var pageContentURL = window.URL.createObjectURL(blob);\n\n            //Render page card in the class content\n            jQuery(\".classContent\").html(/*html*/`\n                ${fromModules ? /*html*/`\n                    <div class=\"acrylicMaterial\" onclick=\"fluid.screen('moduleStream', '${dtps.classes[classNum].id}')\" style=\"line-height: 40px;display:  inline-block;border-radius: 20px;margin: 82px 0px 0px 82px; cursor: pointer;\">\n                        <div style=\"font-size: 16px;display: inline-block;vertical-align: middle;margin: 0px 20px;\"><i style=\"vertical-align: middle;\" class=\"material-icons\">keyboard_arrow_left</i> Back</div>\n                    </div>\n                ` : \"\"}\n                <div class=\"card\">\n                    <!-- Page title -->\n                    <h4 style=\"font-weight: bold;\">${page.title}</h4>\n\n                    <!-- Page header -->\n                    <div style=\"margin-bottom: 32px;\" class=\"discussionHeader\">\n                        ${page.author ? /*html*/`\n                            <img src=\"${page.author.photoURL}\" />\n                            <h5>${page.author.name}</h5>\n                        ` : ``}\n\n                        <i class=\"material-icons\">calendar_today</i>\n                        <span>${\"Last Updated \" + dtps.formatDate(page.updatedAt)}</span>\n                    </div>\n\n                    <!-- Page content -->\n                    <br />\n                    <iframe id=\"classPageIframe\" onload=\"dtps.iframeLoad('classPageIframe')\" style=\"margin: 10px 0px; width: 100%; border: none; outline: none;\" src=\"${pageContentURL}\" />\n                </div>\n            `);\n        }\n    }).catch((err) => {\n        dtps.error(\"Couldn't load page\", \"Caught promise rejection @ dtps.loadPage\", err);\n    });\n}\n\n//Fluid UI screen definitions\nfluid.externalScreens.discussions = (param) => {\n    //Split parameter string into variables\n    var courseID = param.split(\"|\")[0];\n    var threadID = param.split(\"|\")[1];\n    var fromModules = param.split(\"|\")[2] == \"true\";\n\n    dtps.loadThreadsList(courseID, threadID, fromModules);\n}\n\nfluid.externalScreens.pages = (param) => {\n    //Split parameter string into variables\n    var courseID = param.split(\"|\")[0];\n    var pageID = param.split(\"|\")[1];\n    var fromModules = param.split(\"|\")[2] == \"true\";\n\n    dtps.loadPagesList(courseID, pageID, fromModules);\n}\n\n//Type definitions\n\n/**\n* @typedef {Object} PartialDiscussionThread\n* @description Defines partial discussion thread objects in DTPS (for threads list)\n* @property {string} title Title of the discussion thread\n* @property {string} id Discussion thread ID\n* @property {boolean} [locked] True if posting to the discussion thread is locked\n*/\n\n/**\n* @typedef {Object} DiscussionThread\n* @description Defines discussion thread objects in DTPS\n* @property {string} title Title of the discussion thread\n* @property {string} id Discussion thread ID\n* @property {DiscussionPost[]} posts Posts in this thread, with the initial one first.\n* @property {boolean} [locked] True if posting to the discussion thread is locked\n* @property {boolean} [requireInitialPost] True if the user must post before viewing others' posts\n*/\n\n/**\n* @typedef {Object} DiscussionPost\n* @description Defines discussion post objects in DTPS\n* @property {string} id Discussion post ID\n* @property {string} body Discussion post body HTML\n* @property {Date} postedAt Date for when the post was posted\n* @property {number} [depth] The depth level this post is\n* @property {User} [author] Discussion post author\n* @property {DiscussionPost[]} [replies] Replies to this post. Nested replies (replies to replies) should be after this post in the array with a depth of 1, not in the replies key.\n* @property {string} [replyURL] A URL that the user can visit to reply to this post\n*/\n\n/**\n* @typedef {Object} PartialPage\n* @description Defines a partial page object in DTPS (for pages list)\n* @property {string} title Page title\n* @property {string} id Page ID\n*/\n\n/**\n* @typedef {Object} Page\n* @description Defines Page objects in DTPS\n* @property {string} title Page title\n* @property {string} id Page ID\n* @property {string} content Page content HTML\n* @property {Date} [updatedAt] When the page was last updated\n* @property {User} [author] Page author\n*/"]}