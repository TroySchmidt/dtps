{"version":3,"sources":["scripts/pages-discussions.js"],"names":["dtps","loadThreadsList","courseID","defaultThread","fromModules","defaultPost","classNum","classes","map","course","id","indexOf","selectedClass","selectedContent","$","removeClass","addClass","jQuery","error","presentClass","loadThreadPosts","html","dtpsLMS","fetchDiscussionThreads","lmsID","then","threadData","discussions","length","discussionHTML","discussionThread","locked","title","join","newDiscussionThreadURL","click","event","this","siblings","postID","attr","catch","err","threadID","fetchDiscussionPosts","thread","postHTML","posts","forEach","post","index","computedBackgroundColor","getComputedStyle","getPropertyValue","computedTextColor","blob","Blob","body","type","discussionPostContentURL","window","URL","createObjectURL","replyHTML","replies","push","reply","depth","author","photoURL","name","replyURL","formatDate","postedAt","requireInitialPost","get","scrollIntoView","loadPagesList","defaultPage","loadPage","fetchPages","pagesData","pages","pageHTML","page","pageID","fetchPageContent","content","pageContentURL","updatedAt","fluid","externalScreens","param","split"],"mappings":"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","sourceRoot":"/","sourcesContent":["/**\r\n * @file DTPS pages & discussion functions\r\n * @author jottocraft\r\n * \r\n * @copyright Copyright (c) 2018-2021 jottocraft. All rights reserved.\r\n * @license GPL-2.0-only\r\n */\r\n\r\n\r\n/**\r\n * Renders the discussions list for a class\r\n * \r\n * @param {string} courseID The course ID to render discussion threads for\r\n * @param {string} [defaultThread] The thread to load by default\r\n * @param {boolean} [fromModules] True if this page is being loaded from the moduleStream\r\n * @param {string} [defaultPost] The post to load by default\r\n */\r\ndtps.loadThreadsList = function (courseID, defaultThread, fromModules, defaultPost) {\r\n    //Get class index and set as selected class\r\n    var classNum = dtps.classes.map(course => course.id).indexOf(courseID);\r\n    dtps.selectedClass = classNum;\r\n\r\n    //Set discussions as the selected content\r\n    if (!fromModules) {\r\n        dtps.selectedContent = \"discuss\";\r\n        $(\"#dtpsTabBar .btn\").removeClass(\"active\");\r\n        $(\"#dtpsTabBar .btn.discuss\").addClass(\"active\");\r\n        jQuery(\"body\").removeClass(\"collapsedSidebar\");\r\n    }\r\n\r\n    if (classNum == -1) {\r\n        //Class does not exist\r\n        dtps.error(\"The selected class doesn't exist\", \"classNum check failed @ dtps.loadThreadsList\");\r\n    }\r\n\r\n    //Load class color and things\r\n    dtps.presentClass(classNum);\r\n\r\n    //Load module thread\r\n    if (fromModules) {\r\n        dtps.loadThreadPosts(classNum, defaultThread, fromModules, defaultPost);\r\n        return;\r\n    }\r\n\r\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"discuss\")) {\r\n        //Render sidebar\r\n        jQuery(\".sidebar\").html(/*html*/`\r\n            <div class=\"title\">\r\n                <i style=\"font-size: 28px; margin-right: 7px; vertical-align: middle;\" class=\"fluid-icon\">forum</i>\r\n               <h4>Discussions</h4>\r\n             </div>\r\n                        \r\n            <div class=\"items\">\r\n                <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"item main back\">\r\n                    <i class=\"fluid-icon\">keyboard_arrow_left</i> <span class=\"label\">Classes</span>\r\n                </div>\r\n\r\n                <div class=\"divider\"></div>\r\n\r\n                <div class=\"item shimmerParent\">\r\n                    <i class=\"fluid-icon\">star</i>\r\n                    <span class=\"label\">Discussion thread Title</span>\r\n                </div>\r\n                <div class=\"item shimmerParent\">\r\n                    <i class=\"fluid-icon\">star</i>\r\n                    <span class=\"label\">Discussion thread Title</span>\r\n                </div>\r\n                <div class=\"item shimmerParent\">\r\n                    <i class=\"fluid-icon\">star</i>\r\n                    <span class=\"label\">Discussion thread Title</span>\r\n                </div>\r\n            </div>\r\n        `);\r\n\r\n        //Delete existing class content HTML\r\n        jQuery(\".classContent\").html(\"\");\r\n    }\r\n\r\n    //Fetch discussion thread data\r\n    dtpsLMS.fetchDiscussionThreads(dtps.classes[classNum].lmsID).then(function (threadData) {\r\n        //Store fetched data to the selected class\r\n        dtps.classes[classNum].discussions = threadData;\r\n\r\n        if (dtps.classes[classNum].discussions.length == 0) {\r\n            //No discussion topics in this class\r\n            jQuery(\".sidebar .items\").html(/*html*/`\r\n                <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"item main back\">\r\n                    <i class=\"fluid-icon\">keyboard_arrow_left</i> <span class=\"label\">Classes</span>\r\n                </div>\r\n\r\n                <p style=\"text-align: center; font-weight: bold; margin-top: 60px; margin-bottom: 10px;\">No discussions found</p>\r\n                <p style=\"text-align: center; font-size: 14px; margin: 0px;\">This class doesn't have any discussions</p>\r\n            `);\r\n        } else {\r\n            //Loop over discusson threads array to create discussion thread HTML for the sidebar\r\n            var discussionHTML = dtps.classes[classNum].discussions.map(discussionThread => {\r\n                return /*html*/`\r\n                    <div data-threadID=\"${discussionThread.id}\" class=\"item\">\r\n                        <i class=\"fluid-icon\">${discussionThread.locked ? \"lock_outline\" : \"chat_bubble_outline\"}</i>\r\n                        <span class=\"label\">${discussionThread.title}</span>\r\n                    </div>\r\n                `;\r\n            }).join(\"\");\r\n\r\n            //Render discussion threads in the sidebar\r\n            if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"discuss\")) {\r\n                jQuery(\".sidebar .items\").html(/*html*/`\r\n                <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"item main back\">\r\n                    <i class=\"fluid-icon\">keyboard_arrow_left</i> <span class=\"label\">Classes</span>\r\n                </div>\r\n\r\n                    ${\r\n                    dtps.classes[classNum].newDiscussionThreadURL ? (/*html*/`\r\n                            <div onclick=\"window.open('${dtps.classes[classNum].newDiscussionThreadURL}')\" class=\"item back\">\r\n                                <i class=\"fluid-icon\">add</i>\r\n                                <span class=\"label\">New discussion</span>\r\n                            </div>\r\n                        `) : \"\"\r\n                    }\r\n\r\n                    <div class=\"divider\"></div>\r\n\r\n                    ${discussionHTML}\r\n                `);\r\n\r\n                //Load default thread if provided\r\n                if (defaultThread) {\r\n                    dtps.loadThreadPosts(classNum, defaultThread, fromModules, defaultPost);\r\n                }\r\n\r\n                //Add click event listeners for discussion threads\r\n                $(\".sidebar .item:not(.back)\").click(function (event) {\r\n                    //Show the selected thread as active\r\n                    $(this).siblings().removeClass(\"active\");\r\n                    $(this).addClass(\"active\");\r\n\r\n                    //Get thread ID from HTML attribute\r\n                    var postID = $(this).attr(\"data-threadID\");\r\n\r\n                    //Load the thread\r\n                    dtps.loadThreadPosts(classNum, postID);\r\n                });\r\n            }\r\n        }\r\n\r\n    }).catch(function (err) {\r\n        dtps.error(\"Couldn't fetch discussion threads\", \"Caught promise rejection @ dtps.loadThreadsList\", err);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetches and displays posts in a discussion\r\n * \r\n * @param {number} classNum The class number to render\r\n * @param {string} threadID The discussion thread to render\r\n * @param {boolean} [fromModules] True if this page is being loaded from the moduleStream\r\n * @param {string} [defaultPost] The post ID to jump to\r\n */\r\ndtps.loadThreadPosts = function (classNum, threadID, fromModules, defaultPost) {\r\n    //Show loading indicator\r\n    if ((dtps.selectedClass == classNum) && ((dtps.selectedContent == \"discuss\") || fromModules)) {\r\n        jQuery(\".classContent\").html(/*html*/`\r\n            <div class=\"card\" style=\"margin-top: 20px;margin-bottom: 75px;\">\r\n                <h4><span class=\"shimmer\">[SHIMMER] Thread Title</span></h4>\r\n\r\n                <div style=\"margin-bottom: 32px;\" class=\"discussionHeader\">\r\n                    <h5 ><span class=\"shimmer\">Discussion author name</span></h5>\r\n\r\n                    <i class=\"fluid-icon shimmer\">calendar_today</i>\r\n                    <span class=\"shimmer\">Discussion date</span>\r\n                </div>\r\n\r\n                <div class=\"shimmer\" style=\"margin: 10px 0px; width: 100%; height: 400px; border: none; outline: none;\"></div>\r\n\r\n                <div style=\"margin-top: 32px;\" class=\"discussionFooter\">\r\n                    <button class=\"btn small shimmer\"><i class=\"fluid-icon\">post_add</i> Add Post</button>\r\n                </div> \r\n            </div>\r\n        `);\r\n    }\r\n\r\n    //Fetch discussion posts from the LMS\r\n    dtpsLMS.fetchDiscussionPosts(dtps.classes[classNum].lmsID, threadID).then(function (thread) {\r\n        //Post HTML array\r\n        var postHTML = [];\r\n\r\n        thread.posts.forEach((post, index) => {\r\n            //Get background and text color for iFrame content\r\n            var computedBackgroundColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--cards\");\r\n            var computedTextColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--text\");\r\n\r\n            //Create a new blob data URL with the post's content\r\n            var blob = new Blob([`\r\n                    <base target=\"_blank\" /> \r\n                    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jottocraft.com/CanvasCSS.css\" media=\"screen,projection\"/>\r\n                    <style>body {background-color: ${computedBackgroundColor}; color: ${computedTextColor};</style>\r\n                    ${post.body}\r\n                `], { type: 'text/html' });\r\n            var discussionPostContentURL = window.URL.createObjectURL(blob);\r\n\r\n            //Create HTML for replies\r\n            var replyHTML = [];\r\n            if (post.replies) {\r\n                //Add space above replies\r\n                replyHTML.push(`<br />`);\r\n\r\n                //Get HTML for each reply and add to array\r\n                post.replies.forEach(reply => {\r\n                    replyHTML.push(/*html*/`\r\n                        <div data-post-id=\"${reply.id}\" style=\"margin-left: ${(reply.depth || 0) * 50}px;\" class=\"discussionReply\">\r\n                            <div class=\"discussionHeader\">\r\n                                ${post.author ? /*html*/`\r\n                                    <img src=\"${reply.author.photoURL}\" />\r\n                                    <h5>${reply.author.name}</h5>\r\n                                ` : ``}\r\n                                \r\n                                <span style=\"cursor: pointer;\" onclick=\"window.open('${reply.replyURL}')\">\r\n                                    <i class=\"fluid-icon\">reply</i>\r\n                                    <span>Reply</span>\r\n                                </span>\r\n                            </div>\r\n\r\n                            ${reply.body}\r\n                        </div>\r\n                    `)\r\n                });\r\n\r\n                //Add space below replies\r\n                replyHTML.push(`<br />`);\r\n            }\r\n\r\n            //Create HTML for this post\r\n            //Note that index == 0 is the initial post\r\n            postHTML.push(/*html*/`\r\n                    <div class=\"card\" data-post-id=\"${post.id}\" style=\"margin-top: 20px;${index == 0 ? \"margin-bottom: 75px;\" : \"padding: 20px 30px;\"}\">\r\n                        <!-- Thread title (Initial post) -->\r\n                        ${index == 0 ? /*html*/`\r\n                            <h4 style=\"font-weight: bold\">${thread.title}</h4>\r\n                        ` : ''}\r\n\r\n                        <!-- Author header -->\r\n                        <div ${index == 0 ? `style=\"margin-bottom: 32px;\"` : \"\"} class=\"discussionHeader\">\r\n                            ${post.author ? /*html*/`\r\n                                <img src=\"${post.author.photoURL}\" />\r\n                                <h5>${post.author.name}</h5>\r\n                            ` : ``}\r\n\r\n                            <i class=\"fluid-icon\">calendar_today</i>\r\n                            <span>${dtps.formatDate(post.postedAt)}</span>\r\n\r\n                            <!-- Thread info (initial post) -->\r\n                            ${index == 0 ? /*html*/`\r\n                                ${thread.locked ? `<i class=\"fluid-icon\">lock</i>` : \"\"}\r\n                                ${thread.requireInitialPost ? /*html*/`\r\n                                    <i class=\"fluid-icon\">visibility</i>\r\n                                    <span>You must post before you can see other replies</span>\r\n                                ` : \"\"}\r\n                            ` : ''}\r\n                        </div>\r\n         \r\n                        ${index == 0 ? /*html*/`\r\n                            <iframe id=\"classThreadIframe\" onload=\"dtps.iframeLoad('classThreadIframe')\" style=\"margin: 10px 0px; width: 100%; border: none; outline: none;\" src=\"${discussionPostContentURL}\" />\r\n                        ` : post.body}\r\n\r\n                        ${replyHTML.join(\"\")}\r\n\r\n                        <!-- Reply / Add post footer -->\r\n                        ${post.replyURL ? /*html*/`\r\n                            <div ${index == 0 ? `style=\"margin-top: 32px;\"` : \"\"} class=\"discussionFooter\">\r\n                                ${index == 0 ? /*html*/`\r\n                                    <button onclick=\"window.open('${post.replyURL}')\" class=\"btn small\"><i class=\"fluid-icon\">post_add</i> Add Post</button>\r\n                                ` : /*html*/`\r\n                                    <button onclick=\"window.open('${post.replyURL}')\" class=\"btn small\"><i class=\"fluid-icon\">reply</i> Reply</button>\r\n                                `}\r\n                            </div> \r\n                        ` : \"\"}\r\n                    </div>\r\n                `);\r\n        });\r\n\r\n        //Render HTML\r\n        if ((dtps.selectedClass == classNum) && ((dtps.selectedContent == \"discuss\") || fromModules)) {\r\n            jQuery(\".classContent\").html((fromModules ? /*html*/`\r\n                <button style=\"margin: 10px 0px 0px 20px;\" class=\"btn\" onclick=\"fluid.screen('moduleStream', '${dtps.classes[classNum].id}')\">\r\n                    <i class=\"fluid-icon\">keyboard_arrow_left</i> Back\r\n                </button>\r\n            ` : \"\") + postHTML.join(\"\"));\r\n\r\n            //Jump to post if specified\r\n            if (defaultPost) {\r\n                $(\"[data-post-id=\" + defaultPost + \"]\").get(0).scrollIntoView();\r\n            }\r\n        }\r\n    }).catch(function (err) {\r\n        dtps.error(\"Could not fetch discussion posts\", \"Caught promise rejection @ dtps.loadThreadPosts\", err);\r\n    });\r\n}\r\n\r\n/**\r\n * Renders the pages list for a class\r\n * \r\n * @param {string} courseID The course ID to render pages for\r\n * @param {string} [defaultPage] If provided, load the pageID by default\r\n * @param {boolean} fromModules True if this page is being loaded from the moduleStream\r\n */\r\ndtps.loadPagesList = function (courseID, defaultPage, fromModules) {\r\n    //Get class index and set as selected class\r\n    var classNum = dtps.classes.map(course => course.id).indexOf(courseID);\r\n    dtps.selectedClass = classNum;\r\n\r\n    //Set pages as the selected content\r\n    if (!fromModules) {\r\n        dtps.selectedContent = \"pages\";\r\n        $(\"#dtpsTabBar .btn\").removeClass(\"active\");\r\n        $(\"#dtpsTabBar .btn.pages\").addClass(\"active\");\r\n        jQuery(\"body\").removeClass(\"collapsedSidebar\");\r\n    }\r\n\r\n    if (classNum == -1) {\r\n        //Class does not exist\r\n        dtps.error(\"The selected class doesn't exist\", \"classNum check failed @ dtps.loadPagesList\");\r\n    }\r\n\r\n    //Load class color and things\r\n    dtps.presentClass(classNum);\r\n\r\n    //Load module page\r\n    if (fromModules) {\r\n        dtps.loadPage(classNum, defaultPage, fromModules);\r\n        return;\r\n    }\r\n\r\n    if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"pages\")) {\r\n        //Render sidebar\r\n        jQuery(\".sidebar\").html(/*html*/`\r\n            <div class=\"title\">\r\n                <i style=\"font-size: 28px; margin-right: 7px; vertical-align: middle;\" class=\"fluid-icon\">insert_drive_file</i>\r\n                <h4>Pages</h4>\r\n             </div>\r\n\r\n             <div class=\"items\">\r\n                <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"item main back\">\r\n                    <i class=\"fluid-icon\">keyboard_arrow_left</i> <span class=\"label\">Classes</span>\r\n                </div>\r\n\r\n                <div class=\"divider\"></div>\r\n\r\n                <div class=\"item shimmerParent\">\r\n                    <i class=\"fluid-icon\">star</i>\r\n                    <span class=\"label\">Class page title</span>\r\n                </div>\r\n                <div class=\"item shimmerParent\">\r\n                    <i class=\"fluid-icon\">star</i>\r\n                    <span class=\"label\">Class page title</span>\r\n                </div>\r\n                <div class=\"item shimmerParent\">\r\n                    <i class=\"fluid-icon\">star</i>\r\n                    <span class=\"label\">Class page title</span>\r\n                </div>\r\n            </div>\r\n        `);\r\n\r\n        //Delete existing class content HTML\r\n        jQuery(\".classContent\").html(\"\");\r\n    }\r\n\r\n    dtpsLMS.fetchPages(dtps.classes[classNum].lmsID).then(function (pagesData) {\r\n        //Store fetched pages data to the class\r\n        dtps.classes[classNum].pages = pagesData;\r\n\r\n        if (pagesData.length == 0) {\r\n            //No pages in this class\r\n            jQuery(\".sidebar .items\").html(/*html*/`\r\n                <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"item main back\">\r\n                    <i class=\"fluid-icon\">keyboard_arrow_left</i>\r\n                    <span class=\"label\">Classes</span>\r\n                </div>\r\n\r\n                <p style=\"text-align: center; font-weight: bold; margin-top: 60px; margin-bottom: 10px;\">No pages found</p>\r\n                <p style=\"text-align: center; font-size: 14px; margin: 0px;\">This class doesn't have any pages</p>\r\n            `);\r\n        } else {\r\n            //Loop over discusson threads array to create discussion thread HTML for the sidebar\r\n            var pageHTML = dtps.classes[classNum].pages.map(page => {\r\n                return /*html*/`\r\n                    <div data-pageID=\"${page.id}\" class=\"item ${(defaultPage && (page.id == defaultPage)) ? \"active\" : \"\"}\">\r\n                        <i class=\"fluid-icon\">insert_drive_file</i>    \r\n                        <span class=\"label\">${page.title}</span>\r\n                    </div>\r\n                `;\r\n            }).join(\"\");\r\n\r\n            //Render discussion threads in the sidebar\r\n            if ((dtps.selectedClass == classNum) && (dtps.selectedContent == \"pages\")) {\r\n                jQuery(\".sidebar .items\").html(/*html*/`\r\n                    <div onclick=\"fluid.screen('stream', '${dtps.classes[classNum].id}');\" class=\"item main back\">\r\n                        <i class=\"fluid-icon\">keyboard_arrow_left</i>    \r\n                        <span class=\"label\">Classes</span>\r\n                    </div>\r\n\r\n                    <div class=\"divider\"></div>\r\n\r\n                    ${pageHTML}\r\n                `);\r\n            }\r\n\r\n            //Load default page if provided\r\n            if (defaultPage) {\r\n                dtps.loadPage(classNum, defaultPage);\r\n            }\r\n\r\n            //Add click event listeners for pages\r\n            $(\".sidebar .item:not(.back)\").click(function (event) {\r\n                //Show the selected thread as active\r\n                $(this).siblings().removeClass(\"active\");\r\n                $(this).addClass(\"active\");\r\n\r\n                //Get page ID from HTML attribute\r\n                var pageID = $(this).attr(\"data-pageID\");\r\n\r\n                //Load the page content\r\n                dtps.loadPage(classNum, pageID);\r\n            });\r\n        }\r\n    }).catch((err) => {\r\n        dtps.error(\"Couldn't fetch pages\", \"Caught promise rejection @ dtps.loadPagesList\", err);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetches and renders a page and its contents\r\n * \r\n * @param {string} classNum The class number of the page to render\r\n * @param {string} pageID The page ID to render\r\n * @param {boolean} fromModules True if this page is being loaded from the moduleStream\r\n */\r\ndtps.loadPage = function (classNum, pageID, fromModules) {\r\n    //Show loading indicator\r\n    if ((dtps.selectedClass == classNum) && ((dtps.selectedContent == \"pages\") || fromModules)) {\r\n        jQuery(\".classContent\").html(/*html*/`\r\n             <div style=\"margin: 20px; padding: 20px;\">\r\n                <h4><span class=\"shimmer\">[SHIMMER] Class page title</span></h4>\r\n\r\n                <div style=\"margin-bottom: 32px;\" class=\"discussionHeader\">\r\n                    <h5 class=\"shimmer\">Page author name</h5>\r\n\r\n                    <i class=\"fluid-icon shimmer\">calendar_today</i>\r\n                    <span class=\"shimmer\">[SHIMMER] Last updated at</span>\r\n                </div>\r\n\r\n                <!-- Page content -->\r\n                <br />\r\n                <div class=\"shimmer\" style=\"margin: 10px 0px; width: 100%; height: 600px; border: none; outline: none;\"></div>\r\n            </div>\r\n         `);\r\n    }\r\n\r\n    //Fetch page content\r\n    dtpsLMS.fetchPageContent(dtps.classes[classNum].lmsID, pageID).then(function (page) {\r\n        if ((dtps.selectedClass == classNum) && ((dtps.selectedContent == \"pages\") || fromModules)) {\r\n            //Get computed background and text color to style the iFrame with\r\n            var computedBackgroundColor = getComputedStyle($(\".classContent\")[0]).getPropertyValue(\"--background\");\r\n            var computedTextColor = getComputedStyle($(\".card.details\")[0]).getPropertyValue(\"--text\");\r\n\r\n            //Generate a blob with the page content and get its data URL\r\n            var blob = new Blob([`\r\n                <base target=\"_blank\" /> \r\n                <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jottocraft.com/CanvasCSS.css\" media=\"screen,projection\"/>\r\n                <style>body {background-color: ${computedBackgroundColor}; color: ${computedTextColor};</style>\r\n                ${page.content}\r\n            `], { type: 'text/html' });\r\n\r\n            //Get URL from blob\r\n            var pageContentURL = window.URL.createObjectURL(blob);\r\n\r\n            //Render page card in the class content\r\n            jQuery(\".classContent\").html(/*html*/`\r\n                ${fromModules ? /*html*/`\r\n                    <button style=\"margin: 10px 0px 0px 20px;\" class=\"btn\" onclick=\"fluid.screen('moduleStream', '${dtps.classes[classNum].id}')\">\r\n                        <i class=\"fluid-icon\">keyboard_arrow_left</i> Back\r\n                    </button>\r\n                ` : \"\"}\r\n                <div style=\"margin: 20px; padding: 20px;\">\r\n                    <!-- Page title -->\r\n                    <h4 style=\"font-weight: bold;\">${page.title}</h4>\r\n\r\n                    <!-- Page header -->\r\n                    <div style=\"margin-bottom: 32px;\" class=\"discussionHeader\">\r\n                        ${page.author ? /*html*/`\r\n                            <img src=\"${page.author.photoURL}\" />\r\n                            <h5>${page.author.name}</h5>\r\n                        ` : ``}\r\n\r\n                        <i class=\"fluid-icon\">calendar_today</i>\r\n                        <span>${\"Last Updated \" + dtps.formatDate(page.updatedAt)}</span>\r\n                    </div>\r\n\r\n                    <!-- Page content -->\r\n                    <br />\r\n                    <iframe id=\"classPageIframe\" onload=\"dtps.iframeLoad('classPageIframe')\" style=\"margin: 10px 0px; width: 100%; border: none; outline: none;\" src=\"${pageContentURL}\" />\r\n                </div>\r\n            `);\r\n        }\r\n    }).catch((err) => {\r\n        dtps.error(\"Couldn't load page\", \"Caught promise rejection @ dtps.loadPage\", err);\r\n    });\r\n}\r\n\r\n//Fluid UI screen definitions\r\nfluid.externalScreens.discussions = (param) => {\r\n    //Split parameter string into variables\r\n    var courseID = param.split(\"|\")[0];\r\n    var threadID = param.split(\"|\")[1];\r\n    var fromModules = param.split(\"|\")[2] == \"true\";\r\n    var postID = param.split(\"|\")[3];\r\n\r\n    dtps.loadThreadsList(courseID, threadID, fromModules, postID);\r\n}\r\n\r\nfluid.externalScreens.pages = (param) => {\r\n    //Split parameter string into variables\r\n    var courseID = param.split(\"|\")[0];\r\n    var pageID = param.split(\"|\")[1];\r\n    var fromModules = param.split(\"|\")[2] == \"true\";\r\n\r\n    dtps.loadPagesList(courseID, pageID, fromModules);\r\n}\r\n\r\n//Type definitions\r\n\r\n/**\r\n* @typedef {Object} PartialDiscussionThread\r\n* @description Defines partial discussion thread objects in DTPS (for threads list)\r\n* @property {string} title Title of the discussion thread\r\n* @property {string} id Discussion thread ID\r\n* @property {boolean} [locked] True if posting to the discussion thread is locked\r\n*/\r\n\r\n/**\r\n* @typedef {Object} DiscussionThread\r\n* @description Defines discussion thread objects in DTPS\r\n* @property {string} title Title of the discussion thread\r\n* @property {string} id Discussion thread ID\r\n* @property {DiscussionPost[]} posts Posts in this thread, with the initial one first.\r\n* @property {boolean} [locked] True if posting to the discussion thread is locked\r\n* @property {boolean} [requireInitialPost] True if the user must post before viewing others' posts\r\n*/\r\n\r\n/**\r\n* @typedef {Object} DiscussionPost\r\n* @description Defines discussion post objects in DTPS\r\n* @property {string} id Discussion post ID\r\n* @property {string} body Discussion post body HTML\r\n* @property {Date} postedAt Date for when the post was posted\r\n* @property {number} [depth] The depth level this post is\r\n* @property {User} [author] Discussion post author\r\n* @property {DiscussionPost[]} [replies] Replies to this post. Nested replies (replies to replies) should be after this post in the array with a depth of 1, not in the replies key.\r\n* @property {string} [replyURL] A URL that the user can visit to reply to this post\r\n*/\r\n\r\n/**\r\n* @typedef {Object} PartialPage\r\n* @description Defines a partial page object in DTPS (for pages list)\r\n* @property {string} title Page title\r\n* @property {string} id Page ID\r\n*/\r\n\r\n/**\r\n* @typedef {Object} Page\r\n* @description Defines Page objects in DTPS\r\n* @property {string} title Page title\r\n* @property {string} id Page ID\r\n* @property {string} content Page content HTML\r\n* @property {Date} [updatedAt] When the page was last updated\r\n* @property {User} [author] Page author\r\n*/"]}