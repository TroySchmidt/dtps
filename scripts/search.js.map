{"version":3,"sources":["scripts/search.js"],"names":["dtps","globalSearch","param","term","type","courseNum","course","$","attr","ctxType","ctxCourse","presentClass","showClasses","selectedContent","removeClass","jQuery","html","map","join","dataset","datasetPromises","checkedCourses","classes","Number","forEach","push","Promise","resolve","reject","assignments","assignment","title","class","num","body","text","onclick","id","locatedIn","category","icon","infoIcons","dueAt","user","parent","filter","i","info","formatDate","children","find","c","userID","name","icons","missing","state","turnedIn","locked","late","res","dtpsLMS","useRubricGrades","rubric","score","value","scoreName","grade","Math","round","letter","includes","lmsID","modules","fetchModules","then","data","module","items","item","url","completed","keywords","catch","homepage","fetchHomepage","subject","pages","fetchPages","all","page","fetchPageContent","content","author","discussions","fetchDiscussionThreads","discussion","fetchDiscussionPosts","posts","post","threadID","replies","reply","postedAt","people","fetchUsers","section","users","person","fetchAnnouncements","announcements","announcement","results","result","concat","lunr","this","ref","field","metadataWhitelist","doc","add","search","resHTML","renderSearchResult","matchData","metadata","selectedClass","length","show","searchScrollListener","sticky","document","getElementById","offsetTop","parseFloat","css","window","onscroll","pageYOffset","addClass","filterSearch","toggleItem","toggleClass","missingFilter","hasClass","turnedInFilter","lateFilter","lockedFilter","filtersActive","filterRes","filterHTML","mixedClasses","processed","matches","highlightString","string","position","parts","split","pos","part","Object","values","keys","k","key","bodyParts","bodyOverflow","match","sections","sort","a","b","matchesToDisplay","matchStartIndex","matchEndIndex","startIndex","endIndex","slice","color","fluid","externalScreens"],"mappings":"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","sourceRoot":"/","sourcesContent":["/**\r\n * @file DTPS global search\r\n * @author jottocraft\r\n * \r\n * @copyright Copyright (c) 2018-2021 jottocraft. All rights reserved.\r\n * @license GPL-2.0-only\r\n */\r\n\r\n\r\n/**\r\n * Searches Power+ globally and shows results on the \"Search Results\" screen\r\n * \r\n * @param term {string} The search term typed in the input box\r\n */\r\ndtps.globalSearch = function (param) {\r\n    var term = param.term;\r\n    var type = param.type;\r\n    var courseNum = param.course;\r\n\r\n    $(\"#dtpsMainSearchBox\").attr(\"data-search-type\", param.type).attr(\"data-dtps-course\", param.course).attr(\"data-ctx-type\", param.ctxType).attr(\"data-ctx-course\", param.ctxCourse);\r\n\r\n    //Ensure classes are rendered in the sidebar\r\n    dtps.presentClass(\"search\");\r\n    dtps.showClasses();\r\n    dtps.selectedContent = \"stream\";\r\n\r\n    //Clear active state from all tabs\r\n    $(\"#dtpsTabBar .btn\").removeClass(\"active\");\r\n\r\n    jQuery(\".classContent\").html([1, 2, 3, 4].map(() => (\r\n        /*html*/`\r\n            <div class=\"card assignment graded\">\r\n                <h4>\r\n                    <span style=\"width: 450px;\" class=\"shimmer\">Assignment Title</span>\r\n                    <div class=\"points shimmer\">00/00</div>\r\n                </h4>\r\n\r\n                <h5 style=\"white-space: nowrap; overflow: hidden;\">\r\n                    <div style=\"width: 200px;\" class=\"infoChip shimmer\"></div>\r\n                    <i class=\"fluid-icon statusIcon shimmer\">more_horiz</i>\r\n                </h5>\r\n            </div>\r\n        `\r\n    )).join(\"\"));\r\n\r\n    //Fetch everything\r\n    var dataset = [];\r\n    var datasetPromises = [];\r\n    var checkedCourses = [];\r\n\r\n    (courseNum == \"all\" ? dtps.classes : [dtps.classes[Number(courseNum)]]).forEach(course => {\r\n        if ((type == \"assignments\") || (type == \"coursework\") || (type == \"everything\")) {\r\n            datasetPromises.push(new Promise((resolve, reject) => {\r\n                if (!course.assignments) return resolve([]);\r\n                resolve(course.assignments.map(assignment => ({\r\n                    title: assignment.title,\r\n                    class: course.num,\r\n                    body: $('<div>' + assignment.body + '</div>').text(),\r\n                    onclick: \"dtps.assignment('\" + assignment.id + \"', \" + assignment.class + \")\",\r\n                    locatedIn: assignment.category ? assignment.category : \"Assignment\",\r\n                    icon: \"assignment\",\r\n                    type: \"assignment\",\r\n                    infoIcons: [\r\n                        assignment.dueAt ? \"alarm\" : null,\r\n                        dtps.user.parent ? \"person\" : null\r\n                    ].filter(i => i),\r\n                    info: [\r\n                        assignment.dueAt ? \"Due: \" + dtps.formatDate(assignment.dueAt) : null,\r\n                        dtps.user.parent ? dtps.user.children.find(c => c.id == course.userID).name : null\r\n                    ].filter(i => i).join(\"$|$\"),\r\n                    icons: [\r\n                        {\r\n                            icon: assignment.missing ? \"remove_circle_outline\" : null,\r\n                            state: \"missing\"\r\n                        },\r\n                        {\r\n                            icon: assignment.turnedIn ? \"assignment_turned_in\" : null,\r\n                            state: \"turnedIn\"\r\n                        },\r\n                        {\r\n                            icon: assignment.locked ? \"lock_outline\" : null,\r\n                            state: \"locked\"\r\n                        },\r\n                        {\r\n                            icon: assignment.late ? \"assignment_late\" : null,\r\n                            state: \"late\"\r\n                        }\r\n                    ].filter(i => i.icon)\r\n                })));\r\n            }));\r\n        }\r\n\r\n        if ((type == \"grades\") || (type == \"everything\")) {\r\n            datasetPromises.push(new Promise((resolve, reject) => {\r\n                if (!course.assignments) return resolve([]);\r\n                var res = [];\r\n\r\n                course.assignments.forEach(assignment => {\r\n                    if (dtpsLMS.useRubricGrades && assignment.rubric) {\r\n                        assignment.rubric.forEach(rubric => {\r\n                            if (rubric.score) {\r\n                                res.push({\r\n                                    title: assignment.title,\r\n                                    class: course.num,\r\n                                    onclick: \"dtps.assignment('\" + assignment.id + \"', \" + assignment.class + \")\",\r\n                                    locatedIn: rubric.title,\r\n                                    icon: \"assessment\",\r\n                                    infoIcons: [\r\n                                        \"bar_chart\",\r\n                                        dtps.user.parent ? \"person\" : null\r\n                                    ].filter(i => i),\r\n                                    info: [\r\n                                        \"Score: \" + rubric.score + \"/\" + rubric.value + (rubric.scoreName ? \" \" + rubric.scoreName : \"\"),\r\n                                        dtps.user.parent ? dtps.user.children.find(c => c.id == course.userID).name : null\r\n                                    ].filter(i => i).join(\"$|$\"),\r\n                                    icons: []\r\n                                });\r\n                            }\r\n                        });\r\n                    } else if (assignment.grade) {\r\n                        res.push({\r\n                            title: assignment.title,\r\n                            class: course.num,\r\n                            onclick: \"dtps.assignment('\" + assignment.id + \"', \" + assignment.class + \")\",\r\n                            locatedIn: \"Grade\",\r\n                            icon: \"assessment\",\r\n                            infoIcons: [\r\n                                \"bar_chart\",\r\n                                dtps.user.parent ? \"person\" : null\r\n                            ].filter(i => i),\r\n                            info: [\r\n                                \"Score: \" + assignment.grade + \"/\" + assignment.value + \" (\" + Math.round((assignment.grade / assignment.value) * 100) + \"%\" + (assignment.letter ? \", \" + assignment.letter : \"\") + \")\",\r\n                                dtps.user.parent ? dtps.user.children.find(c => c.id == course.userID).name : null\r\n                            ].filter(i => i).join(\"$|$\"),\r\n                            icons: []\r\n                        });\r\n                    }\r\n                });\r\n\r\n                resolve(res);\r\n            }));\r\n        }\r\n\r\n        //Check if this course has already been checked\r\n        if (checkedCourses.includes(course.lmsID)) return;\r\n        checkedCourses.push(course.lmsID);\r\n\r\n        if ((type == \"modules\") || (type == \"coursework\") || (type == \"everything\")) {\r\n            datasetPromises.push(new Promise((resolve, reject) => {\r\n                if (!course.modules) return resolve([]);\r\n                new Promise(resolve => {\r\n                    if (course.modules && (course.modules !== true)) {\r\n                        resolve(course.modules);\r\n                    } else {\r\n                        dtpsLMS.fetchModules(dtps.user.id, course.lmsID).then(data => resolve(data));\r\n                    }\r\n                }).then(data => {\r\n                    var res = [];\r\n                    data.forEach(module => {\r\n                        module.items.forEach(item => {\r\n                            //Prevent assignments from showing twice in coursework search results\r\n                            //(since assignments can appear in both assignments and modules tab)\r\n                            if ((item.type == \"assignment\") && (type == \"coursework\")) return;\r\n\r\n                            item.locatedIn = module.title;\r\n                            res.push(item);\r\n                        });\r\n                    });\r\n\r\n                    resolve(res.map(item => ({\r\n                        title: item.title,\r\n                        class: course.num,\r\n                        url: item.url,\r\n                        locatedIn: item.locatedIn,\r\n                        icon: \"view_module\",\r\n                        infoIcons: [\r\n                            \"category\"\r\n                        ].filter(i => i),\r\n                        info: [\r\n                            \"Type: \" + item.type\r\n                        ].filter(i => i).join(\"$|$\"),\r\n                        icons: [\r\n                            {\r\n                                icon: item.completed ? \"check\" : null,\r\n                                keywords: \"completed done submitted\"\r\n                            }\r\n                        ].filter(i => i.icon)\r\n                    })));\r\n                }).catch(() => resolve([]));\r\n            }));\r\n        }\r\n\r\n        if ((type == \"homepages\") || (type == \"everything\")) {\r\n            datasetPromises.push(new Promise((resolve, reject) => {\r\n                if (!course.homepage) return resolve([]);\r\n                dtpsLMS.fetchHomepage(course.lmsID).then(data => {\r\n                    resolve([{\r\n                        title: course.subject + \" Homepage\",\r\n                        class: course.num,\r\n                        onclick: \"dtps.classHome(\" + course.num + \");\",\r\n                        locatedIn: course.subject,\r\n                        icon: \"home\",\r\n                        body: $('<div>' + data + '</div>').text(),\r\n                        icons: []\r\n                    }]);\r\n                }).catch(() => resolve([]));\r\n            }));\r\n        }\r\n\r\n        if ((type == \"pages\") || (type == \"everything\")) {\r\n            datasetPromises.push(new Promise((resolve, reject) => {\r\n                if (!course.pages) return resolve([]);\r\n                dtpsLMS.fetchPages(course.lmsID).then(pages => {\r\n                    Promise.all(pages.map(page => (\r\n                        dtpsLMS.fetchPageContent(course.lmsID, page.id)\r\n                    ))).then(pages => {\r\n                        resolve(pages.map(page => ({\r\n                            title: page.title,\r\n                            class: course.num,\r\n                            onclick: \"fluid.screen('pages', '\" + course.id + \"|\" + page.id + \"');\",\r\n                            body: $('<div>' + page.content + '</div>').text(),\r\n                            locatedIn: \"Page\",\r\n                            icon: \"insert_drive_file\",\r\n                            infoIcons: [\r\n                                page.author && page.author.name ? \"person\" : null\r\n                            ].filter(i => i),\r\n                            info: [\r\n                                page.author && page.author.name ? \"Author: \" + page.author && page.author.name : null\r\n                            ].filter(i => i).join(\"$|$\"),\r\n                            icons: []\r\n                        })));\r\n                    })\r\n                }).catch(() => resolve([]));\r\n            }));\r\n        }\r\n\r\n        if ((type == \"discussions\") || (type == \"everything\")) {\r\n            datasetPromises.push(new Promise((resolve, reject) => {\r\n                if (!course.discussions) return resolve([]);\r\n                dtpsLMS.fetchDiscussionThreads(course.lmsID).then(discussions => {\r\n                    Promise.all(discussions.map(discussion => (\r\n                        dtpsLMS.fetchDiscussionPosts(course.lmsID, discussion.id)\r\n                    ))).then(discussions => {\r\n                        var res = [];\r\n                        discussions.forEach(discussion => {\r\n                            discussion.posts.forEach(post => {\r\n                                post.locatedIn = discussion.title;\r\n                                post.threadID = discussion.id;\r\n                                res.push(post);\r\n\r\n                                if (post.replies) {\r\n                                    post.replies.forEach(reply => {\r\n                                        reply.locatedIn = discussion.title;\r\n                                        reply.threadID = discussion.id;\r\n                                        res.push(reply);\r\n                                    });\r\n                                }\r\n                            })\r\n                        });\r\n                        resolve(res.map(post => ({\r\n                            body: $('<div>' + post.body + '</div>').text(),\r\n                            class: course.num,\r\n                            onclick: \"fluid.screen('discussions', '\" + course.id + \"|\" + post.threadID + \"|false|\" + post.id + \"');\",\r\n                            locatedIn: post.locatedIn,\r\n                            icon: \"forum\",\r\n                            infoIcons: [\r\n                                post.author && post.author.name ? \"person\" : null,\r\n                                post.postedAt ? \"calendar_today\" : null\r\n                            ].filter(i => i),\r\n                            info: [\r\n                                post.author && post.author.name ? \"Author: \" + post.author && post.author.name : null,\r\n                                post.postedAt ? \"Posted At: \" + dtps.formatDate(post.postedAt) : null\r\n                            ].filter(i => i).join(\"$|$\"),\r\n                            icons: []\r\n                        })));\r\n                    })\r\n                }).catch(() => resolve([]));\r\n            }));\r\n        }\r\n\r\n        if ((type == \"people\") || (type == \"everything\")) {\r\n            datasetPromises.push(new Promise((resolve, reject) => {\r\n                if (!course.people) return resolve([]);\r\n                new Promise(resolve => {\r\n                    if (course.people && (course.people !== true)) {\r\n                        resolve(course.people);\r\n                    } else {\r\n                        dtpsLMS.fetchUsers(course.lmsID).then(data => resolve(data));\r\n                    }\r\n                }).then(data => {\r\n                    var res = [];\r\n                    data.forEach(section => {\r\n                        section.users.forEach(user => {\r\n                            user.locatedIn = section.title;\r\n                            res.push(user);\r\n                        });\r\n                    });\r\n                    resolve(res.map(person => ({\r\n                        title: person.name,\r\n                        class: course.num,\r\n                        url: person.url,\r\n                        locatedIn: person.locatedIn,\r\n                        icon: \"people\",\r\n                        icons: []\r\n                    })));\r\n                }).catch(() => resolve([]));\r\n            }));\r\n        }\r\n\r\n        if ((type == \"announcements\") || (type == \"everything\")) {\r\n            datasetPromises.push(new Promise((resolve, reject) => {\r\n                dtpsLMS.fetchAnnouncements(course.lmsID).then(announcements => {\r\n                    resolve(announcements.map((announcement) => ({\r\n                        title: announcement.title,\r\n                        url: announcement.url,\r\n                        class: course.num,\r\n                        locatedIn: course.subject,\r\n                        icon: \"announcement\",\r\n                        body: $('<div>' + announcement.body + '</div>').text(),\r\n                        infoIcons: [\r\n                            \"calendar_today\"\r\n                        ].filter(i => i),\r\n                        info: [\r\n                            \"Posted at: \" + dtps.formatDate(announcement.postedAt)\r\n                        ].filter(i => i).join(\"$|$\"),\r\n                        icons: []\r\n                    })));\r\n                }).catch(() => resolve([]));\r\n            }));\r\n        }\r\n    });\r\n\r\n    Promise.all(datasetPromises).then(results => {\r\n        results.forEach(result => {\r\n            dataset = dataset.concat(result);\r\n        });\r\n\r\n        var idx = lunr(function () {\r\n            this.ref('id');\r\n            this.field('title');\r\n            this.field('body');\r\n            this.field('locatedIn');\r\n            this.field('info');\r\n            this.metadataWhitelist = ['position'];\r\n\r\n            dataset.forEach(function (doc, i) {\r\n                this.add({\r\n                    id: i,\r\n                    ...doc\r\n                });\r\n            }, this)\r\n        });\r\n\r\n        var result = idx.search(term);\r\n        var resHTML = result.map(res => dtps.renderSearchResult(dataset[Number(res.ref)], res.matchData.metadata, courseNum == \"all\")).join(\"\");\r\n\r\n        if (dtps.selectedClass == \"search\") {\r\n            $(\".headerArea .contentLabel i\").text(\"find_in_page\");\r\n            $(\".headerArea .contentLabel span\").text(result.length + \" results\");\r\n            $(\".headerArea .contentLabel\").show();\r\n\r\n            $(\".classContent\").html(/*html*/`\r\n                <div ${![\"assignments\", \"coursework\"].includes(type) ? `style=\"display: none;\"` : ``} id=\"searchFilterContainer\">\r\n                    <div id=\"searchFilterCard\" class=\"card\">\r\n                        <h5><i class=\"fluid-icon\">filter_alt</i><span>Filters</span></h5>\r\n                        <div class=\"checkContainer\">\r\n                            <div id=\"missingSearchFilter\" init=\"true\" onclick=\"dtps.filterSearch(this)\" class=\"checkbox\"><i class=\"fluid-icon\">check</i></div> \r\n                            <div class=\"label\"><i class=\"fluid-icon\">remove_circle_outline</i> Missing</div> \r\n                        </div>\r\n                        <div class=\"checkContainer\">\r\n                            <div id=\"turnedInSearchFilter\" init=\"true\" onclick=\"dtps.filterSearch(this)\" class=\"checkbox\"><i class=\"fluid-icon\">check</i></div> \r\n                            <div class=\"label\"><i class=\"fluid-icon\">assignment_turned_in</i> Turned in</div> \r\n                        </div>\r\n                        <div class=\"checkContainer\">\r\n                            <div id=\"lateSearchFilter\" init=\"true\" onclick=\"dtps.filterSearch(this)\" class=\"checkbox\"><i class=\"fluid-icon\">check</i></div> \r\n                            <div class=\"label\"><i class=\"fluid-icon\">assignment_late</i> Late</div> \r\n                        </div>\r\n                        <div class=\"checkContainer\">\r\n                            <div id=\"lockedSearchFilter\" init=\"true\" onclick=\"dtps.filterSearch(this)\" class=\"checkbox\"><i class=\"fluid-icon\">check</i></div> \r\n                            <div class=\"label\"><i class=\"fluid-icon\">lock_outline</i> Locked</div> \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div ${[\"assignments\", \"coursework\"].includes(type) ? `class=\"withFilters\"` : ``} id=\"searchResultsContainer\">\r\n                    ${resHTML}\r\n                </div>\r\n            `);\r\n\r\n            if (!dtps.searchScrollListener) {\r\n                dtps.searchScrollListener = true;\r\n                var searchFilters = document.getElementById(\"searchFilterCard\");\r\n                var sticky = searchFilters.offsetTop - parseFloat($(\"body\").css(\"padding-top\"));\r\n                window.onscroll = function () {\r\n                    if ((window.pageYOffset >= sticky) && (dtps.selectedClass == \"search\")) {\r\n                        $(\".classContent\").addClass(\"fixedSearchFilters\");\r\n                    } else {\r\n                        $(\".classContent\").removeClass(\"fixedSearchFilters\");\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        /**\r\n        * Filters search results\r\n        * \r\n        * @param {Element|string} [toggleItem] The selector for the element to toggle\r\n        */\r\n        dtps.filterSearch = function (toggleItem) {\r\n            if (toggleItem) $(toggleItem).toggleClass(\"active\");\r\n\r\n            //Check for enabled filters\r\n            var missingFilter = $(\"#missingSearchFilter\").hasClass(\"active\");\r\n            var turnedInFilter = $(\"#turnedInSearchFilter\").hasClass(\"active\");\r\n            var lateFilter = $(\"#lateSearchFilter\").hasClass(\"active\");\r\n            var lockedFilter = $(\"#lockedSearchFilter\").hasClass(\"active\");\r\n\r\n            var filtersActive = missingFilter || turnedInFilter || lateFilter || lockedFilter;\r\n\r\n            var filterRes = result.filter(function (res) {\r\n                var item = dataset[Number(res.ref)];\r\n\r\n                if (!filtersActive) return true;\r\n\r\n                if (item.type == \"assignment\") {\r\n                    if (missingFilter && item.icons.map(i => i.state).includes(\"missing\")) return true;\r\n                    if (turnedInFilter && item.icons.map(i => i.state).includes(\"turnedIn\")) return true;\r\n                    if (lateFilter && item.icons.map(i => i.state).includes(\"late\")) return true;\r\n                    if (lockedFilter && item.icons.map(i => i.state).includes(\"locked\")) return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            var filterHTML = filterRes.map(res => dtps.renderSearchResult(dataset[Number(res.ref)], res.matchData.metadata, courseNum == \"all\")).join(\"\");\r\n\r\n            if (dtps.selectedClass == \"search\") {\r\n                $(\".headerArea .contentLabel i\").text(filtersActive ? \"filter_alt\" : \"find_in_page\");\r\n                $(\".headerArea .contentLabel span\").text(filterRes.length + \" results\");\r\n                $(\".headerArea .contentLabel\").show();\r\n\r\n                $(\"#searchResultsContainer\").html(filterHTML);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Renders a Search data object into HTML for display in the search results list\r\n * \r\n * @param {SearchData} result The search result to render\r\n * @param {Object[]} matchData The list of matches from Lunr\r\n * @param {boolean} [mixedClasses] True if there are results from multiple classes\r\n * @return {string} The HTML for this result in the results list\r\n */\r\ndtps.renderSearchResult = function (result, matchData, mixedClasses) {\r\n\r\n    if (!result.processed) {\r\n        var matches = {};\r\n        var matchTerms = Object.values(matchData);\r\n        matchTerms.forEach(term => {\r\n            Object.keys(term).forEach(k => {\r\n                if (matches[k]) {\r\n                    matches[k] = matches[k].concat(term[k].position);\r\n                } else {\r\n                    matches[k] = term[k].position;\r\n                }\r\n            });\r\n        });\r\n        matches = Object.keys(matches).map(k => ({ key: k, position: matches[k] }));\r\n\r\n        //A function that highlights a string\r\n        function highlightString(string, position) {\r\n            var parts = string.split(\"\");\r\n            position.forEach(pos => {\r\n                //highlight part\r\n                parts.forEach((part, i) => {\r\n                    if (i == pos[0]) {\r\n                        parts[i] = '<span class=\"highlight\">' + parts[i];\r\n                    }\r\n\r\n                    if (i == (pos[0] + pos[1] - 1)) {\r\n                        parts[i] = parts[i] + '</span>';\r\n                    }\r\n                });\r\n            });\r\n\r\n            return parts.join(\"\");\r\n        }\r\n\r\n        //Highlight matches\r\n        result.bodyParts = [];\r\n        result.bodyOverflow = 0;\r\n        matches.forEach(match => {\r\n            if (match.key == \"title\") {\r\n                result.title = highlightString(result.title, match.position);\r\n            } else if (match.key == \"locatedIn\") {\r\n                result.locatedIn = highlightString(result.locatedIn, match.position);\r\n            } else if (match.key == \"body\") {\r\n                //Get longest 2 matches\r\n                var sections = match.position.sort((a, b) => b[1] - a[1]);\r\n                var matchesToDisplay = 2;\r\n                if (sections.length < matchesToDisplay) matchesToDisplay = sections.length;\r\n                result.bodyOverflow = sections.length - matchesToDisplay;\r\n\r\n                for (var i = 0; i < matchesToDisplay; i++) {\r\n                    var matchStartIndex = sections[i][0];\r\n                    var matchEndIndex = sections[i][0] + sections[i][1] - 1;\r\n\r\n                    var startIndex = matchStartIndex - 10;\r\n                    var endIndex = matchEndIndex + 10;\r\n\r\n                    if (startIndex < 0) startIndex = 0;\r\n                    if (endIndex > (result.body.length - 1)) endIndex = result.body.length - 1;\r\n\r\n                    var res = result.body.slice(startIndex, matchStartIndex) + '<span class=\"highlight\">' + result.body.slice(matchStartIndex, matchEndIndex + 1) + '</span>' + result.body.slice(matchEndIndex + 1, endIndex + 1);\r\n                    result.bodyParts.push(res);\r\n                }\r\n            } else if (match.key == \"info\") {\r\n                result.info = highlightString(result.info, match.position);\r\n            }\r\n        });\r\n\r\n        //Map result info back into an array\r\n        if (result.info) {\r\n            result.info = result.info.split(\"$|$\").map((info, i) => {\r\n                return {\r\n                    icon: result.infoIcons[i],\r\n                    info: info,\r\n                }\r\n            });\r\n        }\r\n\r\n        //Mark this result as processed so it doesn't have to be re-highlighted if a filter is used\r\n        result.processed = true;\r\n    }\r\n\r\n    return /*html*/`\r\n        <div \r\n            class=\"card searchResult ${mixedClasses ? \"mixedClasses\" : \"\"}\"\r\n            style=\"${'--classColor: ' + dtps.classes[result.class].color}\"\r\n            onclick=\"${result.onclick || (result.url && \"window.open('\" + result.url + \"')\")}\"\r\n        >\r\n\r\n            <!-- Color bar for the dashboard -->\r\n            <div class=\"colorBar\"></div>\r\n\r\n            <!-- Assignment title and points -->\r\n            ${result.title ? `<h4>${result.title}</h4>` : \"\"}\r\n\r\n            <h5>\r\n                <div class=\"infoChip\"><i style=\"margin-top: -2px;\" class=\"fluid-icon\">${result.icon}</i> ${result.locatedIn}</div>\r\n                ${result.info ? result.info.map(info => (\r\n        `<div class=\"infoChip\"><i style=\"margin-top: -2px;\" class=\"fluid-icon\">${info.icon}</i> ${info.info}</div>`\r\n    )).join(\"\") : \"\"}\r\n            </h5>\r\n\r\n            ${result.bodyParts.map(part => (\r\n        `<p><span style=\"color: var(--secText);\">...</span>${part}<span style=\"color: var(--secText);\">...</span></p>`\r\n    )).join(\"\")}\r\n            ${result.bodyOverflow ? `<p style=\"color: var(--secText);\">+${result.bodyOverflow} more matches</p>` : \"\"}\r\n\r\n            <h5>\r\n                ${result.icons.map((icon, i) => (`<i class=\"fluid-icon statusIcon\">${icon.icon}</i>`)).join(\"\")}\r\n            </h5>\r\n        </div>\r\n    `;\r\n}\r\n\r\n//Fluid UI screen definitions\r\nfluid.externalScreens.search = (term) => {\r\n    dtps.globalSearch(term);\r\n}\r\n\r\n/**\r\n * @typedef {Object} SearchData\r\n * @description An object that can represent any type of data to be searched.\r\n * @property {string} [title] Result title\r\n * @property {string} [body] Result body (can be HTML)\r\n * @property {string} [url] A URL for opening this result in the LMS\r\n * @property {string} locatedIn Describes where this result was found (as specific as possible)\r\n * @property {string} icon The icon to use for this result. Should match (and is displayed with) the locatedIn property.\r\n * @property {Object[]} [info] Contains any info (e.g. due dates) for this result. Has an icon property, label property, and info property.\r\n * @property {Object[]} icons Status icons for this result. Has an \"icon\" property, for the icon, and a \"keywords\" property for a string with all of the search keywords for the icon.\r\n * @property {number} class The number of the class that this result is from\r\n */"]}